Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_CONCA
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DIVISION
    DIVISION_ENT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    ESPACIO
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    MODULO
    MULTIPL
    NAMESPACE
    OR
    OR_SYMB
    POTENCIA
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    RESTA
    SALTO_LINEA
    STATIC
    STRREV
    SUMA
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> salida
Rule 4     instrucciones -> estructuras_control
Rule 5     instrucciones -> estructuras_datos
Rule 6     instrucciones -> funciones
Rule 7     instrucciones -> op_logica
Rule 8     instrucciones -> op_pila
Rule 9     instrucciones -> declaracion
Rule 10    instrucciones -> declaracionp
Rule 11    instrucciones -> declaracion_s
Rule 12    instrucciones -> crecimiento
Rule 13    instrucciones -> valorc
Rule 14    instrucciones -> LLAVE_DER
Rule 15    instrucciones -> salidas_pos_obj
Rule 16    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 17    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 18    valor -> datos
Rule 19    valor -> pila
Rule 20    valor -> cola
Rule 21    valor -> arreglo
Rule 22    datos -> ENTERO
Rule 23    datos -> FLOTANTE
Rule 24    datos -> STRING
Rule 25    datos -> BOOLEANO
Rule 26    salidas_pos -> datos
Rule 27    salidas_pos -> decl_variable
Rule 28    salidas_pos -> conca_string
Rule 29    salida -> ECHO salidas_pos PUNTO_COMA
Rule 30    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 31    salida -> PRINT salidas_pos PUNTO_COMA
Rule 32    estructuras_control -> if_else
Rule 33    estructuras_control -> for
Rule 34    estructuras_control -> whileDeclaracion
Rule 35    estructuras_datos -> pila
Rule 36    estructuras_datos -> cola
Rule 37    estructuras_datos -> arreglo
Rule 38    funciones -> funcion_variable
Rule 39    funciones -> sinRetorno
Rule 40    operad_log -> IDENTICO
Rule 41    operad_log -> DIFERENTE
Rule 42    operad_log -> MAYOR_QUE
Rule 43    operad_log -> MAYOR_IGUAL
Rule 44    operad_log -> MENOR_QUE
Rule 45    operad_log -> MENOR_IGUAL
Rule 46    bloque -> asignacion
Rule 47    bloque -> salida
Rule 48    bloque -> retorno
Rule 49    bloque -> estructuras_control
Rule 50    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
Rule 51    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 52    for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 53    for -> cola LLAVE_DER
Rule 54    declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA
Rule 55    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 56    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 57    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 58    valorc -> menor
Rule 59    valorc -> mayor
Rule 60    sentenciasAnidadas -> instrucciones
Rule 61    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 62    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 63    crecimiento -> INCREMENTO
Rule 64    crecimiento -> DECREMENTO
Rule 65    if_else -> if_else_inicio if_else_fin
Rule 66    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 67    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 68    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 69    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 70    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 71    op_logica -> ENTERO operad_log ENTERO
Rule 72    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 73    op_logica -> STRING operad_log STRING
Rule 74    op_logica -> BOOLEANO
Rule 75    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 76    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 77    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 78    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 79    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 80    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 81    funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 82    retorno -> RETURN salidas_pos PUNTO_COMA
Rule 83    conca_string -> STRING PUNTO STRING
Rule 84    salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 85    salidas_pos_obj -> valor
Rule 86    salidas_pos_obj -> decl_variable
Rule 87    salidas_pos_obj -> conca_string
Rule 88    contenido -> bloque
Rule 89    contenido -> sinRetorno
Rule 90    whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 91    valores -> datos repite_valores
Rule 92    repite_valores -> COMA datos
Rule 93    repite_valores -> COMA datos repite_valores
Rule 94    arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 95    arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 96    valoresflecha -> datos FLECHA datos repite_valores_f
Rule 97    repite_valores_f -> COMA datos FLECHA datos
Rule 98    repite_valores_f -> COMA datos FLECHA datos repite_valores

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 94 95
AS                   : 
ASIG_CONCA           : 
ASIG_OBJ             : 76
ASIG_REFER           : 
BOOLEANO             : 25 74
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 92 93 97 98
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 79
CURRENT              : 80
DECLARE              : 
DECREMENTO           : 64
DEFAULT              : 
DIFERENTE            : 41
DIVISION             : 
DIVISION_ENT         : 
DO                   : 
ECHO                 : 29
ELSE                 : 70
ELSEIF               : 68 69
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 22 54 56 57 71 71
ESPACIO              : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 96 97 98
FLOTANTE             : 23 72 72
FN                   : 
FOR                  : 52
FOREACH              : 
FUNCTION             : 50 81
GLOBAL               : 
IDENTICO             : 40
IF                   : 67
IGUAL                : 17 54 94
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 63
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 14 50 53 67 68 69 70 81 90
LLAVE_IZQ            : 50 52 67 68 69 70 81 90
MACHT                : 
MAYOR_IGUAL          : 43 57
MAYOR_QUE            : 42
MENOR_IGUAL          : 45 56
MENOR_QUE            : 44
MODULO               : 
MULTIPL              : 
NAMESPACE            : 
NEW                  : 51 75
OR                   : 
OR_SYMB              : 
PAREN_DER            : 30 50 51 52 67 68 69 75 77 78 79 80 81 84 90 94 95
PAREN_IZQ            : 30 50 51 52 67 68 69 75 77 78 79 80 81 84 90 94 95
POP                  : 78
POTENCIA             : 
PRINT                : 30 31
PRINT_R              : 84
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 83
PUNTODOBLE           : 
PUNTO_COMA           : 17 29 30 31 54 56 57 77 78 79 80 82 84 94
PUSH                 : 77
QUEUE                : 51
REQUIERE             : 
RESTA                : 
RETURN               : 82
SALTO_LINEA          : 
SIGNO_DOLAR          : 16 50 54 55 62 94
STACK                : 75
STATIC               : 
STRING               : 24 73 73 83 83
STRREV               : 
SUMA                 : 
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 81
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 16 50 50 54 55 62 81 94
WHILE                : 90
error                : 

Nonterminals, with rules where they appear

arreglo              : 21 37
asignacion           : 2 46
bloque               : 67 68 69 70 81 88
cola                 : 20 36 53
conca_string         : 28 87
contenido            : 90
crecimiento          : 12 62
datos                : 18 26 77 91 92 93 96 96 97 97 98 98
decl_variable        : 17 27 76 81 86 90
declaracion          : 9 52
declaracion_s        : 11 52
declaracionp         : 10 52
estructuras_control  : 4 49
estructuras_datos    : 5
for                  : 33
funcion_variable     : 38
funciones            : 6
if_else              : 32
if_else_cuerpo       : 66 69
if_else_fin          : 65 66
if_else_inicio       : 65 66
instrucciones        : 60 61 0
mayor                : 59
menor                : 58
op_logica            : 7 67 68 69
op_pila              : 8
operad_log           : 71 72 73 90
operad_pila          : 76
pila                 : 19 35
repite_valores       : 91 93 98
repite_valores_f     : 96
retorno              : 48
salida               : 3 47
salidas_pos          : 29 30 31 82
salidas_pos_obj      : 15
sentenciasAnidadas   : 50 52 61
sinRetorno           : 39 89
valor                : 1 17 84 85 90
valorc               : 13 55
valores              : 95
valoresflecha        : 94
whileDeclaracion     : 34

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . estructuras_control
    (5) instrucciones -> . estructuras_datos
    (6) instrucciones -> . funciones
    (7) instrucciones -> . op_logica
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . declaracion
    (10) instrucciones -> . declaracionp
    (11) instrucciones -> . declaracion_s
    (12) instrucciones -> . crecimiento
    (13) instrucciones -> . valorc
    (14) instrucciones -> . LLAVE_DER
    (15) instrucciones -> . salidas_pos_obj
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO
    (76) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (54) declaracion -> . SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> . SIGNO_DOLAR VARIABLE valorc
    (62) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (85) salidas_pos_obj -> . valor
    (86) salidas_pos_obj -> . decl_variable
    (87) salidas_pos_obj -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (81) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (83) conca_string -> . STRING PUNTO STRING
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    LLAVE_DER       shift and go to state 15
    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 32
    BOOLEANO        shift and go to state 33
    SIGNO_DOLAR     shift and go to state 34
    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    NEW             shift and go to state 40
    ARRAY           shift and go to state 41
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    FUNCTION        shift and go to state 45
    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47
    IF              shift and go to state 48

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    estructuras_control            shift and go to state 5
    estructuras_datos              shift and go to state 6
    funciones                      shift and go to state 7
    op_logica                      shift and go to state 8
    op_pila                        shift and go to state 9
    declaracion                    shift and go to state 10
    declaracionp                   shift and go to state 11
    declaracion_s                  shift and go to state 12
    crecimiento                    shift and go to state 13
    valorc                         shift and go to state 14
    salidas_pos_obj                shift and go to state 16
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    arreglo                        shift and go to state 20
    decl_variable                  shift and go to state 21
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 37
    mayor                          shift and go to state 38
    conca_string                   shift and go to state 39
    if_else_inicio                 shift and go to state 42

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .
    (85) salidas_pos_obj -> valor .

  ! reduce/reduce conflict for $end resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for ECHO resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for PRINT resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for ENTERO resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for STRING resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for NEW resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for ARRAY resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for FOR resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for WHILE resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 1 (instrucciones -> valor .)
  ! reduce/reduce conflict for IF resolved using rule 1 (instrucciones -> valor .)
    $end            reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    PRINT_R         reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    INCREMENTO      reduce using rule 1 (instrucciones -> valor .)
    DECREMENTO      reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    ARRAY           reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)

  ! $end            [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! LLAVE_DER       [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! ECHO            [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! PRINT           [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! PRINT_R         [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! ENTERO          [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! FLOTANTE        [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! STRING          [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! BOOLEANO        [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! SIGNO_DOLAR     [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! INCREMENTO      [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! DECREMENTO      [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! NEW             [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! ARRAY           [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! FOR             [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! WHILE           [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! FUNCTION        [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! MENOR_IGUAL     [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! MAYOR_IGUAL     [ reduce using rule 85 (salidas_pos_obj -> valor .) ]
  ! IF              [ reduce using rule 85 (salidas_pos_obj -> valor .) ]


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    INCREMENTO      reduce using rule 2 (instrucciones -> asignacion .)
    DECREMENTO      reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> salida .

    $end            reduce using rule 3 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> salida .)
    ECHO            reduce using rule 3 (instrucciones -> salida .)
    PRINT           reduce using rule 3 (instrucciones -> salida .)
    PRINT_R         reduce using rule 3 (instrucciones -> salida .)
    ENTERO          reduce using rule 3 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 3 (instrucciones -> salida .)
    STRING          reduce using rule 3 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 3 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> salida .)
    INCREMENTO      reduce using rule 3 (instrucciones -> salida .)
    DECREMENTO      reduce using rule 3 (instrucciones -> salida .)
    NEW             reduce using rule 3 (instrucciones -> salida .)
    ARRAY           reduce using rule 3 (instrucciones -> salida .)
    FOR             reduce using rule 3 (instrucciones -> salida .)
    WHILE           reduce using rule 3 (instrucciones -> salida .)
    FUNCTION        reduce using rule 3 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> salida .)
    IF              reduce using rule 3 (instrucciones -> salida .)


state 5

    (4) instrucciones -> estructuras_control .

    $end            reduce using rule 4 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 4 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 4 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 4 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 4 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 4 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 4 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 4 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> estructuras_control .)
    INCREMENTO      reduce using rule 4 (instrucciones -> estructuras_control .)
    DECREMENTO      reduce using rule 4 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 4 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 4 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 4 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 4 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 4 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> estructuras_control .)
    IF              reduce using rule 4 (instrucciones -> estructuras_control .)


state 6

    (5) instrucciones -> estructuras_datos .

    $end            reduce using rule 5 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 5 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_datos .)
    INCREMENTO      reduce using rule 5 (instrucciones -> estructuras_datos .)
    DECREMENTO      reduce using rule 5 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 5 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 5 (instrucciones -> estructuras_datos .)


state 7

    (6) instrucciones -> funciones .

    $end            reduce using rule 6 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> funciones .)
    ECHO            reduce using rule 6 (instrucciones -> funciones .)
    PRINT           reduce using rule 6 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 6 (instrucciones -> funciones .)
    ENTERO          reduce using rule 6 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 6 (instrucciones -> funciones .)
    STRING          reduce using rule 6 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 6 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> funciones .)
    INCREMENTO      reduce using rule 6 (instrucciones -> funciones .)
    DECREMENTO      reduce using rule 6 (instrucciones -> funciones .)
    NEW             reduce using rule 6 (instrucciones -> funciones .)
    ARRAY           reduce using rule 6 (instrucciones -> funciones .)
    FOR             reduce using rule 6 (instrucciones -> funciones .)
    WHILE           reduce using rule 6 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 6 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> funciones .)
    IF              reduce using rule 6 (instrucciones -> funciones .)


state 8

    (7) instrucciones -> op_logica .

    $end            reduce using rule 7 (instrucciones -> op_logica .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> op_logica .)
    ECHO            reduce using rule 7 (instrucciones -> op_logica .)
    PRINT           reduce using rule 7 (instrucciones -> op_logica .)
    PRINT_R         reduce using rule 7 (instrucciones -> op_logica .)
    ENTERO          reduce using rule 7 (instrucciones -> op_logica .)
    FLOTANTE        reduce using rule 7 (instrucciones -> op_logica .)
    STRING          reduce using rule 7 (instrucciones -> op_logica .)
    BOOLEANO        reduce using rule 7 (instrucciones -> op_logica .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> op_logica .)
    INCREMENTO      reduce using rule 7 (instrucciones -> op_logica .)
    DECREMENTO      reduce using rule 7 (instrucciones -> op_logica .)
    NEW             reduce using rule 7 (instrucciones -> op_logica .)
    ARRAY           reduce using rule 7 (instrucciones -> op_logica .)
    FOR             reduce using rule 7 (instrucciones -> op_logica .)
    WHILE           reduce using rule 7 (instrucciones -> op_logica .)
    FUNCTION        reduce using rule 7 (instrucciones -> op_logica .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> op_logica .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> op_logica .)
    IF              reduce using rule 7 (instrucciones -> op_logica .)


state 9

    (8) instrucciones -> op_pila .

    $end            reduce using rule 8 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_pila .)
    ECHO            reduce using rule 8 (instrucciones -> op_pila .)
    PRINT           reduce using rule 8 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 8 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 8 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_pila .)
    STRING          reduce using rule 8 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_pila .)
    INCREMENTO      reduce using rule 8 (instrucciones -> op_pila .)
    DECREMENTO      reduce using rule 8 (instrucciones -> op_pila .)
    NEW             reduce using rule 8 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 8 (instrucciones -> op_pila .)
    FOR             reduce using rule 8 (instrucciones -> op_pila .)
    WHILE           reduce using rule 8 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    IF              reduce using rule 8 (instrucciones -> op_pila .)


state 10

    (9) instrucciones -> declaracion .

    $end            reduce using rule 9 (instrucciones -> declaracion .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> declaracion .)
    ECHO            reduce using rule 9 (instrucciones -> declaracion .)
    PRINT           reduce using rule 9 (instrucciones -> declaracion .)
    PRINT_R         reduce using rule 9 (instrucciones -> declaracion .)
    ENTERO          reduce using rule 9 (instrucciones -> declaracion .)
    FLOTANTE        reduce using rule 9 (instrucciones -> declaracion .)
    STRING          reduce using rule 9 (instrucciones -> declaracion .)
    BOOLEANO        reduce using rule 9 (instrucciones -> declaracion .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> declaracion .)
    INCREMENTO      reduce using rule 9 (instrucciones -> declaracion .)
    DECREMENTO      reduce using rule 9 (instrucciones -> declaracion .)
    NEW             reduce using rule 9 (instrucciones -> declaracion .)
    ARRAY           reduce using rule 9 (instrucciones -> declaracion .)
    FOR             reduce using rule 9 (instrucciones -> declaracion .)
    WHILE           reduce using rule 9 (instrucciones -> declaracion .)
    FUNCTION        reduce using rule 9 (instrucciones -> declaracion .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> declaracion .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> declaracion .)
    IF              reduce using rule 9 (instrucciones -> declaracion .)


state 11

    (10) instrucciones -> declaracionp .

    $end            reduce using rule 10 (instrucciones -> declaracionp .)
    LLAVE_DER       reduce using rule 10 (instrucciones -> declaracionp .)
    ECHO            reduce using rule 10 (instrucciones -> declaracionp .)
    PRINT           reduce using rule 10 (instrucciones -> declaracionp .)
    PRINT_R         reduce using rule 10 (instrucciones -> declaracionp .)
    ENTERO          reduce using rule 10 (instrucciones -> declaracionp .)
    FLOTANTE        reduce using rule 10 (instrucciones -> declaracionp .)
    STRING          reduce using rule 10 (instrucciones -> declaracionp .)
    BOOLEANO        reduce using rule 10 (instrucciones -> declaracionp .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> declaracionp .)
    INCREMENTO      reduce using rule 10 (instrucciones -> declaracionp .)
    DECREMENTO      reduce using rule 10 (instrucciones -> declaracionp .)
    NEW             reduce using rule 10 (instrucciones -> declaracionp .)
    ARRAY           reduce using rule 10 (instrucciones -> declaracionp .)
    FOR             reduce using rule 10 (instrucciones -> declaracionp .)
    WHILE           reduce using rule 10 (instrucciones -> declaracionp .)
    FUNCTION        reduce using rule 10 (instrucciones -> declaracionp .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> declaracionp .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> declaracionp .)
    IF              reduce using rule 10 (instrucciones -> declaracionp .)


state 12

    (11) instrucciones -> declaracion_s .

    $end            reduce using rule 11 (instrucciones -> declaracion_s .)
    LLAVE_DER       reduce using rule 11 (instrucciones -> declaracion_s .)
    ECHO            reduce using rule 11 (instrucciones -> declaracion_s .)
    PRINT           reduce using rule 11 (instrucciones -> declaracion_s .)
    PRINT_R         reduce using rule 11 (instrucciones -> declaracion_s .)
    ENTERO          reduce using rule 11 (instrucciones -> declaracion_s .)
    FLOTANTE        reduce using rule 11 (instrucciones -> declaracion_s .)
    STRING          reduce using rule 11 (instrucciones -> declaracion_s .)
    BOOLEANO        reduce using rule 11 (instrucciones -> declaracion_s .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> declaracion_s .)
    INCREMENTO      reduce using rule 11 (instrucciones -> declaracion_s .)
    DECREMENTO      reduce using rule 11 (instrucciones -> declaracion_s .)
    NEW             reduce using rule 11 (instrucciones -> declaracion_s .)
    ARRAY           reduce using rule 11 (instrucciones -> declaracion_s .)
    FOR             reduce using rule 11 (instrucciones -> declaracion_s .)
    WHILE           reduce using rule 11 (instrucciones -> declaracion_s .)
    FUNCTION        reduce using rule 11 (instrucciones -> declaracion_s .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> declaracion_s .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> declaracion_s .)
    IF              reduce using rule 11 (instrucciones -> declaracion_s .)


state 13

    (12) instrucciones -> crecimiento .

    $end            reduce using rule 12 (instrucciones -> crecimiento .)
    LLAVE_DER       reduce using rule 12 (instrucciones -> crecimiento .)
    ECHO            reduce using rule 12 (instrucciones -> crecimiento .)
    PRINT           reduce using rule 12 (instrucciones -> crecimiento .)
    PRINT_R         reduce using rule 12 (instrucciones -> crecimiento .)
    ENTERO          reduce using rule 12 (instrucciones -> crecimiento .)
    FLOTANTE        reduce using rule 12 (instrucciones -> crecimiento .)
    STRING          reduce using rule 12 (instrucciones -> crecimiento .)
    BOOLEANO        reduce using rule 12 (instrucciones -> crecimiento .)
    SIGNO_DOLAR     reduce using rule 12 (instrucciones -> crecimiento .)
    INCREMENTO      reduce using rule 12 (instrucciones -> crecimiento .)
    DECREMENTO      reduce using rule 12 (instrucciones -> crecimiento .)
    NEW             reduce using rule 12 (instrucciones -> crecimiento .)
    ARRAY           reduce using rule 12 (instrucciones -> crecimiento .)
    FOR             reduce using rule 12 (instrucciones -> crecimiento .)
    WHILE           reduce using rule 12 (instrucciones -> crecimiento .)
    FUNCTION        reduce using rule 12 (instrucciones -> crecimiento .)
    MENOR_IGUAL     reduce using rule 12 (instrucciones -> crecimiento .)
    MAYOR_IGUAL     reduce using rule 12 (instrucciones -> crecimiento .)
    IF              reduce using rule 12 (instrucciones -> crecimiento .)


state 14

    (13) instrucciones -> valorc .

    $end            reduce using rule 13 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 13 (instrucciones -> valorc .)
    ECHO            reduce using rule 13 (instrucciones -> valorc .)
    PRINT           reduce using rule 13 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 13 (instrucciones -> valorc .)
    ENTERO          reduce using rule 13 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 13 (instrucciones -> valorc .)
    STRING          reduce using rule 13 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 13 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 13 (instrucciones -> valorc .)
    INCREMENTO      reduce using rule 13 (instrucciones -> valorc .)
    DECREMENTO      reduce using rule 13 (instrucciones -> valorc .)
    NEW             reduce using rule 13 (instrucciones -> valorc .)
    ARRAY           reduce using rule 13 (instrucciones -> valorc .)
    FOR             reduce using rule 13 (instrucciones -> valorc .)
    WHILE           reduce using rule 13 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 13 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 13 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 13 (instrucciones -> valorc .)
    IF              reduce using rule 13 (instrucciones -> valorc .)


state 15

    (14) instrucciones -> LLAVE_DER .

    $end            reduce using rule 14 (instrucciones -> LLAVE_DER .)
    LLAVE_DER       reduce using rule 14 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 14 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 14 (instrucciones -> LLAVE_DER .)
    PRINT_R         reduce using rule 14 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 14 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 14 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 14 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 14 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 14 (instrucciones -> LLAVE_DER .)
    INCREMENTO      reduce using rule 14 (instrucciones -> LLAVE_DER .)
    DECREMENTO      reduce using rule 14 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 14 (instrucciones -> LLAVE_DER .)
    ARRAY           reduce using rule 14 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 14 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 14 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 14 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 14 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 14 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 14 (instrucciones -> LLAVE_DER .)


state 16

    (15) instrucciones -> salidas_pos_obj .

    $end            reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    LLAVE_DER       reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    ECHO            reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    PRINT           reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    PRINT_R         reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    ENTERO          reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    FLOTANTE        reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    STRING          reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    BOOLEANO        reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    SIGNO_DOLAR     reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    INCREMENTO      reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    DECREMENTO      reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    NEW             reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    ARRAY           reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    FOR             reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    WHILE           reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    FUNCTION        reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    MENOR_IGUAL     reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    MAYOR_IGUAL     reduce using rule 15 (instrucciones -> salidas_pos_obj .)
    IF              reduce using rule 15 (instrucciones -> salidas_pos_obj .)


state 17

    (18) valor -> datos .

    $end            reduce using rule 18 (valor -> datos .)
    PUNTO_COMA      reduce using rule 18 (valor -> datos .)
    PAREN_DER       reduce using rule 18 (valor -> datos .)
    LLAVE_DER       reduce using rule 18 (valor -> datos .)
    ECHO            reduce using rule 18 (valor -> datos .)
    PRINT           reduce using rule 18 (valor -> datos .)
    PRINT_R         reduce using rule 18 (valor -> datos .)
    ENTERO          reduce using rule 18 (valor -> datos .)
    FLOTANTE        reduce using rule 18 (valor -> datos .)
    STRING          reduce using rule 18 (valor -> datos .)
    BOOLEANO        reduce using rule 18 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 18 (valor -> datos .)
    INCREMENTO      reduce using rule 18 (valor -> datos .)
    DECREMENTO      reduce using rule 18 (valor -> datos .)
    NEW             reduce using rule 18 (valor -> datos .)
    ARRAY           reduce using rule 18 (valor -> datos .)
    FOR             reduce using rule 18 (valor -> datos .)
    WHILE           reduce using rule 18 (valor -> datos .)
    FUNCTION        reduce using rule 18 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 18 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 18 (valor -> datos .)
    IF              reduce using rule 18 (valor -> datos .)


state 18

    (19) valor -> pila .
    (35) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 19 (valor -> pila .)
    $end            reduce using rule 19 (valor -> pila .)
    LLAVE_DER       reduce using rule 19 (valor -> pila .)
    ECHO            reduce using rule 19 (valor -> pila .)
    PRINT           reduce using rule 19 (valor -> pila .)
    PRINT_R         reduce using rule 19 (valor -> pila .)
    ENTERO          reduce using rule 19 (valor -> pila .)
    FLOTANTE        reduce using rule 19 (valor -> pila .)
    STRING          reduce using rule 19 (valor -> pila .)
    BOOLEANO        reduce using rule 19 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 19 (valor -> pila .)
    INCREMENTO      reduce using rule 19 (valor -> pila .)
    DECREMENTO      reduce using rule 19 (valor -> pila .)
    NEW             reduce using rule 19 (valor -> pila .)
    ARRAY           reduce using rule 19 (valor -> pila .)
    FOR             reduce using rule 19 (valor -> pila .)
    WHILE           reduce using rule 19 (valor -> pila .)
    FUNCTION        reduce using rule 19 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 19 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 19 (valor -> pila .)
    IF              reduce using rule 19 (valor -> pila .)

  ! $end            [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! INCREMENTO      [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! DECREMENTO      [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 35 (estructuras_datos -> pila .) ]


state 19

    (20) valor -> cola .
    (36) estructuras_datos -> cola .
    (53) for -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 20 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 20 (valor -> cola .)
    ECHO            reduce using rule 20 (valor -> cola .)
    PRINT           reduce using rule 20 (valor -> cola .)
    PRINT_R         reduce using rule 20 (valor -> cola .)
    ENTERO          reduce using rule 20 (valor -> cola .)
    FLOTANTE        reduce using rule 20 (valor -> cola .)
    STRING          reduce using rule 20 (valor -> cola .)
    BOOLEANO        reduce using rule 20 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 20 (valor -> cola .)
    INCREMENTO      reduce using rule 20 (valor -> cola .)
    DECREMENTO      reduce using rule 20 (valor -> cola .)
    NEW             reduce using rule 20 (valor -> cola .)
    ARRAY           reduce using rule 20 (valor -> cola .)
    FOR             reduce using rule 20 (valor -> cola .)
    WHILE           reduce using rule 20 (valor -> cola .)
    FUNCTION        reduce using rule 20 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 20 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 20 (valor -> cola .)
    IF              reduce using rule 20 (valor -> cola .)
    LLAVE_DER       shift and go to state 49

  ! LLAVE_DER       [ reduce using rule 20 (valor -> cola .) ]
  ! $end            [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! INCREMENTO      [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! DECREMENTO      [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 36 (estructuras_datos -> cola .) ]


state 20

    (21) valor -> arreglo .
    (37) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for $end resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 21 (valor -> arreglo .)
    $end            reduce using rule 21 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 21 (valor -> arreglo .)
    ECHO            reduce using rule 21 (valor -> arreglo .)
    PRINT           reduce using rule 21 (valor -> arreglo .)
    PRINT_R         reduce using rule 21 (valor -> arreglo .)
    ENTERO          reduce using rule 21 (valor -> arreglo .)
    FLOTANTE        reduce using rule 21 (valor -> arreglo .)
    STRING          reduce using rule 21 (valor -> arreglo .)
    BOOLEANO        reduce using rule 21 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 21 (valor -> arreglo .)
    INCREMENTO      reduce using rule 21 (valor -> arreglo .)
    DECREMENTO      reduce using rule 21 (valor -> arreglo .)
    NEW             reduce using rule 21 (valor -> arreglo .)
    ARRAY           reduce using rule 21 (valor -> arreglo .)
    FOR             reduce using rule 21 (valor -> arreglo .)
    WHILE           reduce using rule 21 (valor -> arreglo .)
    FUNCTION        reduce using rule 21 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 21 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 21 (valor -> arreglo .)
    IF              reduce using rule 21 (valor -> arreglo .)

  ! $end            [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! LLAVE_DER       [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! INCREMENTO      [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! DECREMENTO      [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 37 (estructuras_datos -> arreglo .) ]


state 21

    (17) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (76) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (86) salidas_pos_obj -> decl_variable .

    IGUAL           shift and go to state 50
    ASIG_OBJ        shift and go to state 51
    $end            reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    LLAVE_DER       reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    ECHO            reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    PRINT           reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    PRINT_R         reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    ENTERO          reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    FLOTANTE        reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    STRING          reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    BOOLEANO        reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    INCREMENTO      reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    DECREMENTO      reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    NEW             reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    ARRAY           reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    FOR             reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    WHILE           reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    FUNCTION        reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    MENOR_IGUAL     reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 86 (salidas_pos_obj -> decl_variable .)
    IF              reduce using rule 86 (salidas_pos_obj -> decl_variable .)


state 22

    (29) salida -> ECHO . salidas_pos PUNTO_COMA
    (26) salidas_pos -> . datos
    (27) salidas_pos -> . decl_variable
    (28) salidas_pos -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 58
    BOOLEANO        shift and go to state 59
    SIGNO_DOLAR     shift and go to state 60

    salidas_pos                    shift and go to state 52
    datos                          shift and go to state 53
    decl_variable                  shift and go to state 54
    conca_string                   shift and go to state 55

state 23

    (30) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> PRINT . salidas_pos PUNTO_COMA
    (26) salidas_pos -> . datos
    (27) salidas_pos -> . decl_variable
    (28) salidas_pos -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 61
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 58
    BOOLEANO        shift and go to state 59
    SIGNO_DOLAR     shift and go to state 60

    salidas_pos                    shift and go to state 62
    datos                          shift and go to state 53
    decl_variable                  shift and go to state 54
    conca_string                   shift and go to state 55

state 24

    (84) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 63


state 25

    (32) estructuras_control -> if_else .

    $end            reduce using rule 32 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 32 (estructuras_control -> if_else .)
    ECHO            reduce using rule 32 (estructuras_control -> if_else .)
    PRINT           reduce using rule 32 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 32 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 32 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 32 (estructuras_control -> if_else .)
    STRING          reduce using rule 32 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 32 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 32 (estructuras_control -> if_else .)
    INCREMENTO      reduce using rule 32 (estructuras_control -> if_else .)
    DECREMENTO      reduce using rule 32 (estructuras_control -> if_else .)
    NEW             reduce using rule 32 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 32 (estructuras_control -> if_else .)
    FOR             reduce using rule 32 (estructuras_control -> if_else .)
    WHILE           reduce using rule 32 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 32 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 32 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 32 (estructuras_control -> if_else .)
    IF              reduce using rule 32 (estructuras_control -> if_else .)


state 26

    (33) estructuras_control -> for .

    $end            reduce using rule 33 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 33 (estructuras_control -> for .)
    ECHO            reduce using rule 33 (estructuras_control -> for .)
    PRINT           reduce using rule 33 (estructuras_control -> for .)
    PRINT_R         reduce using rule 33 (estructuras_control -> for .)
    ENTERO          reduce using rule 33 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 33 (estructuras_control -> for .)
    STRING          reduce using rule 33 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 33 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 33 (estructuras_control -> for .)
    INCREMENTO      reduce using rule 33 (estructuras_control -> for .)
    DECREMENTO      reduce using rule 33 (estructuras_control -> for .)
    NEW             reduce using rule 33 (estructuras_control -> for .)
    ARRAY           reduce using rule 33 (estructuras_control -> for .)
    FOR             reduce using rule 33 (estructuras_control -> for .)
    WHILE           reduce using rule 33 (estructuras_control -> for .)
    FUNCTION        reduce using rule 33 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 33 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 33 (estructuras_control -> for .)
    IF              reduce using rule 33 (estructuras_control -> for .)


state 27

    (34) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    INCREMENTO      reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    DECREMENTO      reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 34 (estructuras_control -> whileDeclaracion .)


state 28

    (38) funciones -> funcion_variable .

    $end            reduce using rule 38 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 38 (funciones -> funcion_variable .)
    ECHO            reduce using rule 38 (funciones -> funcion_variable .)
    PRINT           reduce using rule 38 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 38 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 38 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 38 (funciones -> funcion_variable .)
    STRING          reduce using rule 38 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 38 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 38 (funciones -> funcion_variable .)
    INCREMENTO      reduce using rule 38 (funciones -> funcion_variable .)
    DECREMENTO      reduce using rule 38 (funciones -> funcion_variable .)
    NEW             reduce using rule 38 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 38 (funciones -> funcion_variable .)
    FOR             reduce using rule 38 (funciones -> funcion_variable .)
    WHILE           reduce using rule 38 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 38 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 38 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 38 (funciones -> funcion_variable .)
    IF              reduce using rule 38 (funciones -> funcion_variable .)


state 29

    (39) funciones -> sinRetorno .

    $end            reduce using rule 39 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 39 (funciones -> sinRetorno .)
    ECHO            reduce using rule 39 (funciones -> sinRetorno .)
    PRINT           reduce using rule 39 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 39 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 39 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 39 (funciones -> sinRetorno .)
    STRING          reduce using rule 39 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 39 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 39 (funciones -> sinRetorno .)
    INCREMENTO      reduce using rule 39 (funciones -> sinRetorno .)
    DECREMENTO      reduce using rule 39 (funciones -> sinRetorno .)
    NEW             reduce using rule 39 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 39 (funciones -> sinRetorno .)
    FOR             reduce using rule 39 (funciones -> sinRetorno .)
    WHILE           reduce using rule 39 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 39 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 39 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 39 (funciones -> sinRetorno .)
    IF              reduce using rule 39 (funciones -> sinRetorno .)


state 30

    (71) op_logica -> ENTERO . operad_log ENTERO
    (22) datos -> ENTERO .
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 22 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 22 (datos -> ENTERO .)
    ECHO            reduce using rule 22 (datos -> ENTERO .)
    PRINT           reduce using rule 22 (datos -> ENTERO .)
    PRINT_R         reduce using rule 22 (datos -> ENTERO .)
    ENTERO          reduce using rule 22 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 22 (datos -> ENTERO .)
    STRING          reduce using rule 22 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 22 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 22 (datos -> ENTERO .)
    INCREMENTO      reduce using rule 22 (datos -> ENTERO .)
    DECREMENTO      reduce using rule 22 (datos -> ENTERO .)
    NEW             reduce using rule 22 (datos -> ENTERO .)
    ARRAY           reduce using rule 22 (datos -> ENTERO .)
    FOR             reduce using rule 22 (datos -> ENTERO .)
    WHILE           reduce using rule 22 (datos -> ENTERO .)
    FUNCTION        reduce using rule 22 (datos -> ENTERO .)
    IF              reduce using rule 22 (datos -> ENTERO .)
    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

  ! MENOR_IGUAL     [ reduce using rule 22 (datos -> ENTERO .) ]
  ! MAYOR_IGUAL     [ reduce using rule 22 (datos -> ENTERO .) ]

    operad_log                     shift and go to state 64

state 31

    (72) op_logica -> FLOTANTE . operad_log FLOTANTE
    (23) datos -> FLOTANTE .
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 23 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 23 (datos -> FLOTANTE .)
    ECHO            reduce using rule 23 (datos -> FLOTANTE .)
    PRINT           reduce using rule 23 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 23 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 23 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 23 (datos -> FLOTANTE .)
    STRING          reduce using rule 23 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 23 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 23 (datos -> FLOTANTE .)
    INCREMENTO      reduce using rule 23 (datos -> FLOTANTE .)
    DECREMENTO      reduce using rule 23 (datos -> FLOTANTE .)
    NEW             reduce using rule 23 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 23 (datos -> FLOTANTE .)
    FOR             reduce using rule 23 (datos -> FLOTANTE .)
    WHILE           reduce using rule 23 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 23 (datos -> FLOTANTE .)
    IF              reduce using rule 23 (datos -> FLOTANTE .)
    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

  ! MENOR_IGUAL     [ reduce using rule 23 (datos -> FLOTANTE .) ]
  ! MAYOR_IGUAL     [ reduce using rule 23 (datos -> FLOTANTE .) ]

    operad_log                     shift and go to state 71

state 32

    (73) op_logica -> STRING . operad_log STRING
    (24) datos -> STRING .
    (83) conca_string -> STRING . PUNTO STRING
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 24 (datos -> STRING .)
    LLAVE_DER       reduce using rule 24 (datos -> STRING .)
    ECHO            reduce using rule 24 (datos -> STRING .)
    PRINT           reduce using rule 24 (datos -> STRING .)
    PRINT_R         reduce using rule 24 (datos -> STRING .)
    ENTERO          reduce using rule 24 (datos -> STRING .)
    FLOTANTE        reduce using rule 24 (datos -> STRING .)
    STRING          reduce using rule 24 (datos -> STRING .)
    BOOLEANO        reduce using rule 24 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 24 (datos -> STRING .)
    INCREMENTO      reduce using rule 24 (datos -> STRING .)
    DECREMENTO      reduce using rule 24 (datos -> STRING .)
    NEW             reduce using rule 24 (datos -> STRING .)
    ARRAY           reduce using rule 24 (datos -> STRING .)
    FOR             reduce using rule 24 (datos -> STRING .)
    WHILE           reduce using rule 24 (datos -> STRING .)
    FUNCTION        reduce using rule 24 (datos -> STRING .)
    IF              reduce using rule 24 (datos -> STRING .)
    PUNTO           shift and go to state 73
    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

  ! MENOR_IGUAL     [ reduce using rule 24 (datos -> STRING .) ]
  ! MAYOR_IGUAL     [ reduce using rule 24 (datos -> STRING .) ]

    operad_log                     shift and go to state 72

state 33

    (74) op_logica -> BOOLEANO .
    (25) datos -> BOOLEANO .

  ! reduce/reduce conflict for $end resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for ECHO resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for ENTERO resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for NEW resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for ARRAY resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 25 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for IF resolved using rule 25 (datos -> BOOLEANO .)
    $end            reduce using rule 25 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 25 (datos -> BOOLEANO .)
    ECHO            reduce using rule 25 (datos -> BOOLEANO .)
    PRINT           reduce using rule 25 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 25 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 25 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 25 (datos -> BOOLEANO .)
    STRING          reduce using rule 25 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 25 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 25 (datos -> BOOLEANO .)
    INCREMENTO      reduce using rule 25 (datos -> BOOLEANO .)
    DECREMENTO      reduce using rule 25 (datos -> BOOLEANO .)
    NEW             reduce using rule 25 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 25 (datos -> BOOLEANO .)
    FOR             reduce using rule 25 (datos -> BOOLEANO .)
    WHILE           reduce using rule 25 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 25 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 25 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 25 (datos -> BOOLEANO .)
    IF              reduce using rule 25 (datos -> BOOLEANO .)

  ! $end            [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! LLAVE_DER       [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! ECHO            [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! PRINT           [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! PRINT_R         [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! ENTERO          [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! FLOTANTE        [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! STRING          [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! BOOLEANO        [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! SIGNO_DOLAR     [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! INCREMENTO      [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! DECREMENTO      [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! NEW             [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! ARRAY           [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! FOR             [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! WHILE           [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! FUNCTION        [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! MENOR_IGUAL     [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! MAYOR_IGUAL     [ reduce using rule 74 (op_logica -> BOOLEANO .) ]
  ! IF              [ reduce using rule 74 (op_logica -> BOOLEANO .) ]


state 34

    (54) declaracion -> SIGNO_DOLAR . VARIABLE IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> SIGNO_DOLAR . VARIABLE valorc
    (62) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento
    (94) arreglo -> SIGNO_DOLAR . VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (16) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 74


state 35

    (63) crecimiento -> INCREMENTO .

    $end            reduce using rule 63 (crecimiento -> INCREMENTO .)
    LLAVE_DER       reduce using rule 63 (crecimiento -> INCREMENTO .)
    ECHO            reduce using rule 63 (crecimiento -> INCREMENTO .)
    PRINT           reduce using rule 63 (crecimiento -> INCREMENTO .)
    PRINT_R         reduce using rule 63 (crecimiento -> INCREMENTO .)
    ENTERO          reduce using rule 63 (crecimiento -> INCREMENTO .)
    FLOTANTE        reduce using rule 63 (crecimiento -> INCREMENTO .)
    STRING          reduce using rule 63 (crecimiento -> INCREMENTO .)
    BOOLEANO        reduce using rule 63 (crecimiento -> INCREMENTO .)
    SIGNO_DOLAR     reduce using rule 63 (crecimiento -> INCREMENTO .)
    INCREMENTO      reduce using rule 63 (crecimiento -> INCREMENTO .)
    DECREMENTO      reduce using rule 63 (crecimiento -> INCREMENTO .)
    NEW             reduce using rule 63 (crecimiento -> INCREMENTO .)
    ARRAY           reduce using rule 63 (crecimiento -> INCREMENTO .)
    FOR             reduce using rule 63 (crecimiento -> INCREMENTO .)
    WHILE           reduce using rule 63 (crecimiento -> INCREMENTO .)
    FUNCTION        reduce using rule 63 (crecimiento -> INCREMENTO .)
    MENOR_IGUAL     reduce using rule 63 (crecimiento -> INCREMENTO .)
    MAYOR_IGUAL     reduce using rule 63 (crecimiento -> INCREMENTO .)
    IF              reduce using rule 63 (crecimiento -> INCREMENTO .)
    PAREN_DER       reduce using rule 63 (crecimiento -> INCREMENTO .)


state 36

    (64) crecimiento -> DECREMENTO .

    $end            reduce using rule 64 (crecimiento -> DECREMENTO .)
    LLAVE_DER       reduce using rule 64 (crecimiento -> DECREMENTO .)
    ECHO            reduce using rule 64 (crecimiento -> DECREMENTO .)
    PRINT           reduce using rule 64 (crecimiento -> DECREMENTO .)
    PRINT_R         reduce using rule 64 (crecimiento -> DECREMENTO .)
    ENTERO          reduce using rule 64 (crecimiento -> DECREMENTO .)
    FLOTANTE        reduce using rule 64 (crecimiento -> DECREMENTO .)
    STRING          reduce using rule 64 (crecimiento -> DECREMENTO .)
    BOOLEANO        reduce using rule 64 (crecimiento -> DECREMENTO .)
    SIGNO_DOLAR     reduce using rule 64 (crecimiento -> DECREMENTO .)
    INCREMENTO      reduce using rule 64 (crecimiento -> DECREMENTO .)
    DECREMENTO      reduce using rule 64 (crecimiento -> DECREMENTO .)
    NEW             reduce using rule 64 (crecimiento -> DECREMENTO .)
    ARRAY           reduce using rule 64 (crecimiento -> DECREMENTO .)
    FOR             reduce using rule 64 (crecimiento -> DECREMENTO .)
    WHILE           reduce using rule 64 (crecimiento -> DECREMENTO .)
    FUNCTION        reduce using rule 64 (crecimiento -> DECREMENTO .)
    MENOR_IGUAL     reduce using rule 64 (crecimiento -> DECREMENTO .)
    MAYOR_IGUAL     reduce using rule 64 (crecimiento -> DECREMENTO .)
    IF              reduce using rule 64 (crecimiento -> DECREMENTO .)
    PAREN_DER       reduce using rule 64 (crecimiento -> DECREMENTO .)


state 37

    (58) valorc -> menor .

    $end            reduce using rule 58 (valorc -> menor .)
    LLAVE_DER       reduce using rule 58 (valorc -> menor .)
    ECHO            reduce using rule 58 (valorc -> menor .)
    PRINT           reduce using rule 58 (valorc -> menor .)
    PRINT_R         reduce using rule 58 (valorc -> menor .)
    ENTERO          reduce using rule 58 (valorc -> menor .)
    FLOTANTE        reduce using rule 58 (valorc -> menor .)
    STRING          reduce using rule 58 (valorc -> menor .)
    BOOLEANO        reduce using rule 58 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 58 (valorc -> menor .)
    INCREMENTO      reduce using rule 58 (valorc -> menor .)
    DECREMENTO      reduce using rule 58 (valorc -> menor .)
    NEW             reduce using rule 58 (valorc -> menor .)
    ARRAY           reduce using rule 58 (valorc -> menor .)
    FOR             reduce using rule 58 (valorc -> menor .)
    WHILE           reduce using rule 58 (valorc -> menor .)
    FUNCTION        reduce using rule 58 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 58 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 58 (valorc -> menor .)
    IF              reduce using rule 58 (valorc -> menor .)


state 38

    (59) valorc -> mayor .

    $end            reduce using rule 59 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 59 (valorc -> mayor .)
    ECHO            reduce using rule 59 (valorc -> mayor .)
    PRINT           reduce using rule 59 (valorc -> mayor .)
    PRINT_R         reduce using rule 59 (valorc -> mayor .)
    ENTERO          reduce using rule 59 (valorc -> mayor .)
    FLOTANTE        reduce using rule 59 (valorc -> mayor .)
    STRING          reduce using rule 59 (valorc -> mayor .)
    BOOLEANO        reduce using rule 59 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 59 (valorc -> mayor .)
    INCREMENTO      reduce using rule 59 (valorc -> mayor .)
    DECREMENTO      reduce using rule 59 (valorc -> mayor .)
    NEW             reduce using rule 59 (valorc -> mayor .)
    ARRAY           reduce using rule 59 (valorc -> mayor .)
    FOR             reduce using rule 59 (valorc -> mayor .)
    WHILE           reduce using rule 59 (valorc -> mayor .)
    FUNCTION        reduce using rule 59 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 59 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 59 (valorc -> mayor .)
    IF              reduce using rule 59 (valorc -> mayor .)


state 39

    (87) salidas_pos_obj -> conca_string .

    $end            reduce using rule 87 (salidas_pos_obj -> conca_string .)
    LLAVE_DER       reduce using rule 87 (salidas_pos_obj -> conca_string .)
    ECHO            reduce using rule 87 (salidas_pos_obj -> conca_string .)
    PRINT           reduce using rule 87 (salidas_pos_obj -> conca_string .)
    PRINT_R         reduce using rule 87 (salidas_pos_obj -> conca_string .)
    ENTERO          reduce using rule 87 (salidas_pos_obj -> conca_string .)
    FLOTANTE        reduce using rule 87 (salidas_pos_obj -> conca_string .)
    STRING          reduce using rule 87 (salidas_pos_obj -> conca_string .)
    BOOLEANO        reduce using rule 87 (salidas_pos_obj -> conca_string .)
    SIGNO_DOLAR     reduce using rule 87 (salidas_pos_obj -> conca_string .)
    INCREMENTO      reduce using rule 87 (salidas_pos_obj -> conca_string .)
    DECREMENTO      reduce using rule 87 (salidas_pos_obj -> conca_string .)
    NEW             reduce using rule 87 (salidas_pos_obj -> conca_string .)
    ARRAY           reduce using rule 87 (salidas_pos_obj -> conca_string .)
    FOR             reduce using rule 87 (salidas_pos_obj -> conca_string .)
    WHILE           reduce using rule 87 (salidas_pos_obj -> conca_string .)
    FUNCTION        reduce using rule 87 (salidas_pos_obj -> conca_string .)
    MENOR_IGUAL     reduce using rule 87 (salidas_pos_obj -> conca_string .)
    MAYOR_IGUAL     reduce using rule 87 (salidas_pos_obj -> conca_string .)
    IF              reduce using rule 87 (salidas_pos_obj -> conca_string .)


state 40

    (75) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (51) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 75
    QUEUE           shift and go to state 76


state 41

    (95) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 77


state 42

    (65) if_else -> if_else_inicio . if_else_fin
    (66) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (70) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 80
    ELSEIF          shift and go to state 81

    if_else_fin                    shift and go to state 78
    if_else_cuerpo                 shift and go to state 79

state 43

    (52) for -> FOR . PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 82


state 44

    (90) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 83


state 45

    (81) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    VARIABLE        shift and go to state 84


state 46

    (56) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 85


state 47

    (57) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 86


state 48

    (67) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 87


state 49

    (53) for -> cola LLAVE_DER .

    $end            reduce using rule 53 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 53 (for -> cola LLAVE_DER .)
    ECHO            reduce using rule 53 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 53 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 53 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 53 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 53 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 53 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 53 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 53 (for -> cola LLAVE_DER .)
    INCREMENTO      reduce using rule 53 (for -> cola LLAVE_DER .)
    DECREMENTO      reduce using rule 53 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 53 (for -> cola LLAVE_DER .)
    ARRAY           reduce using rule 53 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 53 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 53 (for -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 53 (for -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 53 (for -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 53 (for -> cola LLAVE_DER .)
    IF              reduce using rule 53 (for -> cola LLAVE_DER .)


state 50

    (17) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59
    NEW             shift and go to state 40
    SIGNO_DOLAR     shift and go to state 93
    ARRAY           shift and go to state 41

    valor                          shift and go to state 88
    datos                          shift and go to state 17
    pila                           shift and go to state 89
    cola                           shift and go to state 90
    arreglo                        shift and go to state 91

state 51

    (76) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (77) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (78) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (79) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (80) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 95
    POP             shift and go to state 96
    COUNT           shift and go to state 97
    CURRENT         shift and go to state 98

    operad_pila                    shift and go to state 94

state 52

    (29) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 99


state 53

    (26) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 26 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 26 (salidas_pos -> datos .)


state 54

    (27) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 27 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 27 (salidas_pos -> decl_variable .)


state 55

    (28) salidas_pos -> conca_string .

    PUNTO_COMA      reduce using rule 28 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 28 (salidas_pos -> conca_string .)


state 56

    (22) datos -> ENTERO .

    PUNTO_COMA      reduce using rule 22 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 22 (datos -> ENTERO .)
    COMA            reduce using rule 22 (datos -> ENTERO .)
    FLECHA          reduce using rule 22 (datos -> ENTERO .)


state 57

    (23) datos -> FLOTANTE .

    PUNTO_COMA      reduce using rule 23 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 23 (datos -> FLOTANTE .)
    COMA            reduce using rule 23 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 23 (datos -> FLOTANTE .)


state 58

    (24) datos -> STRING .
    (83) conca_string -> STRING . PUNTO STRING

    PUNTO_COMA      reduce using rule 24 (datos -> STRING .)
    PAREN_DER       reduce using rule 24 (datos -> STRING .)
    PUNTO           shift and go to state 73


state 59

    (25) datos -> BOOLEANO .

    PUNTO_COMA      reduce using rule 25 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 25 (datos -> BOOLEANO .)
    COMA            reduce using rule 25 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 25 (datos -> BOOLEANO .)


state 60

    (16) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 100


state 61

    (30) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (26) salidas_pos -> . datos
    (27) salidas_pos -> . decl_variable
    (28) salidas_pos -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 58
    BOOLEANO        shift and go to state 59
    SIGNO_DOLAR     shift and go to state 60

    salidas_pos                    shift and go to state 101
    datos                          shift and go to state 53
    decl_variable                  shift and go to state 54
    conca_string                   shift and go to state 55

state 62

    (31) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 102


state 63

    (84) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59
    NEW             shift and go to state 40
    SIGNO_DOLAR     shift and go to state 93
    ARRAY           shift and go to state 41

    valor                          shift and go to state 103
    datos                          shift and go to state 17
    pila                           shift and go to state 89
    cola                           shift and go to state 90
    arreglo                        shift and go to state 91

state 64

    (71) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 104


state 65

    (40) operad_log -> IDENTICO .

    ENTERO          reduce using rule 40 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 40 (operad_log -> IDENTICO .)
    STRING          reduce using rule 40 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 40 (operad_log -> IDENTICO .)
    NEW             reduce using rule 40 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 40 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 40 (operad_log -> IDENTICO .)


state 66

    (41) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 41 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 41 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 41 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 41 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 41 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 41 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 41 (operad_log -> DIFERENTE .)


state 67

    (42) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 42 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 42 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 42 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 42 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 42 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 42 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 42 (operad_log -> MAYOR_QUE .)


state 68

    (43) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 43 (operad_log -> MAYOR_IGUAL .)


state 69

    (44) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 44 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 44 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 44 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 44 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 44 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 44 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 44 (operad_log -> MENOR_QUE .)


state 70

    (45) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 45 (operad_log -> MENOR_IGUAL .)


state 71

    (72) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 105


state 72

    (73) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 106


state 73

    (83) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 107


state 74

    (54) declaracion -> SIGNO_DOLAR VARIABLE . IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (62) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (94) arreglo -> SIGNO_DOLAR VARIABLE . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (16) decl_variable -> SIGNO_DOLAR VARIABLE .
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
    IGUAL           shift and go to state 108
    ASIG_OBJ        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47

  ! IGUAL           [ reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .) ]
  ! INCREMENTO      [ reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .) ]
  ! DECREMENTO      [ reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .) ]
  ! MENOR_IGUAL     [ reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .) ]
  ! MAYOR_IGUAL     [ reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .) ]

    valorc                         shift and go to state 109
    crecimiento                    shift and go to state 110
    menor                          shift and go to state 37
    mayor                          shift and go to state 38

state 75

    (75) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 111


state 76

    (51) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 112


state 77

    (95) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (91) valores -> . datos repite_valores
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    valores                        shift and go to state 113
    datos                          shift and go to state 114

state 78

    (65) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    INCREMENTO      reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    DECREMENTO      reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 65 (if_else -> if_else_inicio if_else_fin .)


state 79

    (66) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (70) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 80

    if_else_fin                    shift and go to state 115

state 80

    (70) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 116


state 81

    (68) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 117


state 82

    (52) for -> FOR PAREN_IZQ . declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (54) declaracion -> . SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA

    SIGNO_DOLAR     shift and go to state 119

    declaracion                    shift and go to state 118

state 83

    (90) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 60

    decl_variable                  shift and go to state 120

state 84

    (81) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    PAREN_IZQ       shift and go to state 121


state 85

    (56) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 122


state 86

    (57) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 123


state 87

    (67) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 125
    FLOTANTE        shift and go to state 126
    STRING          shift and go to state 127
    BOOLEANO        shift and go to state 128

    op_logica                      shift and go to state 124

state 88

    (17) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 129


state 89

    (19) valor -> pila .

    PUNTO_COMA      reduce using rule 19 (valor -> pila .)
    PAREN_DER       reduce using rule 19 (valor -> pila .)


state 90

    (20) valor -> cola .

    PUNTO_COMA      reduce using rule 20 (valor -> cola .)
    PAREN_DER       reduce using rule 20 (valor -> cola .)


state 91

    (21) valor -> arreglo .

    PUNTO_COMA      reduce using rule 21 (valor -> arreglo .)
    PAREN_DER       reduce using rule 21 (valor -> arreglo .)


state 92

    (24) datos -> STRING .

    PUNTO_COMA      reduce using rule 24 (datos -> STRING .)
    PAREN_DER       reduce using rule 24 (datos -> STRING .)
    COMA            reduce using rule 24 (datos -> STRING .)
    FLECHA          reduce using rule 24 (datos -> STRING .)


state 93

    (94) arreglo -> SIGNO_DOLAR . VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    VARIABLE        shift and go to state 130


state 94

    (76) op_pila -> decl_variable ASIG_OBJ operad_pila .

    $end            reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    LLAVE_DER       reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    INCREMENTO      reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    DECREMENTO      reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 76 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 95

    (77) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 131


state 96

    (78) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 132


state 97

    (79) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 133


state 98

    (80) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 134


state 99

    (29) salida -> ECHO salidas_pos PUNTO_COMA .

    $end            reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    INCREMENTO      reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    DECREMENTO      reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 100

    (16) decl_variable -> SIGNO_DOLAR VARIABLE .

    PUNTO_COMA      reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IGUAL           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 101

    (30) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 135


state 102

    (31) salida -> PRINT salidas_pos PUNTO_COMA .

    $end            reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    INCREMENTO      reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    DECREMENTO      reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 103

    (84) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 136


state 104

    (71) op_logica -> ENTERO operad_log ENTERO .

    $end            reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    PAREN_DER       reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    LLAVE_DER       reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    ECHO            reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    PRINT           reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    PRINT_R         reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    ENTERO          reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    FLOTANTE        reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    STRING          reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    BOOLEANO        reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    SIGNO_DOLAR     reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    INCREMENTO      reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    DECREMENTO      reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    NEW             reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    ARRAY           reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    FOR             reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    WHILE           reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    FUNCTION        reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    MENOR_IGUAL     reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    MAYOR_IGUAL     reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)
    IF              reduce using rule 71 (op_logica -> ENTERO operad_log ENTERO .)


state 105

    (72) op_logica -> FLOTANTE operad_log FLOTANTE .

    $end            reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PAREN_DER       reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    LLAVE_DER       reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    ECHO            reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PRINT           reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PRINT_R         reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    ENTERO          reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FLOTANTE        reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    STRING          reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    BOOLEANO        reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    INCREMENTO      reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    DECREMENTO      reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    NEW             reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    ARRAY           reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FOR             reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    WHILE           reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FUNCTION        reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    MENOR_IGUAL     reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    IF              reduce using rule 72 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 106

    (73) op_logica -> STRING operad_log STRING .

    $end            reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    PAREN_DER       reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    LLAVE_DER       reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    ECHO            reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    PRINT           reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    PRINT_R         reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    ENTERO          reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    FLOTANTE        reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    STRING          reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    BOOLEANO        reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    SIGNO_DOLAR     reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    INCREMENTO      reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    DECREMENTO      reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    NEW             reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    ARRAY           reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    FOR             reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    WHILE           reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    FUNCTION        reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    MENOR_IGUAL     reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    MAYOR_IGUAL     reduce using rule 73 (op_logica -> STRING operad_log STRING .)
    IF              reduce using rule 73 (op_logica -> STRING operad_log STRING .)


state 107

    (83) conca_string -> STRING PUNTO STRING .

    $end            reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    PUNTO_COMA      reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    LLAVE_DER       reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    ECHO            reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    PRINT           reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    PRINT_R         reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    ENTERO          reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    FLOTANTE        reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    STRING          reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    BOOLEANO        reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    SIGNO_DOLAR     reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    INCREMENTO      reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    DECREMENTO      reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    NEW             reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    ARRAY           reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    FOR             reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    WHILE           reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    FUNCTION        reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    MENOR_IGUAL     reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    MAYOR_IGUAL     reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    IF              reduce using rule 83 (conca_string -> STRING PUNTO STRING .)


state 108

    (54) declaracion -> SIGNO_DOLAR VARIABLE IGUAL . ENTERO PUNTO_COMA
    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ENTERO          shift and go to state 137
    ARRAY           shift and go to state 138


state 109

    (55) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    $end            reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    SIGNO_DOLAR     reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    LLAVE_DER       reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    ECHO            reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    PRINT           reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    PRINT_R         reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    ENTERO          reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    FLOTANTE        reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    STRING          reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    BOOLEANO        reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    INCREMENTO      reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    DECREMENTO      reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    NEW             reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    ARRAY           reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    FOR             reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    WHILE           reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    FUNCTION        reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    MENOR_IGUAL     reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    MAYOR_IGUAL     reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)
    IF              reduce using rule 55 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 110

    (62) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    $end            reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    PAREN_DER       reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    LLAVE_DER       reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    ECHO            reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    PRINT           reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    PRINT_R         reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    ENTERO          reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    FLOTANTE        reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    STRING          reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    BOOLEANO        reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    SIGNO_DOLAR     reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    INCREMENTO      reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    DECREMENTO      reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    NEW             reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    ARRAY           reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    FOR             reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    WHILE           reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    FUNCTION        reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    MENOR_IGUAL     reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    MAYOR_IGUAL     reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)
    IF              reduce using rule 62 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 111

    (75) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 139


state 112

    (51) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 140


state 113

    (95) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 141


state 114

    (91) valores -> datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 143

    repite_valores                 shift and go to state 142

state 115

    (66) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    INCREMENTO      reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    DECREMENTO      reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 66 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 116

    (70) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (46) bloque -> . asignacion
    (47) bloque -> . salida
    (48) bloque -> . retorno
    (49) bloque -> . estructuras_control
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (82) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    RETURN          shift and go to state 150
    SIGNO_DOLAR     shift and go to state 60
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    IF              shift and go to state 48
    NEW             shift and go to state 152

    bloque                         shift and go to state 144
    asignacion                     shift and go to state 145
    salida                         shift and go to state 146
    retorno                        shift and go to state 147
    estructuras_control            shift and go to state 148
    decl_variable                  shift and go to state 149
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    if_else_inicio                 shift and go to state 42
    cola                           shift and go to state 151

state 117

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 125
    FLOTANTE        shift and go to state 126
    STRING          shift and go to state 127
    BOOLEANO        shift and go to state 128

    op_logica                      shift and go to state 153

state 118

    (52) for -> FOR PAREN_IZQ declaracion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (55) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 155

    declaracionp                   shift and go to state 154

state 119

    (54) declaracion -> SIGNO_DOLAR . VARIABLE IGUAL ENTERO PUNTO_COMA

    VARIABLE        shift and go to state 156


state 120

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

    operad_log                     shift and go to state 157

state 121

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    TRES_PUNTOS     shift and go to state 158
    SIGNO_DOLAR     shift and go to state 159


state 122

    (56) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 56 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 123

    (57) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 57 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 124

    (67) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 160


state 125

    (71) op_logica -> ENTERO . operad_log ENTERO
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

    operad_log                     shift and go to state 64

state 126

    (72) op_logica -> FLOTANTE . operad_log FLOTANTE
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

    operad_log                     shift and go to state 71

state 127

    (73) op_logica -> STRING . operad_log STRING
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 65
    DIFERENTE       shift and go to state 66
    MAYOR_QUE       shift and go to state 67
    MAYOR_IGUAL     shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_IGUAL     shift and go to state 70

    operad_log                     shift and go to state 72

state 128

    (74) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 74 (op_logica -> BOOLEANO .)


state 129

    (17) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    $end            reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    INCREMENTO      reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    DECREMENTO      reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 130

    (94) arreglo -> SIGNO_DOLAR VARIABLE . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 161


state 131

    (77) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    datos                          shift and go to state 162

state 132

    (78) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 163


state 133

    (79) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 164


state 134

    (80) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 165


state 135

    (30) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 166


state 136

    (84) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 167


state 137

    (54) declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 168


state 138

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 169


state 139

    (75) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    INCREMENTO      reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    DECREMENTO      reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 75 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 140

    (51) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    INCREMENTO      reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    DECREMENTO      reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 141

    (95) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    $end            reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    LLAVE_DER       reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    INCREMENTO      reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    DECREMENTO      reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 95 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 142

    (91) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 91 (valores -> datos repite_valores .)


state 143

    (92) repite_valores -> COMA . datos
    (93) repite_valores -> COMA . datos repite_valores
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    datos                          shift and go to state 170

state 144

    (70) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 171


state 145

    (46) bloque -> asignacion .

    LLAVE_DER       reduce using rule 46 (bloque -> asignacion .)


state 146

    (47) bloque -> salida .

    LLAVE_DER       reduce using rule 47 (bloque -> salida .)


state 147

    (48) bloque -> retorno .

    LLAVE_DER       reduce using rule 48 (bloque -> retorno .)


state 148

    (49) bloque -> estructuras_control .

    LLAVE_DER       reduce using rule 49 (bloque -> estructuras_control .)


state 149

    (17) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 50


state 150

    (82) retorno -> RETURN . salidas_pos PUNTO_COMA
    (26) salidas_pos -> . datos
    (27) salidas_pos -> . decl_variable
    (28) salidas_pos -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 58
    BOOLEANO        shift and go to state 59
    SIGNO_DOLAR     shift and go to state 60

    salidas_pos                    shift and go to state 172
    datos                          shift and go to state 53
    decl_variable                  shift and go to state 54
    conca_string                   shift and go to state 55

state 151

    (53) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 49


state 152

    (51) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 76


state 153

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 173


state 154

    (52) for -> FOR PAREN_IZQ declaracion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 175

    declaracion_s                  shift and go to state 174

state 155

    (55) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 176


state 156

    (54) declaracion -> SIGNO_DOLAR VARIABLE . IGUAL ENTERO PUNTO_COMA

    IGUAL           shift and go to state 177


state 157

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59
    NEW             shift and go to state 40
    SIGNO_DOLAR     shift and go to state 93
    ARRAY           shift and go to state 41

    valor                          shift and go to state 178
    datos                          shift and go to state 17
    pila                           shift and go to state 89
    cola                           shift and go to state 90
    arreglo                        shift and go to state 91

state 158

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 60

    decl_variable                  shift and go to state 179

state 159

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    VARIABLE        shift and go to state 180


state 160

    (67) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 181


state 161

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 138


state 162

    (77) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 182


state 163

    (78) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 183


state 164

    (79) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 184


state 165

    (80) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 185


state 166

    (30) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 167

    (84) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    $end            reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 168

    (54) declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 54 (declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA .)


state 169

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (96) valoresflecha -> . datos FLECHA datos repite_valores_f
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    valoresflecha                  shift and go to state 186
    datos                          shift and go to state 187

state 170

    (92) repite_valores -> COMA datos .
    (93) repite_valores -> COMA datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 92 (repite_valores -> COMA datos .)
    COMA            shift and go to state 143

    repite_valores                 shift and go to state 188

state 171

    (70) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    INCREMENTO      reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    DECREMENTO      reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 70 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 172

    (82) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 189


state 173

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 190


state 174

    (52) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 191


state 175

    (62) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 192


state 176

    (55) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47

    valorc                         shift and go to state 109
    menor                          shift and go to state 37
    mayor                          shift and go to state 38

state 177

    (54) declaracion -> SIGNO_DOLAR VARIABLE IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 137


state 178

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 193


state 179

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 194


state 180

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    PAREN_DER       shift and go to state 195


state 181

    (67) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (46) bloque -> . asignacion
    (47) bloque -> . salida
    (48) bloque -> . retorno
    (49) bloque -> . estructuras_control
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (82) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    RETURN          shift and go to state 150
    SIGNO_DOLAR     shift and go to state 60
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    IF              shift and go to state 48
    NEW             shift and go to state 152

    bloque                         shift and go to state 196
    asignacion                     shift and go to state 145
    salida                         shift and go to state 146
    retorno                        shift and go to state 147
    estructuras_control            shift and go to state 148
    decl_variable                  shift and go to state 149
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    if_else_inicio                 shift and go to state 42
    cola                           shift and go to state 151

state 182

    (77) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 197


state 183

    (78) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 78 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 184

    (79) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 79 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 185

    (80) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 80 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 186

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 198


state 187

    (96) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 199


state 188

    (93) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 93 (repite_valores -> COMA datos repite_valores .)


state 189

    (82) retorno -> RETURN salidas_pos PUNTO_COMA .

    LLAVE_DER       reduce using rule 82 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 190

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (46) bloque -> . asignacion
    (47) bloque -> . salida
    (48) bloque -> . retorno
    (49) bloque -> . estructuras_control
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (82) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    RETURN          shift and go to state 150
    SIGNO_DOLAR     shift and go to state 60
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    IF              shift and go to state 48
    NEW             shift and go to state 152

    bloque                         shift and go to state 200
    asignacion                     shift and go to state 145
    salida                         shift and go to state 146
    retorno                        shift and go to state 147
    estructuras_control            shift and go to state 148
    decl_variable                  shift and go to state 149
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    if_else_inicio                 shift and go to state 42
    cola                           shift and go to state 151

state 191

    (52) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 201


state 192

    (62) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36

    crecimiento                    shift and go to state 110

state 193

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 202


state 194

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 203


state 195

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    LLAVE_IZQ       shift and go to state 204


state 196

    (67) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 205


state 197

    (77) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 77 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 198

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 206


state 199

    (96) valoresflecha -> datos FLECHA . datos repite_valores_f
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    datos                          shift and go to state 207

state 200

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 208


state 201

    (52) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (60) sentenciasAnidadas -> . instrucciones
    (61) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . estructuras_control
    (5) instrucciones -> . estructuras_datos
    (6) instrucciones -> . funciones
    (7) instrucciones -> . op_logica
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . declaracion
    (10) instrucciones -> . declaracionp
    (11) instrucciones -> . declaracion_s
    (12) instrucciones -> . crecimiento
    (13) instrucciones -> . valorc
    (14) instrucciones -> . LLAVE_DER
    (15) instrucciones -> . salidas_pos_obj
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO
    (76) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (54) declaracion -> . SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> . SIGNO_DOLAR VARIABLE valorc
    (62) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (85) salidas_pos_obj -> . valor
    (86) salidas_pos_obj -> . decl_variable
    (87) salidas_pos_obj -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (81) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (83) conca_string -> . STRING PUNTO STRING
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    LLAVE_DER       shift and go to state 15
    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 32
    BOOLEANO        shift and go to state 33
    SIGNO_DOLAR     shift and go to state 34
    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    NEW             shift and go to state 40
    ARRAY           shift and go to state 41
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    FUNCTION        shift and go to state 45
    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47
    IF              shift and go to state 48

    declaracion                    shift and go to state 10
    declaracionp                   shift and go to state 11
    declaracion_s                  shift and go to state 12
    sentenciasAnidadas             shift and go to state 209
    instrucciones                  shift and go to state 210
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    estructuras_control            shift and go to state 5
    estructuras_datos              shift and go to state 6
    funciones                      shift and go to state 7
    op_logica                      shift and go to state 8
    op_pila                        shift and go to state 9
    crecimiento                    shift and go to state 13
    valorc                         shift and go to state 14
    salidas_pos_obj                shift and go to state 16
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    arreglo                        shift and go to state 20
    decl_variable                  shift and go to state 21
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 37
    mayor                          shift and go to state 38
    conca_string                   shift and go to state 39
    if_else_inicio                 shift and go to state 42

state 202

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (88) contenido -> . bloque
    (89) contenido -> . sinRetorno
    (46) bloque -> . asignacion
    (47) bloque -> . salida
    (48) bloque -> . retorno
    (49) bloque -> . estructuras_control
    (50) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (82) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    FUNCTION        shift and go to state 214
    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    RETURN          shift and go to state 150
    SIGNO_DOLAR     shift and go to state 60
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    IF              shift and go to state 48
    NEW             shift and go to state 152

    decl_variable                  shift and go to state 149
    contenido                      shift and go to state 211
    bloque                         shift and go to state 212
    sinRetorno                     shift and go to state 213
    asignacion                     shift and go to state 145
    salida                         shift and go to state 146
    retorno                        shift and go to state 147
    estructuras_control            shift and go to state 148
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    if_else_inicio                 shift and go to state 42
    cola                           shift and go to state 151

state 203

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (46) bloque -> . asignacion
    (47) bloque -> . salida
    (48) bloque -> . retorno
    (49) bloque -> . estructuras_control
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (82) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    RETURN          shift and go to state 150
    SIGNO_DOLAR     shift and go to state 60
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    IF              shift and go to state 48
    NEW             shift and go to state 152

    decl_variable                  shift and go to state 149
    bloque                         shift and go to state 215
    asignacion                     shift and go to state 145
    salida                         shift and go to state 146
    retorno                        shift and go to state 147
    estructuras_control            shift and go to state 148
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    if_else_inicio                 shift and go to state 42
    cola                           shift and go to state 151

state 204

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas LLAVE_DER
    (60) sentenciasAnidadas -> . instrucciones
    (61) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . estructuras_control
    (5) instrucciones -> . estructuras_datos
    (6) instrucciones -> . funciones
    (7) instrucciones -> . op_logica
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . declaracion
    (10) instrucciones -> . declaracionp
    (11) instrucciones -> . declaracion_s
    (12) instrucciones -> . crecimiento
    (13) instrucciones -> . valorc
    (14) instrucciones -> . LLAVE_DER
    (15) instrucciones -> . salidas_pos_obj
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO
    (76) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (54) declaracion -> . SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> . SIGNO_DOLAR VARIABLE valorc
    (62) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (85) salidas_pos_obj -> . valor
    (86) salidas_pos_obj -> . decl_variable
    (87) salidas_pos_obj -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (81) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (83) conca_string -> . STRING PUNTO STRING
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    LLAVE_DER       shift and go to state 15
    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 32
    BOOLEANO        shift and go to state 33
    SIGNO_DOLAR     shift and go to state 34
    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    NEW             shift and go to state 40
    ARRAY           shift and go to state 41
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    FUNCTION        shift and go to state 45
    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47
    IF              shift and go to state 48

    sentenciasAnidadas             shift and go to state 216
    instrucciones                  shift and go to state 210
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    estructuras_control            shift and go to state 5
    estructuras_datos              shift and go to state 6
    funciones                      shift and go to state 7
    op_logica                      shift and go to state 8
    op_pila                        shift and go to state 9
    declaracion                    shift and go to state 10
    declaracionp                   shift and go to state 11
    declaracion_s                  shift and go to state 12
    crecimiento                    shift and go to state 13
    valorc                         shift and go to state 14
    salidas_pos_obj                shift and go to state 16
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    arreglo                        shift and go to state 20
    decl_variable                  shift and go to state 21
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 37
    mayor                          shift and go to state 38
    conca_string                   shift and go to state 39
    if_else_inicio                 shift and go to state 42

state 205

    (67) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 67 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 67 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 206

    (94) arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 94 (arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 207

    (96) valoresflecha -> datos FLECHA datos . repite_valores_f
    (97) repite_valores_f -> . COMA datos FLECHA datos
    (98) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 218

    repite_valores_f               shift and go to state 217

state 208

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (68) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 68 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 81

    if_else_cuerpo                 shift and go to state 219

state 209

    (52) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    INCREMENTO      reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    DECREMENTO      reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 52 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 210

    (60) sentenciasAnidadas -> instrucciones .
    (61) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (60) sentenciasAnidadas -> . instrucciones
    (61) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . estructuras_control
    (5) instrucciones -> . estructuras_datos
    (6) instrucciones -> . funciones
    (7) instrucciones -> . op_logica
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . declaracion
    (10) instrucciones -> . declaracionp
    (11) instrucciones -> . declaracion_s
    (12) instrucciones -> . crecimiento
    (13) instrucciones -> . valorc
    (14) instrucciones -> . LLAVE_DER
    (15) instrucciones -> . salidas_pos_obj
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (71) op_logica -> . ENTERO operad_log ENTERO
    (72) op_logica -> . FLOTANTE operad_log FLOTANTE
    (73) op_logica -> . STRING operad_log STRING
    (74) op_logica -> . BOOLEANO
    (76) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (54) declaracion -> . SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA
    (55) declaracionp -> . SIGNO_DOLAR VARIABLE valorc
    (62) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento
    (63) crecimiento -> . INCREMENTO
    (64) crecimiento -> . DECREMENTO
    (58) valorc -> . menor
    (59) valorc -> . mayor
    (85) salidas_pos_obj -> . valor
    (86) salidas_pos_obj -> . decl_variable
    (87) salidas_pos_obj -> . conca_string
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO
    (75) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (95) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (65) if_else -> . if_else_inicio if_else_fin
    (66) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (81) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (50) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER
    (56) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (57) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (83) conca_string -> . STRING PUNTO STRING
    (67) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 60 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 15
    ECHO            shift and go to state 22
    PRINT           shift and go to state 23
    PRINT_R         shift and go to state 24
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 32
    BOOLEANO        shift and go to state 33
    SIGNO_DOLAR     shift and go to state 34
    INCREMENTO      shift and go to state 35
    DECREMENTO      shift and go to state 36
    NEW             shift and go to state 40
    ARRAY           shift and go to state 41
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    FUNCTION        shift and go to state 45
    MENOR_IGUAL     shift and go to state 46
    MAYOR_IGUAL     shift and go to state 47
    IF              shift and go to state 48

  ! LLAVE_DER       [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! INCREMENTO      [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! DECREMENTO      [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 60 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 210
    sentenciasAnidadas             shift and go to state 220
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    estructuras_control            shift and go to state 5
    estructuras_datos              shift and go to state 6
    funciones                      shift and go to state 7
    op_logica                      shift and go to state 8
    op_pila                        shift and go to state 9
    declaracion                    shift and go to state 10
    declaracionp                   shift and go to state 11
    declaracion_s                  shift and go to state 12
    crecimiento                    shift and go to state 13
    valorc                         shift and go to state 14
    salidas_pos_obj                shift and go to state 16
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    arreglo                        shift and go to state 20
    decl_variable                  shift and go to state 21
    if_else                        shift and go to state 25
    for                            shift and go to state 26
    whileDeclaracion               shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 37
    mayor                          shift and go to state 38
    conca_string                   shift and go to state 39
    if_else_inicio                 shift and go to state 42

state 211

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 221


state 212

    (88) contenido -> bloque .

    LLAVE_DER       reduce using rule 88 (contenido -> bloque .)


state 213

    (89) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 89 (contenido -> sinRetorno .)


state 214

    (50) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    VARIABLE        shift and go to state 222


state 215

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 223


state 216

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas . LLAVE_DER

    LLAVE_DER       shift and go to state 224


state 217

    (96) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 96 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 218

    (97) repite_valores_f -> COMA . datos FLECHA datos
    (98) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    datos                          shift and go to state 225

state 219

    (69) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 69 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 220

    (61) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    INCREMENTO      reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    DECREMENTO      reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 61 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 221

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    INCREMENTO      reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    DECREMENTO      reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 222

    (50) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    PAREN_IZQ       shift and go to state 226


state 223

    (81) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    INCREMENTO      reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    DECREMENTO      reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 81 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 224

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .

    $end            reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    LLAVE_DER       reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    ECHO            reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    PRINT           reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    PRINT_R         reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    ENTERO          reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    FLOTANTE        reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    STRING          reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    BOOLEANO        reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    INCREMENTO      reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    DECREMENTO      reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    NEW             reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    ARRAY           reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    FOR             reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    WHILE           reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    FUNCTION        reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)
    IF              reduce using rule 50 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER .)


state 225

    (97) repite_valores_f -> COMA datos . FLECHA datos
    (98) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 227


state 226

    (50) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas LLAVE_DER

    SIGNO_DOLAR     shift and go to state 159


state 227

    (97) repite_valores_f -> COMA datos FLECHA . datos
    (98) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (22) datos -> . ENTERO
    (23) datos -> . FLOTANTE
    (24) datos -> . STRING
    (25) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 92
    BOOLEANO        shift and go to state 59

    datos                          shift and go to state 228

state 228

    (97) repite_valores_f -> COMA datos FLECHA datos .
    (98) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 97 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 143

    repite_valores                 shift and go to state 229

state 229

    (98) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 98 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 19 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 74 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 74 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 210 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 210 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 210 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 210 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 210 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 210 resolved as shift
WARNING: shift/reduce conflict for STRING in state 210 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 210 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 210 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 210 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 210 resolved as shift
WARNING: shift/reduce conflict for NEW in state 210 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 210 resolved as shift
WARNING: shift/reduce conflict for FOR in state 210 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 210 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 210 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for IF in state 210 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (instrucciones -> valor)
WARNING: rejected rule (salidas_pos_obj -> valor) in state 2
WARNING: reduce/reduce conflict in state 18 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 20
WARNING: reduce/reduce conflict in state 33 resolved using rule (datos -> BOOLEANO)
WARNING: rejected rule (op_logica -> BOOLEANO) in state 33
WARNING: Rule (salidas_pos_obj -> valor) is never reduced
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
