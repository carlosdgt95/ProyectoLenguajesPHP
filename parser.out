Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    NAMESPACE
    OR
    OR_SYMB
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> concatenacion
Rule 4     instrucciones -> salida
Rule 5     instrucciones -> estructuras_control
Rule 6     instrucciones -> estructuras_datos
Rule 7     instrucciones -> funciones
Rule 8     instrucciones -> op_pila
Rule 9     instrucciones -> valorc
Rule 10    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 11    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 12    valor -> datos
Rule 13    valor -> pila
Rule 14    valor -> cola
Rule 15    valor -> arreglo
Rule 16    datos -> ENTERO
Rule 17    datos -> FLOTANTE
Rule 18    datos -> STRING
Rule 19    datos -> BOOLEANO
Rule 20    salidas_pos -> datos
Rule 21    salidas_pos -> decl_variable
Rule 22    salidas_pos -> conca_string
Rule 23    salida -> ECHO salidas_pos PUNTO_COMA
Rule 24    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 25    salida -> PRINT salidas_pos PUNTO_COMA
Rule 26    estructuras_control -> if_else
Rule 27    estructuras_control -> for
Rule 28    estructuras_control -> whileDeclaracion
Rule 29    estructuras_datos -> pila
Rule 30    estructuras_datos -> cola
Rule 31    estructuras_datos -> arreglo
Rule 32    funciones -> funcion_variable
Rule 33    funciones -> sinRetorno
Rule 34    operad_log -> IDENTICO
Rule 35    operad_log -> DIFERENTE
Rule 36    operad_log -> MAYOR_QUE
Rule 37    operad_log -> MAYOR_IGUAL
Rule 38    operad_log -> MENOR_QUE
Rule 39    operad_log -> MENOR_IGUAL
Rule 40    operad_arit -> SUMA
Rule 41    operad_arit -> RESTA
Rule 42    operad_arit -> MULTIPL
Rule 43    operad_arit -> DIVISION
Rule 44    operad_arit -> DIVISION_ENT
Rule 45    operad_arit -> POTENCIA
Rule 46    operad_arit -> MODULO
Rule 47    bloque -> asignacion
Rule 48    bloque -> salida
Rule 49    bloque -> retorno
Rule 50    bloque -> estructuras_control
Rule 51    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 52    for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 53    for -> cola LLAVE_DER
Rule 54    sentenciasAnidadas -> instrucciones
Rule 55    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 56    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 57    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 58    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 59    valorc -> menor
Rule 60    valorc -> mayor
Rule 61    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 62    crecimiento -> INCREMENTO
Rule 63    crecimiento -> DECREMENTO
Rule 64    if_else -> if_else_inicio if_else_fin
Rule 65    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 66    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 67    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 68    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 69    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 70    op_logica -> ENTERO operad_log ENTERO
Rule 71    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 72    op_logica -> STRING operad_log STRING
Rule 73    op_logica -> BOOLEANO
Rule 74    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 75    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 76    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 77    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 78    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 79    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 80    funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 81    retorno -> RETURN salidas_pos PUNTO_COMA
Rule 82    concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA
Rule 83    conca_string -> STRING PUNTO STRING
Rule 84    salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 85    salidas_pos_obj -> valor
Rule 86    salidas_pos_obj -> decl_variable
Rule 87    salidas_pos_obj -> conca_string
Rule 88    contenido -> bloque
Rule 89    contenido -> sinRetorno
Rule 90    whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 91    valores -> datos repite_valores
Rule 92    repite_valores -> COMA datos
Rule 93    repite_valores -> COMA datos repite_valores
Rule 94    arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 95    valoresflecha -> datos FLECHA datos repite_valores_f
Rule 96    repite_valores_f -> COMA datos FLECHA datos
Rule 97    repite_valores_f -> COMA datos FLECHA datos repite_valores
Rule 98    arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 99    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 100   sinRetorno -> cola LLAVE_DER

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 94 98
AS                   : 
ASIG_CONCA           : 82
ASIG_OBJ             : 75
ASIG_REFER           : 
BOOLEANO             : 19 73
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 92 93 96 97
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 78
CURRENT              : 79
DECLARE              : 
DECREMENTO           : 63
DEFAULT              : 
DIFERENTE            : 35
DIVISION             : 43
DIVISION_ENT         : 44
DO                   : 
ECHO                 : 23
ELSE                 : 69
ELSEIF               : 67 68
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 16 57 58 70 70
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 95 96 97
FLOTANTE             : 17 71 71
FN                   : 
FOR                  : 52
FOREACH              : 
FUNCTION             : 80 99
GLOBAL               : 
IDENTICO             : 34
IF                   : 66
IGUAL                : 11 98
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 62
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 53 66 67 68 69 80 90 100
LLAVE_IZQ            : 52 66 67 68 69 80 90 99
MACHT                : 
MAYOR_IGUAL          : 37 58
MAYOR_QUE            : 36
MENOR_IGUAL          : 39 57
MENOR_QUE            : 38
MODULO               : 46
MULTIPL              : 42
NAMESPACE            : 
NEW                  : 51 74
OR                   : 
OR_SYMB              : 
PAREN_DER            : 24 51 52 66 67 68 74 76 77 78 79 80 84 90 94 98 99
PAREN_IZQ            : 24 51 52 66 67 68 74 76 77 78 79 80 84 90 94 98 99
POP                  : 77
POTENCIA             : 45
PRINT                : 24 25
PRINT_R              : 84
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 83
PUNTODOBLE           : 
PUNTO_COMA           : 11 23 24 25 57 58 76 77 78 79 81 82 84 98
PUSH                 : 76
QUEUE                : 51
REQUIERE             : 
RESTA                : 41
RETURN               : 81
SALTO_LINEA          : 
SIGNO_DOLAR          : 10 56 61 99
STACK                : 74
STATIC               : 
STRING               : 18 72 72 83 83
STRREV               : 
SUMA                 : 40
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 80
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 10 56 61 80 99 99
WHILE                : 90
error                : 

Nonterminals, with rules where they appear

arreglo              : 15 31
asignacion           : 2 47 52
bloque               : 66 67 68 69 80 88
cola                 : 14 30 53 100
conca_string         : 22 87
concatenacion        : 3
contenido            : 90
crecimiento          : 61
datos                : 12 20 76 82 91 92 93 95 95 96 96 97 97
decl_variable        : 11 21 75 80 82 86 90 98
declaracion_s        : 52
declaracionp         : 52
estructuras_control  : 5 50
estructuras_datos    : 6
for                  : 27
funcion_variable     : 32
funciones            : 7
if_else              : 26
if_else_cuerpo       : 65 68
if_else_fin          : 64 65
if_else_inicio       : 64 65
instrucciones        : 54 55 0
mayor                : 60
menor                : 59
op_logica            : 66 67 68
op_pila              : 8
operad_arit          : 
operad_log           : 70 71 72 90
operad_pila          : 75
pila                 : 13 29
repite_valores       : 91 93 97
repite_valores_f     : 95
retorno              : 49
salida               : 4 48
salidas_pos          : 23 24 25 81
salidas_pos_obj      : 
sentenciasAnidadas   : 52 55 99
sinRetorno           : 33 89
valor                : 1 11 84 85 90
valorc               : 9 56
valores              : 94
valoresflecha        : 98
whileDeclaracion     : 28

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (82) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (29) estructuras_datos -> . pila
    (30) estructuras_datos -> . cola
    (31) estructuras_datos -> . arreglo
    (32) funciones -> . funcion_variable
    (33) funciones -> . sinRetorno
    (75) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (59) valorc -> . menor
    (60) valorc -> . mayor
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (80) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (100) sinRetorno -> . cola LLAVE_DER
    (57) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (58) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    FUNCTION        shift and go to state 36
    MENOR_IGUAL     shift and go to state 37
    MAYOR_IGUAL     shift and go to state 38
    IF              shift and go to state 39

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    datos                          shift and go to state 11
    pila                           shift and go to state 12
    cola                           shift and go to state 13
    arreglo                        shift and go to state 14
    decl_variable                  shift and go to state 15
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    funcion_variable               shift and go to state 22
    sinRetorno                     shift and go to state 23
    menor                          shift and go to state 24
    mayor                          shift and go to state 25
    if_else_inicio                 shift and go to state 33

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .

    $end            reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    PRINT_R         reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    ARRAY           reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> concatenacion .

    $end            reduce using rule 3 (instrucciones -> concatenacion .)
    ECHO            reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT           reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT_R         reduce using rule 3 (instrucciones -> concatenacion .)
    ENTERO          reduce using rule 3 (instrucciones -> concatenacion .)
    FLOTANTE        reduce using rule 3 (instrucciones -> concatenacion .)
    STRING          reduce using rule 3 (instrucciones -> concatenacion .)
    BOOLEANO        reduce using rule 3 (instrucciones -> concatenacion .)
    NEW             reduce using rule 3 (instrucciones -> concatenacion .)
    ARRAY           reduce using rule 3 (instrucciones -> concatenacion .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> concatenacion .)
    FOR             reduce using rule 3 (instrucciones -> concatenacion .)
    WHILE           reduce using rule 3 (instrucciones -> concatenacion .)
    FUNCTION        reduce using rule 3 (instrucciones -> concatenacion .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    IF              reduce using rule 3 (instrucciones -> concatenacion .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> concatenacion .)


state 5

    (4) instrucciones -> salida .

    $end            reduce using rule 4 (instrucciones -> salida .)
    ECHO            reduce using rule 4 (instrucciones -> salida .)
    PRINT           reduce using rule 4 (instrucciones -> salida .)
    PRINT_R         reduce using rule 4 (instrucciones -> salida .)
    ENTERO          reduce using rule 4 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 4 (instrucciones -> salida .)
    STRING          reduce using rule 4 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 4 (instrucciones -> salida .)
    NEW             reduce using rule 4 (instrucciones -> salida .)
    ARRAY           reduce using rule 4 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> salida .)
    FOR             reduce using rule 4 (instrucciones -> salida .)
    WHILE           reduce using rule 4 (instrucciones -> salida .)
    FUNCTION        reduce using rule 4 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    IF              reduce using rule 4 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> salida .)


state 6

    (5) instrucciones -> estructuras_control .

    $end            reduce using rule 5 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 5 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 5 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    IF              reduce using rule 5 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_control .)


state 7

    (6) instrucciones -> estructuras_datos .

    $end            reduce using rule 6 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 6 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 6 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 6 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 6 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 6 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 6 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 6 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 6 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 6 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 6 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> estructuras_datos .)


state 8

    (7) instrucciones -> funciones .

    $end            reduce using rule 7 (instrucciones -> funciones .)
    ECHO            reduce using rule 7 (instrucciones -> funciones .)
    PRINT           reduce using rule 7 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 7 (instrucciones -> funciones .)
    ENTERO          reduce using rule 7 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 7 (instrucciones -> funciones .)
    STRING          reduce using rule 7 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 7 (instrucciones -> funciones .)
    NEW             reduce using rule 7 (instrucciones -> funciones .)
    ARRAY           reduce using rule 7 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> funciones .)
    FOR             reduce using rule 7 (instrucciones -> funciones .)
    WHILE           reduce using rule 7 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 7 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    IF              reduce using rule 7 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> funciones .)


state 9

    (8) instrucciones -> op_pila .

    $end            reduce using rule 8 (instrucciones -> op_pila .)
    ECHO            reduce using rule 8 (instrucciones -> op_pila .)
    PRINT           reduce using rule 8 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 8 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 8 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_pila .)
    STRING          reduce using rule 8 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_pila .)
    NEW             reduce using rule 8 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 8 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_pila .)
    FOR             reduce using rule 8 (instrucciones -> op_pila .)
    WHILE           reduce using rule 8 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    IF              reduce using rule 8 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_pila .)


state 10

    (9) instrucciones -> valorc .

    $end            reduce using rule 9 (instrucciones -> valorc .)
    ECHO            reduce using rule 9 (instrucciones -> valorc .)
    PRINT           reduce using rule 9 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 9 (instrucciones -> valorc .)
    ENTERO          reduce using rule 9 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 9 (instrucciones -> valorc .)
    STRING          reduce using rule 9 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 9 (instrucciones -> valorc .)
    NEW             reduce using rule 9 (instrucciones -> valorc .)
    ARRAY           reduce using rule 9 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> valorc .)
    FOR             reduce using rule 9 (instrucciones -> valorc .)
    WHILE           reduce using rule 9 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 9 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    IF              reduce using rule 9 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> valorc .)


state 11

    (12) valor -> datos .

    $end            reduce using rule 12 (valor -> datos .)
    PUNTO_COMA      reduce using rule 12 (valor -> datos .)
    PAREN_DER       reduce using rule 12 (valor -> datos .)
    ECHO            reduce using rule 12 (valor -> datos .)
    PRINT           reduce using rule 12 (valor -> datos .)
    PRINT_R         reduce using rule 12 (valor -> datos .)
    ENTERO          reduce using rule 12 (valor -> datos .)
    FLOTANTE        reduce using rule 12 (valor -> datos .)
    STRING          reduce using rule 12 (valor -> datos .)
    BOOLEANO        reduce using rule 12 (valor -> datos .)
    NEW             reduce using rule 12 (valor -> datos .)
    ARRAY           reduce using rule 12 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 12 (valor -> datos .)
    FOR             reduce using rule 12 (valor -> datos .)
    WHILE           reduce using rule 12 (valor -> datos .)
    FUNCTION        reduce using rule 12 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 12 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 12 (valor -> datos .)
    IF              reduce using rule 12 (valor -> datos .)
    LLAVE_DER       reduce using rule 12 (valor -> datos .)


state 12

    (13) valor -> pila .
    (29) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 13 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 13 (valor -> pila .)
    $end            reduce using rule 13 (valor -> pila .)
    ECHO            reduce using rule 13 (valor -> pila .)
    PRINT           reduce using rule 13 (valor -> pila .)
    PRINT_R         reduce using rule 13 (valor -> pila .)
    ENTERO          reduce using rule 13 (valor -> pila .)
    FLOTANTE        reduce using rule 13 (valor -> pila .)
    STRING          reduce using rule 13 (valor -> pila .)
    BOOLEANO        reduce using rule 13 (valor -> pila .)
    NEW             reduce using rule 13 (valor -> pila .)
    ARRAY           reduce using rule 13 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 13 (valor -> pila .)
    FOR             reduce using rule 13 (valor -> pila .)
    WHILE           reduce using rule 13 (valor -> pila .)
    FUNCTION        reduce using rule 13 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 13 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 13 (valor -> pila .)
    IF              reduce using rule 13 (valor -> pila .)
    LLAVE_DER       reduce using rule 13 (valor -> pila .)

  ! $end            [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 29 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 29 (estructuras_datos -> pila .) ]


state 13

    (14) valor -> cola .
    (30) estructuras_datos -> cola .
    (53) for -> cola . LLAVE_DER
    (100) sinRetorno -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 14 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 14 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 14 (valor -> cola .)
    ECHO            reduce using rule 14 (valor -> cola .)
    PRINT           reduce using rule 14 (valor -> cola .)
    PRINT_R         reduce using rule 14 (valor -> cola .)
    ENTERO          reduce using rule 14 (valor -> cola .)
    FLOTANTE        reduce using rule 14 (valor -> cola .)
    STRING          reduce using rule 14 (valor -> cola .)
    BOOLEANO        reduce using rule 14 (valor -> cola .)
    NEW             reduce using rule 14 (valor -> cola .)
    ARRAY           reduce using rule 14 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 14 (valor -> cola .)
    FOR             reduce using rule 14 (valor -> cola .)
    WHILE           reduce using rule 14 (valor -> cola .)
    FUNCTION        reduce using rule 14 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 14 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 14 (valor -> cola .)
    IF              reduce using rule 14 (valor -> cola .)
    LLAVE_DER       shift and go to state 40

  ! LLAVE_DER       [ reduce using rule 14 (valor -> cola .) ]
  ! $end            [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 30 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 30 (estructuras_datos -> cola .) ]


state 14

    (15) valor -> arreglo .
    (31) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for $end resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 15 (valor -> arreglo .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 15 (valor -> arreglo .)
    $end            reduce using rule 15 (valor -> arreglo .)
    ECHO            reduce using rule 15 (valor -> arreglo .)
    PRINT           reduce using rule 15 (valor -> arreglo .)
    PRINT_R         reduce using rule 15 (valor -> arreglo .)
    ENTERO          reduce using rule 15 (valor -> arreglo .)
    FLOTANTE        reduce using rule 15 (valor -> arreglo .)
    STRING          reduce using rule 15 (valor -> arreglo .)
    BOOLEANO        reduce using rule 15 (valor -> arreglo .)
    NEW             reduce using rule 15 (valor -> arreglo .)
    ARRAY           reduce using rule 15 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 15 (valor -> arreglo .)
    FOR             reduce using rule 15 (valor -> arreglo .)
    WHILE           reduce using rule 15 (valor -> arreglo .)
    FUNCTION        reduce using rule 15 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 15 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 15 (valor -> arreglo .)
    IF              reduce using rule 15 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 15 (valor -> arreglo .)

  ! $end            [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 31 (estructuras_datos -> arreglo .) ]
  ! LLAVE_DER       [ reduce using rule 31 (estructuras_datos -> arreglo .) ]


state 15

    (11) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (82) concatenacion -> decl_variable . ASIG_CONCA datos PUNTO_COMA
    (75) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (98) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 41
    ASIG_CONCA      shift and go to state 42
    ASIG_OBJ        shift and go to state 43


state 16

    (23) salida -> ECHO . salidas_pos PUNTO_COMA
    (20) salidas_pos -> . datos
    (21) salidas_pos -> . decl_variable
    (22) salidas_pos -> . conca_string
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 48
    BOOLEANO        shift and go to state 29
    SIGNO_DOLAR     shift and go to state 32

    salidas_pos                    shift and go to state 44
    datos                          shift and go to state 45
    decl_variable                  shift and go to state 46
    conca_string                   shift and go to state 47

state 17

    (24) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> PRINT . salidas_pos PUNTO_COMA
    (20) salidas_pos -> . datos
    (21) salidas_pos -> . decl_variable
    (22) salidas_pos -> . conca_string
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 49
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 48
    BOOLEANO        shift and go to state 29
    SIGNO_DOLAR     shift and go to state 32

    salidas_pos                    shift and go to state 50
    datos                          shift and go to state 45
    decl_variable                  shift and go to state 46
    conca_string                   shift and go to state 47

state 18

    (84) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 51


state 19

    (26) estructuras_control -> if_else .

    $end            reduce using rule 26 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 26 (estructuras_control -> if_else .)
    ECHO            reduce using rule 26 (estructuras_control -> if_else .)
    PRINT           reduce using rule 26 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 26 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 26 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 26 (estructuras_control -> if_else .)
    STRING          reduce using rule 26 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 26 (estructuras_control -> if_else .)
    NEW             reduce using rule 26 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 26 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 26 (estructuras_control -> if_else .)
    FOR             reduce using rule 26 (estructuras_control -> if_else .)
    WHILE           reduce using rule 26 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 26 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 26 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 26 (estructuras_control -> if_else .)
    IF              reduce using rule 26 (estructuras_control -> if_else .)


state 20

    (27) estructuras_control -> for .

    $end            reduce using rule 27 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 27 (estructuras_control -> for .)
    ECHO            reduce using rule 27 (estructuras_control -> for .)
    PRINT           reduce using rule 27 (estructuras_control -> for .)
    PRINT_R         reduce using rule 27 (estructuras_control -> for .)
    ENTERO          reduce using rule 27 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 27 (estructuras_control -> for .)
    STRING          reduce using rule 27 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 27 (estructuras_control -> for .)
    NEW             reduce using rule 27 (estructuras_control -> for .)
    ARRAY           reduce using rule 27 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 27 (estructuras_control -> for .)
    FOR             reduce using rule 27 (estructuras_control -> for .)
    WHILE           reduce using rule 27 (estructuras_control -> for .)
    FUNCTION        reduce using rule 27 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 27 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 27 (estructuras_control -> for .)
    IF              reduce using rule 27 (estructuras_control -> for .)


state 21

    (28) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 28 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 28 (estructuras_control -> whileDeclaracion .)


state 22

    (32) funciones -> funcion_variable .

    $end            reduce using rule 32 (funciones -> funcion_variable .)
    ECHO            reduce using rule 32 (funciones -> funcion_variable .)
    PRINT           reduce using rule 32 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 32 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 32 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 32 (funciones -> funcion_variable .)
    STRING          reduce using rule 32 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 32 (funciones -> funcion_variable .)
    NEW             reduce using rule 32 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 32 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 32 (funciones -> funcion_variable .)
    FOR             reduce using rule 32 (funciones -> funcion_variable .)
    WHILE           reduce using rule 32 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 32 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 32 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 32 (funciones -> funcion_variable .)
    IF              reduce using rule 32 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 32 (funciones -> funcion_variable .)


state 23

    (33) funciones -> sinRetorno .

    $end            reduce using rule 33 (funciones -> sinRetorno .)
    ECHO            reduce using rule 33 (funciones -> sinRetorno .)
    PRINT           reduce using rule 33 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 33 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 33 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 33 (funciones -> sinRetorno .)
    STRING          reduce using rule 33 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 33 (funciones -> sinRetorno .)
    NEW             reduce using rule 33 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 33 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 33 (funciones -> sinRetorno .)
    FOR             reduce using rule 33 (funciones -> sinRetorno .)
    WHILE           reduce using rule 33 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 33 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 33 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 33 (funciones -> sinRetorno .)
    IF              reduce using rule 33 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 33 (funciones -> sinRetorno .)


state 24

    (59) valorc -> menor .

    $end            reduce using rule 59 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 59 (valorc -> menor .)
    ECHO            reduce using rule 59 (valorc -> menor .)
    PRINT           reduce using rule 59 (valorc -> menor .)
    PRINT_R         reduce using rule 59 (valorc -> menor .)
    ENTERO          reduce using rule 59 (valorc -> menor .)
    FLOTANTE        reduce using rule 59 (valorc -> menor .)
    STRING          reduce using rule 59 (valorc -> menor .)
    BOOLEANO        reduce using rule 59 (valorc -> menor .)
    NEW             reduce using rule 59 (valorc -> menor .)
    ARRAY           reduce using rule 59 (valorc -> menor .)
    FOR             reduce using rule 59 (valorc -> menor .)
    WHILE           reduce using rule 59 (valorc -> menor .)
    FUNCTION        reduce using rule 59 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 59 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 59 (valorc -> menor .)
    IF              reduce using rule 59 (valorc -> menor .)
    LLAVE_DER       reduce using rule 59 (valorc -> menor .)


state 25

    (60) valorc -> mayor .

    $end            reduce using rule 60 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 60 (valorc -> mayor .)
    ECHO            reduce using rule 60 (valorc -> mayor .)
    PRINT           reduce using rule 60 (valorc -> mayor .)
    PRINT_R         reduce using rule 60 (valorc -> mayor .)
    ENTERO          reduce using rule 60 (valorc -> mayor .)
    FLOTANTE        reduce using rule 60 (valorc -> mayor .)
    STRING          reduce using rule 60 (valorc -> mayor .)
    BOOLEANO        reduce using rule 60 (valorc -> mayor .)
    NEW             reduce using rule 60 (valorc -> mayor .)
    ARRAY           reduce using rule 60 (valorc -> mayor .)
    FOR             reduce using rule 60 (valorc -> mayor .)
    WHILE           reduce using rule 60 (valorc -> mayor .)
    FUNCTION        reduce using rule 60 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 60 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 60 (valorc -> mayor .)
    IF              reduce using rule 60 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 60 (valorc -> mayor .)


state 26

    (16) datos -> ENTERO .

    $end            reduce using rule 16 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 16 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 16 (datos -> ENTERO .)
    COMA            reduce using rule 16 (datos -> ENTERO .)
    FLECHA          reduce using rule 16 (datos -> ENTERO .)
    ECHO            reduce using rule 16 (datos -> ENTERO .)
    PRINT           reduce using rule 16 (datos -> ENTERO .)
    PRINT_R         reduce using rule 16 (datos -> ENTERO .)
    ENTERO          reduce using rule 16 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 16 (datos -> ENTERO .)
    STRING          reduce using rule 16 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 16 (datos -> ENTERO .)
    NEW             reduce using rule 16 (datos -> ENTERO .)
    ARRAY           reduce using rule 16 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 16 (datos -> ENTERO .)
    FOR             reduce using rule 16 (datos -> ENTERO .)
    WHILE           reduce using rule 16 (datos -> ENTERO .)
    FUNCTION        reduce using rule 16 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 16 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 16 (datos -> ENTERO .)
    IF              reduce using rule 16 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 16 (datos -> ENTERO .)


state 27

    (17) datos -> FLOTANTE .

    $end            reduce using rule 17 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 17 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 17 (datos -> FLOTANTE .)
    COMA            reduce using rule 17 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 17 (datos -> FLOTANTE .)
    ECHO            reduce using rule 17 (datos -> FLOTANTE .)
    PRINT           reduce using rule 17 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 17 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 17 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 17 (datos -> FLOTANTE .)
    STRING          reduce using rule 17 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 17 (datos -> FLOTANTE .)
    NEW             reduce using rule 17 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 17 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 17 (datos -> FLOTANTE .)
    FOR             reduce using rule 17 (datos -> FLOTANTE .)
    WHILE           reduce using rule 17 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 17 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 17 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 17 (datos -> FLOTANTE .)
    IF              reduce using rule 17 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 17 (datos -> FLOTANTE .)


state 28

    (18) datos -> STRING .

    $end            reduce using rule 18 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 18 (datos -> STRING .)
    PAREN_DER       reduce using rule 18 (datos -> STRING .)
    COMA            reduce using rule 18 (datos -> STRING .)
    FLECHA          reduce using rule 18 (datos -> STRING .)
    ECHO            reduce using rule 18 (datos -> STRING .)
    PRINT           reduce using rule 18 (datos -> STRING .)
    PRINT_R         reduce using rule 18 (datos -> STRING .)
    ENTERO          reduce using rule 18 (datos -> STRING .)
    FLOTANTE        reduce using rule 18 (datos -> STRING .)
    STRING          reduce using rule 18 (datos -> STRING .)
    BOOLEANO        reduce using rule 18 (datos -> STRING .)
    NEW             reduce using rule 18 (datos -> STRING .)
    ARRAY           reduce using rule 18 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 18 (datos -> STRING .)
    FOR             reduce using rule 18 (datos -> STRING .)
    WHILE           reduce using rule 18 (datos -> STRING .)
    FUNCTION        reduce using rule 18 (datos -> STRING .)
    MENOR_IGUAL     reduce using rule 18 (datos -> STRING .)
    MAYOR_IGUAL     reduce using rule 18 (datos -> STRING .)
    IF              reduce using rule 18 (datos -> STRING .)
    LLAVE_DER       reduce using rule 18 (datos -> STRING .)


state 29

    (19) datos -> BOOLEANO .

    $end            reduce using rule 19 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 19 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 19 (datos -> BOOLEANO .)
    COMA            reduce using rule 19 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 19 (datos -> BOOLEANO .)
    ECHO            reduce using rule 19 (datos -> BOOLEANO .)
    PRINT           reduce using rule 19 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 19 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 19 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 19 (datos -> BOOLEANO .)
    STRING          reduce using rule 19 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 19 (datos -> BOOLEANO .)
    NEW             reduce using rule 19 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 19 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 19 (datos -> BOOLEANO .)
    FOR             reduce using rule 19 (datos -> BOOLEANO .)
    WHILE           reduce using rule 19 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 19 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 19 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 19 (datos -> BOOLEANO .)
    IF              reduce using rule 19 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 19 (datos -> BOOLEANO .)


state 30

    (74) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (51) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 52
    QUEUE           shift and go to state 53


state 31

    (94) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 54


state 32

    (10) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 55


state 33

    (64) if_else -> if_else_inicio . if_else_fin
    (65) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (69) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (67) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 58
    ELSEIF          shift and go to state 59

    if_else_fin                    shift and go to state 56
    if_else_cuerpo                 shift and go to state 57

state 34

    (52) for -> FOR . PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 60


state 35

    (90) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 61


state 36

    (80) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 62


state 37

    (57) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 63


state 38

    (58) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 64


state 39

    (66) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 65


state 40

    (53) for -> cola LLAVE_DER .
    (100) sinRetorno -> cola LLAVE_DER .

  ! reduce/reduce conflict for $end resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ECHO resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for STRING resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for NEW resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ARRAY resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for IF resolved using rule 53 (for -> cola LLAVE_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 53 (for -> cola LLAVE_DER .)
    $end            reduce using rule 53 (for -> cola LLAVE_DER .)
    ECHO            reduce using rule 53 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 53 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 53 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 53 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 53 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 53 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 53 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 53 (for -> cola LLAVE_DER .)
    ARRAY           reduce using rule 53 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 53 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 53 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 53 (for -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 53 (for -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 53 (for -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 53 (for -> cola LLAVE_DER .)
    IF              reduce using rule 53 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 53 (for -> cola LLAVE_DER .)

  ! $end            [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! ECHO            [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! PRINT           [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! PRINT_R         [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! ENTERO          [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! FLOTANTE        [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! STRING          [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! BOOLEANO        [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! NEW             [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! ARRAY           [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! SIGNO_DOLAR     [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! FOR             [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! WHILE           [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! FUNCTION        [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! MENOR_IGUAL     [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! MAYOR_IGUAL     [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! IF              [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]
  ! LLAVE_DER       [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]


state 41

    (11) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (98) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    ARRAY           shift and go to state 68
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    SIGNO_DOLAR     shift and go to state 32

    decl_variable                  shift and go to state 66
    valor                          shift and go to state 67
    datos                          shift and go to state 11
    pila                           shift and go to state 69
    cola                           shift and go to state 70
    arreglo                        shift and go to state 71

state 42

    (82) concatenacion -> decl_variable ASIG_CONCA . datos PUNTO_COMA
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 72

state 43

    (75) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (76) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (77) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (78) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (79) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 74
    POP             shift and go to state 75
    COUNT           shift and go to state 76
    CURRENT         shift and go to state 77

    operad_pila                    shift and go to state 73

state 44

    (23) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 78


state 45

    (20) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 20 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 20 (salidas_pos -> datos .)


state 46

    (21) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 21 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 21 (salidas_pos -> decl_variable .)


state 47

    (22) salidas_pos -> conca_string .

    PUNTO_COMA      reduce using rule 22 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 22 (salidas_pos -> conca_string .)


state 48

    (18) datos -> STRING .
    (83) conca_string -> STRING . PUNTO STRING

    PUNTO_COMA      reduce using rule 18 (datos -> STRING .)
    PAREN_DER       reduce using rule 18 (datos -> STRING .)
    PUNTO           shift and go to state 79


state 49

    (24) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (20) salidas_pos -> . datos
    (21) salidas_pos -> . decl_variable
    (22) salidas_pos -> . conca_string
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 48
    BOOLEANO        shift and go to state 29
    SIGNO_DOLAR     shift and go to state 32

    salidas_pos                    shift and go to state 80
    datos                          shift and go to state 45
    decl_variable                  shift and go to state 46
    conca_string                   shift and go to state 47

state 50

    (25) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 81


state 51

    (84) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32

    valor                          shift and go to state 82
    datos                          shift and go to state 11
    pila                           shift and go to state 69
    cola                           shift and go to state 70
    arreglo                        shift and go to state 71
    decl_variable                  shift and go to state 66

state 52

    (74) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 83


state 53

    (51) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 84


state 54

    (94) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (91) valores -> . datos repite_valores
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    valores                        shift and go to state 85
    datos                          shift and go to state 86

state 55

    (10) decl_variable -> SIGNO_DOLAR VARIABLE .

    IGUAL           reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_CONCA      reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_OBJ        reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PUNTO_COMA      reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 10 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 56

    (64) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 64 (if_else -> if_else_inicio if_else_fin .)


state 57

    (65) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (69) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 58

    if_else_fin                    shift and go to state 87

state 58

    (69) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 88


state 59

    (67) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 89


state 60

    (52) for -> FOR PAREN_IZQ . asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 32

    asignacion                     shift and go to state 90
    decl_variable                  shift and go to state 91

state 61

    (90) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 32

    decl_variable                  shift and go to state 92

state 62

    (80) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 93


state 63

    (57) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 94


state 64

    (58) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 95


state 65

    (66) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (70) op_logica -> . ENTERO operad_log ENTERO
    (71) op_logica -> . FLOTANTE operad_log FLOTANTE
    (72) op_logica -> . STRING operad_log STRING
    (73) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 97
    FLOTANTE        shift and go to state 98
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 100

    op_logica                      shift and go to state 96

state 66

    (98) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 101


state 67

    (11) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 102


state 68

    (98) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (94) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 103


state 69

    (13) valor -> pila .

    PUNTO_COMA      reduce using rule 13 (valor -> pila .)
    PAREN_DER       reduce using rule 13 (valor -> pila .)


state 70

    (14) valor -> cola .

    PUNTO_COMA      reduce using rule 14 (valor -> cola .)
    PAREN_DER       reduce using rule 14 (valor -> cola .)


state 71

    (15) valor -> arreglo .

    PUNTO_COMA      reduce using rule 15 (valor -> arreglo .)
    PAREN_DER       reduce using rule 15 (valor -> arreglo .)


state 72

    (82) concatenacion -> decl_variable ASIG_CONCA datos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 104


state 73

    (75) op_pila -> decl_variable ASIG_OBJ operad_pila .

    $end            reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    LLAVE_DER       reduce using rule 75 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 74

    (76) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 105


state 75

    (77) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 106


state 76

    (78) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 107


state 77

    (79) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 108


state 78

    (23) salida -> ECHO salidas_pos PUNTO_COMA .

    $end            reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 23 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 79

    (83) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 109


state 80

    (24) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 110


state 81

    (25) salida -> PRINT salidas_pos PUNTO_COMA .

    $end            reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 25 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 82

    (84) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 111


state 83

    (74) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 112


state 84

    (51) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 113


state 85

    (94) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 114


state 86

    (91) valores -> datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 116

    repite_valores                 shift and go to state 115

state 87

    (65) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 65 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 88

    (69) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (47) bloque -> . asignacion
    (48) bloque -> . salida
    (49) bloque -> . retorno
    (50) bloque -> . estructuras_control
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (81) retorno -> . RETURN salidas_pos PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    RETURN          shift and go to state 122
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    IF              shift and go to state 39
    NEW             shift and go to state 124

    bloque                         shift and go to state 117
    asignacion                     shift and go to state 118
    salida                         shift and go to state 119
    retorno                        shift and go to state 120
    estructuras_control            shift and go to state 121
    decl_variable                  shift and go to state 91
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    if_else_inicio                 shift and go to state 33
    cola                           shift and go to state 123

state 89

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (70) op_logica -> . ENTERO operad_log ENTERO
    (71) op_logica -> . FLOTANTE operad_log FLOTANTE
    (72) op_logica -> . STRING operad_log STRING
    (73) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 97
    FLOTANTE        shift and go to state 98
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 100

    op_logica                      shift and go to state 125

state 90

    (52) for -> FOR PAREN_IZQ asignacion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (56) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 127

    declaracionp                   shift and go to state 126

state 91

    (11) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 128


state 92

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (34) operad_log -> . IDENTICO
    (35) operad_log -> . DIFERENTE
    (36) operad_log -> . MAYOR_QUE
    (37) operad_log -> . MAYOR_IGUAL
    (38) operad_log -> . MENOR_QUE
    (39) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 130
    DIFERENTE       shift and go to state 131
    MAYOR_QUE       shift and go to state 132
    MAYOR_IGUAL     shift and go to state 133
    MENOR_QUE       shift and go to state 134
    MENOR_IGUAL     shift and go to state 135

    operad_log                     shift and go to state 129

state 93

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    TRES_PUNTOS     shift and go to state 136
    SIGNO_DOLAR     shift and go to state 137


state 94

    (57) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 57 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 95

    (58) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 58 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 96

    (66) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 138


state 97

    (70) op_logica -> ENTERO . operad_log ENTERO
    (34) operad_log -> . IDENTICO
    (35) operad_log -> . DIFERENTE
    (36) operad_log -> . MAYOR_QUE
    (37) operad_log -> . MAYOR_IGUAL
    (38) operad_log -> . MENOR_QUE
    (39) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 130
    DIFERENTE       shift and go to state 131
    MAYOR_QUE       shift and go to state 132
    MAYOR_IGUAL     shift and go to state 133
    MENOR_QUE       shift and go to state 134
    MENOR_IGUAL     shift and go to state 135

    operad_log                     shift and go to state 139

state 98

    (71) op_logica -> FLOTANTE . operad_log FLOTANTE
    (34) operad_log -> . IDENTICO
    (35) operad_log -> . DIFERENTE
    (36) operad_log -> . MAYOR_QUE
    (37) operad_log -> . MAYOR_IGUAL
    (38) operad_log -> . MENOR_QUE
    (39) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 130
    DIFERENTE       shift and go to state 131
    MAYOR_QUE       shift and go to state 132
    MAYOR_IGUAL     shift and go to state 133
    MENOR_QUE       shift and go to state 134
    MENOR_IGUAL     shift and go to state 135

    operad_log                     shift and go to state 140

state 99

    (72) op_logica -> STRING . operad_log STRING
    (34) operad_log -> . IDENTICO
    (35) operad_log -> . DIFERENTE
    (36) operad_log -> . MAYOR_QUE
    (37) operad_log -> . MAYOR_IGUAL
    (38) operad_log -> . MENOR_QUE
    (39) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 130
    DIFERENTE       shift and go to state 131
    MAYOR_QUE       shift and go to state 132
    MAYOR_IGUAL     shift and go to state 133
    MENOR_QUE       shift and go to state 134
    MENOR_IGUAL     shift and go to state 135

    operad_log                     shift and go to state 141

state 100

    (73) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 73 (op_logica -> BOOLEANO .)


state 101

    (98) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 142


state 102

    (11) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    $end            reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 11 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 103

    (98) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (94) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (95) valoresflecha -> . datos FLECHA datos repite_valores_f
    (91) valores -> . datos repite_valores
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    valoresflecha                  shift and go to state 143
    valores                        shift and go to state 85
    datos                          shift and go to state 144

state 104

    (82) concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .

    $end            reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ECHO            reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT           reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT_R         reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ENTERO          reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FLOTANTE        reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    STRING          reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    BOOLEANO        reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    NEW             reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ARRAY           reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FOR             reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    WHILE           reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FUNCTION        reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    IF              reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 82 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)


state 105

    (76) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 145

state 106

    (77) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 146


state 107

    (78) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 147


state 108

    (79) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 148


state 109

    (83) conca_string -> STRING PUNTO STRING .

    PUNTO_COMA      reduce using rule 83 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 83 (conca_string -> STRING PUNTO STRING .)


state 110

    (24) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 149


state 111

    (84) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 150


state 112

    (74) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 74 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 113

    (51) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 51 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 114

    (94) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    $end            reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    LLAVE_DER       reduce using rule 94 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 115

    (91) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 91 (valores -> datos repite_valores .)


state 116

    (92) repite_valores -> COMA . datos
    (93) repite_valores -> COMA . datos repite_valores
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 151

state 117

    (69) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 152


state 118

    (47) bloque -> asignacion .

    LLAVE_DER       reduce using rule 47 (bloque -> asignacion .)


state 119

    (48) bloque -> salida .

    LLAVE_DER       reduce using rule 48 (bloque -> salida .)


state 120

    (49) bloque -> retorno .

    LLAVE_DER       reduce using rule 49 (bloque -> retorno .)


state 121

    (50) bloque -> estructuras_control .

    LLAVE_DER       reduce using rule 50 (bloque -> estructuras_control .)


state 122

    (81) retorno -> RETURN . salidas_pos PUNTO_COMA
    (20) salidas_pos -> . datos
    (21) salidas_pos -> . decl_variable
    (22) salidas_pos -> . conca_string
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (83) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 48
    BOOLEANO        shift and go to state 29
    SIGNO_DOLAR     shift and go to state 32

    salidas_pos                    shift and go to state 153
    datos                          shift and go to state 45
    decl_variable                  shift and go to state 46
    conca_string                   shift and go to state 47

state 123

    (53) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 154


state 124

    (51) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 53


state 125

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 155


state 126

    (52) for -> FOR PAREN_IZQ asignacion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (61) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 157

    declaracion_s                  shift and go to state 156

state 127

    (56) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 158


state 128

    (11) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32

    decl_variable                  shift and go to state 66
    valor                          shift and go to state 67
    datos                          shift and go to state 11
    pila                           shift and go to state 69
    cola                           shift and go to state 70
    arreglo                        shift and go to state 71

state 129

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32

    decl_variable                  shift and go to state 66
    valor                          shift and go to state 159
    datos                          shift and go to state 11
    pila                           shift and go to state 69
    cola                           shift and go to state 70
    arreglo                        shift and go to state 71

state 130

    (34) operad_log -> IDENTICO .

    ENTERO          reduce using rule 34 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 34 (operad_log -> IDENTICO .)
    STRING          reduce using rule 34 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 34 (operad_log -> IDENTICO .)
    NEW             reduce using rule 34 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 34 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 34 (operad_log -> IDENTICO .)


state 131

    (35) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 35 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 35 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 35 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 35 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 35 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 35 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 35 (operad_log -> DIFERENTE .)


state 132

    (36) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 36 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 36 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 36 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 36 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 36 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 36 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 36 (operad_log -> MAYOR_QUE .)


state 133

    (37) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 37 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 37 (operad_log -> MAYOR_IGUAL .)


state 134

    (38) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 38 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 38 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 38 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 38 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 38 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 38 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 38 (operad_log -> MENOR_QUE .)


state 135

    (39) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 39 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 39 (operad_log -> MENOR_IGUAL .)


state 136

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 32

    decl_variable                  shift and go to state 160

state 137

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 161


state 138

    (66) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 162


state 139

    (70) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 163


state 140

    (71) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 164


state 141

    (72) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 165


state 142

    (98) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 166


state 143

    (98) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 167


state 144

    (95) valoresflecha -> datos . FLECHA datos repite_valores_f
    (91) valores -> datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    FLECHA          shift and go to state 168
    COMA            shift and go to state 116

    repite_valores                 shift and go to state 115

state 145

    (76) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 169


state 146

    (77) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 170


state 147

    (78) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 171


state 148

    (79) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 172


state 149

    (24) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 24 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 150

    (84) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    $end            reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 84 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 151

    (92) repite_valores -> COMA datos .
    (93) repite_valores -> COMA datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 92 (repite_valores -> COMA datos .)
    COMA            shift and go to state 116

    repite_valores                 shift and go to state 173

state 152

    (69) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 69 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 153

    (81) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 174


state 154

    (53) for -> cola LLAVE_DER .

    LLAVE_DER       reduce using rule 53 (for -> cola LLAVE_DER .)


state 155

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 175


state 156

    (52) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 176


state 157

    (61) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 177


state 158

    (56) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (59) valorc -> . menor
    (60) valorc -> . mayor
    (57) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (58) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 37
    MAYOR_IGUAL     shift and go to state 38

    valorc                         shift and go to state 178
    menor                          shift and go to state 24
    mayor                          shift and go to state 25

state 159

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 179


state 160

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 180


state 161

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 181


state 162

    (66) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (47) bloque -> . asignacion
    (48) bloque -> . salida
    (49) bloque -> . retorno
    (50) bloque -> . estructuras_control
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (81) retorno -> . RETURN salidas_pos PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    RETURN          shift and go to state 122
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    IF              shift and go to state 39
    NEW             shift and go to state 124

    bloque                         shift and go to state 182
    asignacion                     shift and go to state 118
    salida                         shift and go to state 119
    retorno                        shift and go to state 120
    estructuras_control            shift and go to state 121
    decl_variable                  shift and go to state 91
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    if_else_inicio                 shift and go to state 33
    cola                           shift and go to state 123

state 163

    (70) op_logica -> ENTERO operad_log ENTERO .

    PAREN_DER       reduce using rule 70 (op_logica -> ENTERO operad_log ENTERO .)


state 164

    (71) op_logica -> FLOTANTE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 71 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 165

    (72) op_logica -> STRING operad_log STRING .

    PAREN_DER       reduce using rule 72 (op_logica -> STRING operad_log STRING .)


state 166

    (98) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (95) valoresflecha -> . datos FLECHA datos repite_valores_f
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    valoresflecha                  shift and go to state 143
    datos                          shift and go to state 183

state 167

    (98) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 184


state 168

    (95) valoresflecha -> datos FLECHA . datos repite_valores_f
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 185

state 169

    (76) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 186


state 170

    (77) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 77 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 171

    (78) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 78 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 172

    (79) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 79 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 173

    (93) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 93 (repite_valores -> COMA datos repite_valores .)


state 174

    (81) retorno -> RETURN salidas_pos PUNTO_COMA .

    LLAVE_DER       reduce using rule 81 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 175

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (47) bloque -> . asignacion
    (48) bloque -> . salida
    (49) bloque -> . retorno
    (50) bloque -> . estructuras_control
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (81) retorno -> . RETURN salidas_pos PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    RETURN          shift and go to state 122
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    IF              shift and go to state 39
    NEW             shift and go to state 124

    bloque                         shift and go to state 187
    asignacion                     shift and go to state 118
    salida                         shift and go to state 119
    retorno                        shift and go to state 120
    estructuras_control            shift and go to state 121
    decl_variable                  shift and go to state 91
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    if_else_inicio                 shift and go to state 33
    cola                           shift and go to state 123

state 176

    (52) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 188


state 177

    (61) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (62) crecimiento -> . INCREMENTO
    (63) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 190
    DECREMENTO      shift and go to state 191

    crecimiento                    shift and go to state 189

state 178

    (56) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    SIGNO_DOLAR     reduce using rule 56 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 179

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 192


state 180

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 193


state 181

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 194


state 182

    (66) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 195


state 183

    (95) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 168


state 184

    (98) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 98 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 185

    (95) valoresflecha -> datos FLECHA datos . repite_valores_f
    (96) repite_valores_f -> . COMA datos FLECHA datos
    (97) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 197

    repite_valores_f               shift and go to state 196

state 186

    (76) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 76 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 187

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 198


state 188

    (52) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (54) sentenciasAnidadas -> . instrucciones
    (55) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (82) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (29) estructuras_datos -> . pila
    (30) estructuras_datos -> . cola
    (31) estructuras_datos -> . arreglo
    (32) funciones -> . funcion_variable
    (33) funciones -> . sinRetorno
    (75) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (59) valorc -> . menor
    (60) valorc -> . mayor
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (80) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (100) sinRetorno -> . cola LLAVE_DER
    (57) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (58) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    FUNCTION        shift and go to state 36
    MENOR_IGUAL     shift and go to state 37
    MAYOR_IGUAL     shift and go to state 38
    IF              shift and go to state 39

    asignacion                     shift and go to state 3
    sentenciasAnidadas             shift and go to state 199
    instrucciones                  shift and go to state 200
    valor                          shift and go to state 2
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    datos                          shift and go to state 11
    pila                           shift and go to state 12
    cola                           shift and go to state 13
    arreglo                        shift and go to state 14
    decl_variable                  shift and go to state 15
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    funcion_variable               shift and go to state 22
    sinRetorno                     shift and go to state 23
    menor                          shift and go to state 24
    mayor                          shift and go to state 25
    if_else_inicio                 shift and go to state 33

state 189

    (61) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    PAREN_DER       reduce using rule 61 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 190

    (62) crecimiento -> INCREMENTO .

    PAREN_DER       reduce using rule 62 (crecimiento -> INCREMENTO .)


state 191

    (63) crecimiento -> DECREMENTO .

    PAREN_DER       reduce using rule 63 (crecimiento -> DECREMENTO .)


state 192

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (88) contenido -> . bloque
    (89) contenido -> . sinRetorno
    (47) bloque -> . asignacion
    (48) bloque -> . salida
    (49) bloque -> . retorno
    (50) bloque -> . estructuras_control
    (99) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (100) sinRetorno -> . cola LLAVE_DER
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (81) retorno -> . RETURN salidas_pos PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    FUNCTION        shift and go to state 204
    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    RETURN          shift and go to state 122
    NEW             shift and go to state 124
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    IF              shift and go to state 39

    decl_variable                  shift and go to state 91
    contenido                      shift and go to state 201
    bloque                         shift and go to state 202
    sinRetorno                     shift and go to state 203
    asignacion                     shift and go to state 118
    salida                         shift and go to state 119
    retorno                        shift and go to state 120
    estructuras_control            shift and go to state 121
    cola                           shift and go to state 205
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    if_else_inicio                 shift and go to state 33

state 193

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (47) bloque -> . asignacion
    (48) bloque -> . salida
    (49) bloque -> . retorno
    (50) bloque -> . estructuras_control
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (81) retorno -> . RETURN salidas_pos PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    RETURN          shift and go to state 122
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    IF              shift and go to state 39
    NEW             shift and go to state 124

    decl_variable                  shift and go to state 91
    bloque                         shift and go to state 206
    asignacion                     shift and go to state 118
    salida                         shift and go to state 119
    retorno                        shift and go to state 120
    estructuras_control            shift and go to state 121
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    if_else_inicio                 shift and go to state 33
    cola                           shift and go to state 123

state 194

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (54) sentenciasAnidadas -> . instrucciones
    (55) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (82) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (29) estructuras_datos -> . pila
    (30) estructuras_datos -> . cola
    (31) estructuras_datos -> . arreglo
    (32) funciones -> . funcion_variable
    (33) funciones -> . sinRetorno
    (75) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (59) valorc -> . menor
    (60) valorc -> . mayor
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (80) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (100) sinRetorno -> . cola LLAVE_DER
    (57) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (58) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    FUNCTION        shift and go to state 36
    MENOR_IGUAL     shift and go to state 37
    MAYOR_IGUAL     shift and go to state 38
    IF              shift and go to state 39

    sentenciasAnidadas             shift and go to state 207
    instrucciones                  shift and go to state 200
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    datos                          shift and go to state 11
    pila                           shift and go to state 12
    cola                           shift and go to state 13
    arreglo                        shift and go to state 14
    decl_variable                  shift and go to state 15
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    funcion_variable               shift and go to state 22
    sinRetorno                     shift and go to state 23
    menor                          shift and go to state 24
    mayor                          shift and go to state 25
    if_else_inicio                 shift and go to state 33

state 195

    (66) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 66 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 66 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 196

    (95) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 95 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 197

    (96) repite_valores_f -> COMA . datos FLECHA datos
    (97) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 208

state 198

    (67) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (67) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (68) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 67 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 59

    if_else_cuerpo                 shift and go to state 209

state 199

    (52) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 52 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 200

    (54) sentenciasAnidadas -> instrucciones .
    (55) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (54) sentenciasAnidadas -> . instrucciones
    (55) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (12) valor -> . datos
    (13) valor -> . pila
    (14) valor -> . cola
    (15) valor -> . arreglo
    (11) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (82) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (23) salida -> . ECHO salidas_pos PUNTO_COMA
    (24) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (25) salida -> . PRINT salidas_pos PUNTO_COMA
    (84) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (26) estructuras_control -> . if_else
    (27) estructuras_control -> . for
    (28) estructuras_control -> . whileDeclaracion
    (29) estructuras_datos -> . pila
    (30) estructuras_datos -> . cola
    (31) estructuras_datos -> . arreglo
    (32) funciones -> . funcion_variable
    (33) funciones -> . sinRetorno
    (75) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (59) valorc -> . menor
    (60) valorc -> . mayor
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO
    (74) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (51) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (94) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (98) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (10) decl_variable -> . SIGNO_DOLAR VARIABLE
    (64) if_else -> . if_else_inicio if_else_fin
    (65) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (52) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) for -> . cola LLAVE_DER
    (90) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (80) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (99) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (100) sinRetorno -> . cola LLAVE_DER
    (57) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (58) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (66) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 54 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       reduce using rule 54 (sentenciasAnidadas -> instrucciones .)
    ECHO            shift and go to state 16
    PRINT           shift and go to state 17
    PRINT_R         shift and go to state 18
    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29
    NEW             shift and go to state 30
    ARRAY           shift and go to state 31
    SIGNO_DOLAR     shift and go to state 32
    FOR             shift and go to state 34
    WHILE           shift and go to state 35
    FUNCTION        shift and go to state 36
    MENOR_IGUAL     shift and go to state 37
    MAYOR_IGUAL     shift and go to state 38
    IF              shift and go to state 39

  ! ECHO            [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 54 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 200
    sentenciasAnidadas             shift and go to state 210
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    datos                          shift and go to state 11
    pila                           shift and go to state 12
    cola                           shift and go to state 13
    arreglo                        shift and go to state 14
    decl_variable                  shift and go to state 15
    if_else                        shift and go to state 19
    for                            shift and go to state 20
    whileDeclaracion               shift and go to state 21
    funcion_variable               shift and go to state 22
    sinRetorno                     shift and go to state 23
    menor                          shift and go to state 24
    mayor                          shift and go to state 25
    if_else_inicio                 shift and go to state 33

state 201

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 211


state 202

    (88) contenido -> bloque .

    LLAVE_DER       reduce using rule 88 (contenido -> bloque .)


state 203

    (89) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 89 (contenido -> sinRetorno .)


state 204

    (99) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 212


state 205

    (100) sinRetorno -> cola . LLAVE_DER
    (53) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 213


state 206

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 214


state 207

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 99 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 208

    (96) repite_valores_f -> COMA datos . FLECHA datos
    (97) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 215


state 209

    (68) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 68 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 210

    (55) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    ECHO            reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 55 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 211

    (90) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 90 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 212

    (99) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 216


state 213

    (100) sinRetorno -> cola LLAVE_DER .
    (53) for -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 53 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 53 (for -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 100 (sinRetorno -> cola LLAVE_DER .) ]


state 214

    (80) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 80 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 215

    (96) repite_valores_f -> COMA datos FLECHA . datos
    (97) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (16) datos -> . ENTERO
    (17) datos -> . FLOTANTE
    (18) datos -> . STRING
    (19) datos -> . BOOLEANO

    ENTERO          shift and go to state 26
    FLOTANTE        shift and go to state 27
    STRING          shift and go to state 28
    BOOLEANO        shift and go to state 29

    datos                          shift and go to state 217

state 216

    (99) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    SIGNO_DOLAR     shift and go to state 137


state 217

    (96) repite_valores_f -> COMA datos FLECHA datos .
    (97) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (92) repite_valores -> . COMA datos
    (93) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 96 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 116

    repite_valores                 shift and go to state 218

state 218

    (97) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 97 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 13 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 200 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING in state 200 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 200 resolved as shift
WARNING: shift/reduce conflict for NEW in state 200 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 200 resolved as shift
WARNING: shift/reduce conflict for FOR in state 200 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 200 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 200 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 200 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 12
WARNING: reduce/reduce conflict in state 13 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 13
WARNING: reduce/reduce conflict in state 14 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 14
WARNING: reduce/reduce conflict in state 40 resolved using rule (for -> cola LLAVE_DER)
WARNING: rejected rule (sinRetorno -> cola LLAVE_DER) in state 40
WARNING: reduce/reduce conflict in state 213 resolved using rule (for -> cola LLAVE_DER)
WARNING: rejected rule (sinRetorno -> cola LLAVE_DER) in state 213
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
WARNING: Rule (sinRetorno -> cola LLAVE_DER) is never reduced
