Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    NAMESPACE
    OR
    OR_SYMB
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> concatenacion
Rule 4     instrucciones -> salida
Rule 5     instrucciones -> estructuras_control
Rule 6     instrucciones -> estructuras_datos
Rule 7     instrucciones -> funciones
Rule 8     instrucciones -> op_pila
Rule 9     instrucciones -> valorc
Rule 10    instrucciones -> multiples
Rule 11    instrucciones -> LLAVE_DER
Rule 12    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 13    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 14    valor -> datos
Rule 15    valor -> pila
Rule 16    valor -> cola
Rule 17    valor -> arreglo
Rule 18    datos -> ENTERO
Rule 19    datos -> FLOTANTE
Rule 20    datos -> STRING
Rule 21    datos -> BOOLEANO
Rule 22    salidas_pos -> datos
Rule 23    salidas_pos -> decl_variable
Rule 24    salidas_pos -> conca_string
Rule 25    multiples -> salidas_pos
Rule 26    multiples -> salidas_pos multiples
Rule 27    salida -> ECHO salidas_pos PUNTO_COMA
Rule 28    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 29    salida -> PRINT salidas_pos PUNTO_COMA
Rule 30    estructuras_control -> if_else
Rule 31    estructuras_control -> for
Rule 32    estructuras_control -> whileDeclaracion
Rule 33    estructuras_datos -> pila
Rule 34    estructuras_datos -> cola
Rule 35    estructuras_datos -> arreglo
Rule 36    funciones -> funcion_variable
Rule 37    funciones -> sinRetorno
Rule 38    operad_log -> IDENTICO
Rule 39    operad_log -> DIFERENTE
Rule 40    operad_log -> MAYOR_QUE
Rule 41    operad_log -> MAYOR_IGUAL
Rule 42    operad_log -> MENOR_QUE
Rule 43    operad_log -> MENOR_IGUAL
Rule 44    operad_arit -> SUMA
Rule 45    operad_arit -> RESTA
Rule 46    operad_arit -> MULTIPL
Rule 47    operad_arit -> DIVISION
Rule 48    operad_arit -> DIVISION_ENT
Rule 49    operad_arit -> POTENCIA
Rule 50    operad_arit -> MODULO
Rule 51    bloque -> asignacion
Rule 52    bloque -> salida
Rule 53    bloque -> retorno
Rule 54    bloque -> estructuras_control
Rule 55    bloque -> asignacion bloque
Rule 56    bloque -> salida bloque
Rule 57    bloque -> retorno bloque
Rule 58    bloque -> estructuras_control bloque
Rule 59    bloque -> multiples
Rule 60    bloque -> multiples bloque
Rule 61    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 62    sinRetorno -> cola LLAVE_DER
Rule 63    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 64    for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 65    for -> cola LLAVE_DER
Rule 66    sentenciasAnidadas -> instrucciones
Rule 67    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 68    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 69    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 70    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 71    valorc -> menor
Rule 72    valorc -> mayor
Rule 73    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 74    crecimiento -> INCREMENTO
Rule 75    crecimiento -> DECREMENTO
Rule 76    if_else -> if_else_inicio if_else_fin
Rule 77    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 78    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 79    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 80    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 81    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 82    op_logica -> ENTERO operad_log ENTERO
Rule 83    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 84    op_logica -> STRING operad_log STRING
Rule 85    op_logica -> BOOLEANO
Rule 86    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 87    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 88    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 89    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 90    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 91    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 92    funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 93    retorno -> RETURN salidas_pos PUNTO_COMA
Rule 94    concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA
Rule 95    conca_string -> STRING PUNTO STRING
Rule 96    salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 97    salidas_pos_obj -> valor
Rule 98    salidas_pos_obj -> decl_variable
Rule 99    salidas_pos_obj -> conca_string
Rule 100   contenido -> bloque
Rule 101   contenido -> sinRetorno
Rule 102   whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 103   valores -> datos repite_valores
Rule 104   repite_valores -> COMA datos
Rule 105   repite_valores -> COMA datos repite_valores
Rule 106   arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 107   valoresflecha -> datos FLECHA datos repite_valores_f
Rule 108   repite_valores_f -> COMA datos FLECHA datos
Rule 109   repite_valores_f -> COMA datos FLECHA datos repite_valores
Rule 110   arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 106 110
AS                   : 
ASIG_CONCA           : 94
ASIG_OBJ             : 87
ASIG_REFER           : 
BOOLEANO             : 21 85
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 104 105 108 109
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 90
CURRENT              : 91
DECLARE              : 
DECREMENTO           : 75
DEFAULT              : 
DIFERENTE            : 39
DIVISION             : 47
DIVISION_ENT         : 48
DO                   : 
ECHO                 : 27
ELSE                 : 81
ELSEIF               : 79 80
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 18 69 70 82 82
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 107 108 109
FLOTANTE             : 19 83 83
FN                   : 
FOR                  : 64
FOREACH              : 
FUNCTION             : 61 92
GLOBAL               : 
IDENTICO             : 38
IF                   : 78
IGUAL                : 13 110
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 74
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 11 62 65 78 79 80 81 92 102
LLAVE_IZQ            : 61 64 78 79 80 81 92 102
MACHT                : 
MAYOR_IGUAL          : 41 70
MAYOR_QUE            : 40
MENOR_IGUAL          : 43 69
MENOR_QUE            : 42
MODULO               : 50
MULTIPL              : 46
NAMESPACE            : 
NEW                  : 63 86
OR                   : 
OR_SYMB              : 
PAREN_DER            : 28 61 63 64 78 79 80 86 88 89 90 91 92 96 102 106 110
PAREN_IZQ            : 28 61 63 64 78 79 80 86 88 89 90 91 92 96 102 106 110
POP                  : 89
POTENCIA             : 49
PRINT                : 28 29
PRINT_R              : 96
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 95
PUNTODOBLE           : 
PUNTO_COMA           : 13 27 28 29 69 70 88 89 90 91 93 94 96 110
PUSH                 : 88
QUEUE                : 63
REQUIERE             : 
RESTA                : 45
RETURN               : 93
SALTO_LINEA          : 
SIGNO_DOLAR          : 12 61 68 73
STACK                : 86
STATIC               : 
STRING               : 20 84 84 95 95
STRREV               : 
SUMA                 : 44
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 92
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 12 61 61 68 73 92
WHILE                : 102
error                : 

Nonterminals, with rules where they appear

arreglo              : 17 35
asignacion           : 2 51 55 64
bloque               : 55 56 57 58 60 78 79 80 81 92 100
cola                 : 16 34 62 65
conca_string         : 24 99
concatenacion        : 3
contenido            : 102
crecimiento          : 73
datos                : 14 22 88 94 103 104 105 107 107 108 108 109 109
decl_variable        : 13 23 87 92 94 98 102 110
declaracion_s        : 64
declaracionp         : 64
estructuras_control  : 5 54 58
estructuras_datos    : 6
for                  : 31
funcion_variable     : 36
funciones            : 7
if_else              : 30
if_else_cuerpo       : 77 80
if_else_fin          : 76 77
if_else_inicio       : 76 77
instrucciones        : 66 67 0
mayor                : 72
menor                : 71
multiples            : 10 26 59 60
op_logica            : 78 79 80
op_pila              : 8
operad_arit          : 
operad_log           : 82 83 84 102
operad_pila          : 87
pila                 : 15 33
repite_valores       : 103 105 109
repite_valores_f     : 107
retorno              : 53 57
salida               : 4 52 56
salidas_pos          : 25 26 27 28 29 93
salidas_pos_obj      : 
sentenciasAnidadas   : 61 64 67
sinRetorno           : 37 101
valor                : 1 13 96 97 102
valorc               : 9 68
valores              : 106
valoresflecha        : 110
whileDeclaracion     : 32

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (94) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (33) estructuras_datos -> . pila
    (34) estructuras_datos -> . cola
    (35) estructuras_datos -> . arreglo
    (36) funciones -> . funcion_variable
    (37) funciones -> . sinRetorno
    (87) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (71) valorc -> . menor
    (72) valorc -> . mayor
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (92) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) sinRetorno -> . cola LLAVE_DER
    (69) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (70) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    FUNCTION        shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAYOR_IGUAL     shift and go to state 41
    IF              shift and go to state 43

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    datos                          shift and go to state 13
    pila                           shift and go to state 14
    cola                           shift and go to state 15
    arreglo                        shift and go to state 16
    decl_variable                  shift and go to state 17
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    funcion_variable               shift and go to state 25
    sinRetorno                     shift and go to state 26
    menor                          shift and go to state 27
    mayor                          shift and go to state 28
    if_else_inicio                 shift and go to state 36
    conca_string                   shift and go to state 42

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .

    $end            reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    PRINT_R         reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    ARRAY           reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)
    RETURN          reduce using rule 1 (instrucciones -> valor .)


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)
    RETURN          reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> concatenacion .

    $end            reduce using rule 3 (instrucciones -> concatenacion .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> concatenacion .)
    ECHO            reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT           reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT_R         reduce using rule 3 (instrucciones -> concatenacion .)
    ENTERO          reduce using rule 3 (instrucciones -> concatenacion .)
    FLOTANTE        reduce using rule 3 (instrucciones -> concatenacion .)
    STRING          reduce using rule 3 (instrucciones -> concatenacion .)
    BOOLEANO        reduce using rule 3 (instrucciones -> concatenacion .)
    NEW             reduce using rule 3 (instrucciones -> concatenacion .)
    ARRAY           reduce using rule 3 (instrucciones -> concatenacion .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> concatenacion .)
    FOR             reduce using rule 3 (instrucciones -> concatenacion .)
    WHILE           reduce using rule 3 (instrucciones -> concatenacion .)
    FUNCTION        reduce using rule 3 (instrucciones -> concatenacion .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    IF              reduce using rule 3 (instrucciones -> concatenacion .)
    RETURN          reduce using rule 3 (instrucciones -> concatenacion .)


state 5

    (4) instrucciones -> salida .

    $end            reduce using rule 4 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> salida .)
    ECHO            reduce using rule 4 (instrucciones -> salida .)
    PRINT           reduce using rule 4 (instrucciones -> salida .)
    PRINT_R         reduce using rule 4 (instrucciones -> salida .)
    ENTERO          reduce using rule 4 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 4 (instrucciones -> salida .)
    STRING          reduce using rule 4 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 4 (instrucciones -> salida .)
    NEW             reduce using rule 4 (instrucciones -> salida .)
    ARRAY           reduce using rule 4 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> salida .)
    FOR             reduce using rule 4 (instrucciones -> salida .)
    WHILE           reduce using rule 4 (instrucciones -> salida .)
    FUNCTION        reduce using rule 4 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    IF              reduce using rule 4 (instrucciones -> salida .)
    RETURN          reduce using rule 4 (instrucciones -> salida .)


state 6

    (5) instrucciones -> estructuras_control .

    $end            reduce using rule 5 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 5 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 5 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    IF              reduce using rule 5 (instrucciones -> estructuras_control .)
    RETURN          reduce using rule 5 (instrucciones -> estructuras_control .)


state 7

    (6) instrucciones -> estructuras_datos .

    $end            reduce using rule 6 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 6 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 6 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 6 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 6 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 6 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 6 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 6 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 6 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 6 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 6 (instrucciones -> estructuras_datos .)
    RETURN          reduce using rule 6 (instrucciones -> estructuras_datos .)


state 8

    (7) instrucciones -> funciones .

    $end            reduce using rule 7 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> funciones .)
    ECHO            reduce using rule 7 (instrucciones -> funciones .)
    PRINT           reduce using rule 7 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 7 (instrucciones -> funciones .)
    ENTERO          reduce using rule 7 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 7 (instrucciones -> funciones .)
    STRING          reduce using rule 7 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 7 (instrucciones -> funciones .)
    NEW             reduce using rule 7 (instrucciones -> funciones .)
    ARRAY           reduce using rule 7 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> funciones .)
    FOR             reduce using rule 7 (instrucciones -> funciones .)
    WHILE           reduce using rule 7 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 7 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    IF              reduce using rule 7 (instrucciones -> funciones .)
    RETURN          reduce using rule 7 (instrucciones -> funciones .)


state 9

    (8) instrucciones -> op_pila .

    $end            reduce using rule 8 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_pila .)
    ECHO            reduce using rule 8 (instrucciones -> op_pila .)
    PRINT           reduce using rule 8 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 8 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 8 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_pila .)
    STRING          reduce using rule 8 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_pila .)
    NEW             reduce using rule 8 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 8 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_pila .)
    FOR             reduce using rule 8 (instrucciones -> op_pila .)
    WHILE           reduce using rule 8 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    IF              reduce using rule 8 (instrucciones -> op_pila .)
    RETURN          reduce using rule 8 (instrucciones -> op_pila .)


state 10

    (9) instrucciones -> valorc .

    $end            reduce using rule 9 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> valorc .)
    ECHO            reduce using rule 9 (instrucciones -> valorc .)
    PRINT           reduce using rule 9 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 9 (instrucciones -> valorc .)
    ENTERO          reduce using rule 9 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 9 (instrucciones -> valorc .)
    STRING          reduce using rule 9 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 9 (instrucciones -> valorc .)
    NEW             reduce using rule 9 (instrucciones -> valorc .)
    ARRAY           reduce using rule 9 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> valorc .)
    FOR             reduce using rule 9 (instrucciones -> valorc .)
    WHILE           reduce using rule 9 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 9 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    IF              reduce using rule 9 (instrucciones -> valorc .)
    RETURN          reduce using rule 9 (instrucciones -> valorc .)


state 11

    (10) instrucciones -> multiples .

    $end            reduce using rule 10 (instrucciones -> multiples .)
    LLAVE_DER       reduce using rule 10 (instrucciones -> multiples .)
    ECHO            reduce using rule 10 (instrucciones -> multiples .)
    PRINT           reduce using rule 10 (instrucciones -> multiples .)
    PRINT_R         reduce using rule 10 (instrucciones -> multiples .)
    ENTERO          reduce using rule 10 (instrucciones -> multiples .)
    FLOTANTE        reduce using rule 10 (instrucciones -> multiples .)
    STRING          reduce using rule 10 (instrucciones -> multiples .)
    BOOLEANO        reduce using rule 10 (instrucciones -> multiples .)
    NEW             reduce using rule 10 (instrucciones -> multiples .)
    ARRAY           reduce using rule 10 (instrucciones -> multiples .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> multiples .)
    FOR             reduce using rule 10 (instrucciones -> multiples .)
    WHILE           reduce using rule 10 (instrucciones -> multiples .)
    FUNCTION        reduce using rule 10 (instrucciones -> multiples .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    IF              reduce using rule 10 (instrucciones -> multiples .)
    RETURN          reduce using rule 10 (instrucciones -> multiples .)


state 12

    (11) instrucciones -> LLAVE_DER .

    $end            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    LLAVE_DER       reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT_R         reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ARRAY           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 11 (instrucciones -> LLAVE_DER .)
    RETURN          reduce using rule 11 (instrucciones -> LLAVE_DER .)


state 13

    (14) valor -> datos .
    (22) salidas_pos -> datos .

  ! reduce/reduce conflict for ENTERO resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for $end resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for ECHO resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for PRINT resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for NEW resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for ARRAY resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for IF resolved using rule 14 (valor -> datos .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (valor -> datos .)
    $end            reduce using rule 14 (valor -> datos .)
    LLAVE_DER       reduce using rule 14 (valor -> datos .)
    ECHO            reduce using rule 14 (valor -> datos .)
    PRINT           reduce using rule 14 (valor -> datos .)
    PRINT_R         reduce using rule 14 (valor -> datos .)
    ENTERO          reduce using rule 14 (valor -> datos .)
    FLOTANTE        reduce using rule 14 (valor -> datos .)
    STRING          reduce using rule 14 (valor -> datos .)
    BOOLEANO        reduce using rule 14 (valor -> datos .)
    NEW             reduce using rule 14 (valor -> datos .)
    ARRAY           reduce using rule 14 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 14 (valor -> datos .)
    FOR             reduce using rule 14 (valor -> datos .)
    WHILE           reduce using rule 14 (valor -> datos .)
    FUNCTION        reduce using rule 14 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 14 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 14 (valor -> datos .)
    IF              reduce using rule 14 (valor -> datos .)
    RETURN          reduce using rule 14 (valor -> datos .)

  ! ENTERO          [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! FLOTANTE        [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! STRING          [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! BOOLEANO        [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! SIGNO_DOLAR     [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! $end            [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! LLAVE_DER       [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! ECHO            [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! PRINT           [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! PRINT_R         [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! NEW             [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! ARRAY           [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! FOR             [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! WHILE           [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! FUNCTION        [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! MENOR_IGUAL     [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! MAYOR_IGUAL     [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! IF              [ reduce using rule 22 (salidas_pos -> datos .) ]
  ! RETURN          [ reduce using rule 22 (salidas_pos -> datos .) ]


state 14

    (15) valor -> pila .
    (33) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 15 (valor -> pila .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (valor -> pila .)
    $end            reduce using rule 15 (valor -> pila .)
    LLAVE_DER       reduce using rule 15 (valor -> pila .)
    ECHO            reduce using rule 15 (valor -> pila .)
    PRINT           reduce using rule 15 (valor -> pila .)
    PRINT_R         reduce using rule 15 (valor -> pila .)
    ENTERO          reduce using rule 15 (valor -> pila .)
    FLOTANTE        reduce using rule 15 (valor -> pila .)
    STRING          reduce using rule 15 (valor -> pila .)
    BOOLEANO        reduce using rule 15 (valor -> pila .)
    NEW             reduce using rule 15 (valor -> pila .)
    ARRAY           reduce using rule 15 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 15 (valor -> pila .)
    FOR             reduce using rule 15 (valor -> pila .)
    WHILE           reduce using rule 15 (valor -> pila .)
    FUNCTION        reduce using rule 15 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 15 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 15 (valor -> pila .)
    IF              reduce using rule 15 (valor -> pila .)
    RETURN          reduce using rule 15 (valor -> pila .)

  ! $end            [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 33 (estructuras_datos -> pila .) ]
  ! RETURN          [ reduce using rule 33 (estructuras_datos -> pila .) ]


state 15

    (16) valor -> cola .
    (34) estructuras_datos -> cola .
    (65) for -> cola . LLAVE_DER
    (62) sinRetorno -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 16 (valor -> cola .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 16 (valor -> cola .)
    ECHO            reduce using rule 16 (valor -> cola .)
    PRINT           reduce using rule 16 (valor -> cola .)
    PRINT_R         reduce using rule 16 (valor -> cola .)
    ENTERO          reduce using rule 16 (valor -> cola .)
    FLOTANTE        reduce using rule 16 (valor -> cola .)
    STRING          reduce using rule 16 (valor -> cola .)
    BOOLEANO        reduce using rule 16 (valor -> cola .)
    NEW             reduce using rule 16 (valor -> cola .)
    ARRAY           reduce using rule 16 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 16 (valor -> cola .)
    FOR             reduce using rule 16 (valor -> cola .)
    WHILE           reduce using rule 16 (valor -> cola .)
    FUNCTION        reduce using rule 16 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 16 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 16 (valor -> cola .)
    IF              reduce using rule 16 (valor -> cola .)
    RETURN          reduce using rule 16 (valor -> cola .)
    LLAVE_DER       shift and go to state 44

  ! LLAVE_DER       [ reduce using rule 16 (valor -> cola .) ]
  ! $end            [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 34 (estructuras_datos -> cola .) ]
  ! RETURN          [ reduce using rule 34 (estructuras_datos -> cola .) ]


state 16

    (17) valor -> arreglo .
    (35) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for $end resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 17 (valor -> arreglo .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (valor -> arreglo .)
    $end            reduce using rule 17 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 17 (valor -> arreglo .)
    ECHO            reduce using rule 17 (valor -> arreglo .)
    PRINT           reduce using rule 17 (valor -> arreglo .)
    PRINT_R         reduce using rule 17 (valor -> arreglo .)
    ENTERO          reduce using rule 17 (valor -> arreglo .)
    FLOTANTE        reduce using rule 17 (valor -> arreglo .)
    STRING          reduce using rule 17 (valor -> arreglo .)
    BOOLEANO        reduce using rule 17 (valor -> arreglo .)
    NEW             reduce using rule 17 (valor -> arreglo .)
    ARRAY           reduce using rule 17 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 17 (valor -> arreglo .)
    FOR             reduce using rule 17 (valor -> arreglo .)
    WHILE           reduce using rule 17 (valor -> arreglo .)
    FUNCTION        reduce using rule 17 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 17 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 17 (valor -> arreglo .)
    IF              reduce using rule 17 (valor -> arreglo .)
    RETURN          reduce using rule 17 (valor -> arreglo .)

  ! $end            [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! LLAVE_DER       [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 35 (estructuras_datos -> arreglo .) ]
  ! RETURN          [ reduce using rule 35 (estructuras_datos -> arreglo .) ]


state 17

    (13) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (94) concatenacion -> decl_variable . ASIG_CONCA datos PUNTO_COMA
    (87) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (110) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (23) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 45
    ASIG_CONCA      shift and go to state 46
    ASIG_OBJ        shift and go to state 47
    ENTERO          reduce using rule 23 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 23 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 23 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 23 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 23 (salidas_pos -> decl_variable .)
    $end            reduce using rule 23 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 23 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 23 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 23 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 23 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 23 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 23 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 23 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 23 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 23 (salidas_pos -> decl_variable .)
    IF              reduce using rule 23 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 23 (salidas_pos -> decl_variable .)


state 18

    (27) salida -> ECHO . salidas_pos PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (95) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    SIGNO_DOLAR     shift and go to state 35

    salidas_pos                    shift and go to state 48
    datos                          shift and go to state 49
    decl_variable                  shift and go to state 50
    conca_string                   shift and go to state 42

state 19

    (25) multiples -> salidas_pos .
    (26) multiples -> salidas_pos . multiples
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (95) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
    $end            reduce using rule 25 (multiples -> salidas_pos .)
    ECHO            reduce using rule 25 (multiples -> salidas_pos .)
    PRINT           reduce using rule 25 (multiples -> salidas_pos .)
    PRINT_R         reduce using rule 25 (multiples -> salidas_pos .)
    RETURN          reduce using rule 25 (multiples -> salidas_pos .)
    FOR             reduce using rule 25 (multiples -> salidas_pos .)
    WHILE           reduce using rule 25 (multiples -> salidas_pos .)
    IF              reduce using rule 25 (multiples -> salidas_pos .)
    NEW             reduce using rule 25 (multiples -> salidas_pos .)
    LLAVE_DER       reduce using rule 25 (multiples -> salidas_pos .)
    ARRAY           reduce using rule 25 (multiples -> salidas_pos .)
    FUNCTION        reduce using rule 25 (multiples -> salidas_pos .)
    MENOR_IGUAL     reduce using rule 25 (multiples -> salidas_pos .)
    MAYOR_IGUAL     reduce using rule 25 (multiples -> salidas_pos .)
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    SIGNO_DOLAR     shift and go to state 35

  ! SIGNO_DOLAR     [ reduce using rule 25 (multiples -> salidas_pos .) ]
  ! ENTERO          [ reduce using rule 25 (multiples -> salidas_pos .) ]
  ! FLOTANTE        [ reduce using rule 25 (multiples -> salidas_pos .) ]
  ! STRING          [ reduce using rule 25 (multiples -> salidas_pos .) ]
  ! BOOLEANO        [ reduce using rule 25 (multiples -> salidas_pos .) ]

    salidas_pos                    shift and go to state 19
    multiples                      shift and go to state 51
    datos                          shift and go to state 49
    decl_variable                  shift and go to state 50
    conca_string                   shift and go to state 42

state 20

    (28) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> PRINT . salidas_pos PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (95) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 52
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    SIGNO_DOLAR     shift and go to state 35

    salidas_pos                    shift and go to state 53
    datos                          shift and go to state 49
    decl_variable                  shift and go to state 50
    conca_string                   shift and go to state 42

state 21

    (96) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 54


state 22

    (30) estructuras_control -> if_else .

    $end            reduce using rule 30 (estructuras_control -> if_else .)
    ECHO            reduce using rule 30 (estructuras_control -> if_else .)
    PRINT           reduce using rule 30 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 30 (estructuras_control -> if_else .)
    RETURN          reduce using rule 30 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 30 (estructuras_control -> if_else .)
    FOR             reduce using rule 30 (estructuras_control -> if_else .)
    WHILE           reduce using rule 30 (estructuras_control -> if_else .)
    IF              reduce using rule 30 (estructuras_control -> if_else .)
    NEW             reduce using rule 30 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 30 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 30 (estructuras_control -> if_else .)
    STRING          reduce using rule 30 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 30 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 30 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 30 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 30 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 30 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 30 (estructuras_control -> if_else .)


state 23

    (31) estructuras_control -> for .

    $end            reduce using rule 31 (estructuras_control -> for .)
    ECHO            reduce using rule 31 (estructuras_control -> for .)
    PRINT           reduce using rule 31 (estructuras_control -> for .)
    PRINT_R         reduce using rule 31 (estructuras_control -> for .)
    RETURN          reduce using rule 31 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 31 (estructuras_control -> for .)
    FOR             reduce using rule 31 (estructuras_control -> for .)
    WHILE           reduce using rule 31 (estructuras_control -> for .)
    IF              reduce using rule 31 (estructuras_control -> for .)
    NEW             reduce using rule 31 (estructuras_control -> for .)
    ENTERO          reduce using rule 31 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 31 (estructuras_control -> for .)
    STRING          reduce using rule 31 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 31 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 31 (estructuras_control -> for .)
    ARRAY           reduce using rule 31 (estructuras_control -> for .)
    FUNCTION        reduce using rule 31 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 31 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 31 (estructuras_control -> for .)


state 24

    (32) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    RETURN          reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 32 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 32 (estructuras_control -> whileDeclaracion .)


state 25

    (36) funciones -> funcion_variable .

    $end            reduce using rule 36 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 36 (funciones -> funcion_variable .)
    ECHO            reduce using rule 36 (funciones -> funcion_variable .)
    PRINT           reduce using rule 36 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 36 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 36 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 36 (funciones -> funcion_variable .)
    STRING          reduce using rule 36 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 36 (funciones -> funcion_variable .)
    NEW             reduce using rule 36 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 36 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 36 (funciones -> funcion_variable .)
    FOR             reduce using rule 36 (funciones -> funcion_variable .)
    WHILE           reduce using rule 36 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 36 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 36 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 36 (funciones -> funcion_variable .)
    IF              reduce using rule 36 (funciones -> funcion_variable .)
    RETURN          reduce using rule 36 (funciones -> funcion_variable .)


state 26

    (37) funciones -> sinRetorno .

    $end            reduce using rule 37 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 37 (funciones -> sinRetorno .)
    ECHO            reduce using rule 37 (funciones -> sinRetorno .)
    PRINT           reduce using rule 37 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 37 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 37 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 37 (funciones -> sinRetorno .)
    STRING          reduce using rule 37 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 37 (funciones -> sinRetorno .)
    NEW             reduce using rule 37 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 37 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 37 (funciones -> sinRetorno .)
    FOR             reduce using rule 37 (funciones -> sinRetorno .)
    WHILE           reduce using rule 37 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 37 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 37 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 37 (funciones -> sinRetorno .)
    IF              reduce using rule 37 (funciones -> sinRetorno .)
    RETURN          reduce using rule 37 (funciones -> sinRetorno .)


state 27

    (71) valorc -> menor .

    $end            reduce using rule 71 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 71 (valorc -> menor .)
    LLAVE_DER       reduce using rule 71 (valorc -> menor .)
    ECHO            reduce using rule 71 (valorc -> menor .)
    PRINT           reduce using rule 71 (valorc -> menor .)
    PRINT_R         reduce using rule 71 (valorc -> menor .)
    ENTERO          reduce using rule 71 (valorc -> menor .)
    FLOTANTE        reduce using rule 71 (valorc -> menor .)
    STRING          reduce using rule 71 (valorc -> menor .)
    BOOLEANO        reduce using rule 71 (valorc -> menor .)
    NEW             reduce using rule 71 (valorc -> menor .)
    ARRAY           reduce using rule 71 (valorc -> menor .)
    FOR             reduce using rule 71 (valorc -> menor .)
    WHILE           reduce using rule 71 (valorc -> menor .)
    FUNCTION        reduce using rule 71 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 71 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 71 (valorc -> menor .)
    IF              reduce using rule 71 (valorc -> menor .)
    RETURN          reduce using rule 71 (valorc -> menor .)


state 28

    (72) valorc -> mayor .

    $end            reduce using rule 72 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 72 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 72 (valorc -> mayor .)
    ECHO            reduce using rule 72 (valorc -> mayor .)
    PRINT           reduce using rule 72 (valorc -> mayor .)
    PRINT_R         reduce using rule 72 (valorc -> mayor .)
    ENTERO          reduce using rule 72 (valorc -> mayor .)
    FLOTANTE        reduce using rule 72 (valorc -> mayor .)
    STRING          reduce using rule 72 (valorc -> mayor .)
    BOOLEANO        reduce using rule 72 (valorc -> mayor .)
    NEW             reduce using rule 72 (valorc -> mayor .)
    ARRAY           reduce using rule 72 (valorc -> mayor .)
    FOR             reduce using rule 72 (valorc -> mayor .)
    WHILE           reduce using rule 72 (valorc -> mayor .)
    FUNCTION        reduce using rule 72 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 72 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 72 (valorc -> mayor .)
    IF              reduce using rule 72 (valorc -> mayor .)
    RETURN          reduce using rule 72 (valorc -> mayor .)


state 29

    (18) datos -> ENTERO .

    $end            reduce using rule 18 (datos -> ENTERO .)
    ENTERO          reduce using rule 18 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 18 (datos -> ENTERO .)
    STRING          reduce using rule 18 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 18 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 18 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 18 (datos -> ENTERO .)
    ECHO            reduce using rule 18 (datos -> ENTERO .)
    PRINT           reduce using rule 18 (datos -> ENTERO .)
    PRINT_R         reduce using rule 18 (datos -> ENTERO .)
    RETURN          reduce using rule 18 (datos -> ENTERO .)
    FOR             reduce using rule 18 (datos -> ENTERO .)
    WHILE           reduce using rule 18 (datos -> ENTERO .)
    IF              reduce using rule 18 (datos -> ENTERO .)
    NEW             reduce using rule 18 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 18 (datos -> ENTERO .)
    ARRAY           reduce using rule 18 (datos -> ENTERO .)
    FUNCTION        reduce using rule 18 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 18 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 18 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 18 (datos -> ENTERO .)
    COMA            reduce using rule 18 (datos -> ENTERO .)
    FLECHA          reduce using rule 18 (datos -> ENTERO .)


state 30

    (19) datos -> FLOTANTE .

    $end            reduce using rule 19 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 19 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 19 (datos -> FLOTANTE .)
    STRING          reduce using rule 19 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 19 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 19 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 19 (datos -> FLOTANTE .)
    ECHO            reduce using rule 19 (datos -> FLOTANTE .)
    PRINT           reduce using rule 19 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 19 (datos -> FLOTANTE .)
    RETURN          reduce using rule 19 (datos -> FLOTANTE .)
    FOR             reduce using rule 19 (datos -> FLOTANTE .)
    WHILE           reduce using rule 19 (datos -> FLOTANTE .)
    IF              reduce using rule 19 (datos -> FLOTANTE .)
    NEW             reduce using rule 19 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 19 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 19 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 19 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 19 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 19 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 19 (datos -> FLOTANTE .)
    COMA            reduce using rule 19 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 19 (datos -> FLOTANTE .)


state 31

    (20) datos -> STRING .
    (95) conca_string -> STRING . PUNTO STRING

    $end            reduce using rule 20 (datos -> STRING .)
    ENTERO          reduce using rule 20 (datos -> STRING .)
    FLOTANTE        reduce using rule 20 (datos -> STRING .)
    STRING          reduce using rule 20 (datos -> STRING .)
    BOOLEANO        reduce using rule 20 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 20 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 20 (datos -> STRING .)
    ECHO            reduce using rule 20 (datos -> STRING .)
    PRINT           reduce using rule 20 (datos -> STRING .)
    PRINT_R         reduce using rule 20 (datos -> STRING .)
    RETURN          reduce using rule 20 (datos -> STRING .)
    FOR             reduce using rule 20 (datos -> STRING .)
    WHILE           reduce using rule 20 (datos -> STRING .)
    IF              reduce using rule 20 (datos -> STRING .)
    NEW             reduce using rule 20 (datos -> STRING .)
    LLAVE_DER       reduce using rule 20 (datos -> STRING .)
    ARRAY           reduce using rule 20 (datos -> STRING .)
    FUNCTION        reduce using rule 20 (datos -> STRING .)
    MENOR_IGUAL     reduce using rule 20 (datos -> STRING .)
    MAYOR_IGUAL     reduce using rule 20 (datos -> STRING .)
    PAREN_DER       reduce using rule 20 (datos -> STRING .)
    PUNTO           shift and go to state 55


state 32

    (21) datos -> BOOLEANO .

    $end            reduce using rule 21 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 21 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 21 (datos -> BOOLEANO .)
    STRING          reduce using rule 21 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 21 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 21 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 21 (datos -> BOOLEANO .)
    ECHO            reduce using rule 21 (datos -> BOOLEANO .)
    PRINT           reduce using rule 21 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 21 (datos -> BOOLEANO .)
    RETURN          reduce using rule 21 (datos -> BOOLEANO .)
    FOR             reduce using rule 21 (datos -> BOOLEANO .)
    WHILE           reduce using rule 21 (datos -> BOOLEANO .)
    IF              reduce using rule 21 (datos -> BOOLEANO .)
    NEW             reduce using rule 21 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 21 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 21 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 21 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 21 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 21 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 21 (datos -> BOOLEANO .)
    COMA            reduce using rule 21 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 21 (datos -> BOOLEANO .)


state 33

    (86) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (63) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 56
    QUEUE           shift and go to state 57


state 34

    (106) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 58


state 35

    (12) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 59


state 36

    (76) if_else -> if_else_inicio . if_else_fin
    (77) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (81) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (79) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 62
    ELSEIF          shift and go to state 63

    if_else_fin                    shift and go to state 60
    if_else_cuerpo                 shift and go to state 61

state 37

    (64) for -> FOR . PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 64


state 38

    (102) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 65


state 39

    (92) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 66


state 40

    (69) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 67


state 41

    (70) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 68


state 42

    (24) salidas_pos -> conca_string .

    ENTERO          reduce using rule 24 (salidas_pos -> conca_string .)
    FLOTANTE        reduce using rule 24 (salidas_pos -> conca_string .)
    STRING          reduce using rule 24 (salidas_pos -> conca_string .)
    BOOLEANO        reduce using rule 24 (salidas_pos -> conca_string .)
    SIGNO_DOLAR     reduce using rule 24 (salidas_pos -> conca_string .)
    $end            reduce using rule 24 (salidas_pos -> conca_string .)
    PUNTO_COMA      reduce using rule 24 (salidas_pos -> conca_string .)
    ECHO            reduce using rule 24 (salidas_pos -> conca_string .)
    PRINT           reduce using rule 24 (salidas_pos -> conca_string .)
    PRINT_R         reduce using rule 24 (salidas_pos -> conca_string .)
    RETURN          reduce using rule 24 (salidas_pos -> conca_string .)
    FOR             reduce using rule 24 (salidas_pos -> conca_string .)
    WHILE           reduce using rule 24 (salidas_pos -> conca_string .)
    IF              reduce using rule 24 (salidas_pos -> conca_string .)
    NEW             reduce using rule 24 (salidas_pos -> conca_string .)
    LLAVE_DER       reduce using rule 24 (salidas_pos -> conca_string .)
    ARRAY           reduce using rule 24 (salidas_pos -> conca_string .)
    FUNCTION        reduce using rule 24 (salidas_pos -> conca_string .)
    MENOR_IGUAL     reduce using rule 24 (salidas_pos -> conca_string .)
    MAYOR_IGUAL     reduce using rule 24 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 24 (salidas_pos -> conca_string .)


state 43

    (78) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 69


state 44

    (65) for -> cola LLAVE_DER .
    (62) sinRetorno -> cola LLAVE_DER .

  ! reduce/reduce conflict for $end resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ECHO resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for STRING resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for NEW resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ARRAY resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for IF resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
    $end            reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    PRINT           reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    ENTERO          reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    STRING          reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    NEW             reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    ARRAY           reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    FOR             reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    WHILE           reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    IF              reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    RETURN          reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)

  ! $end            [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! LLAVE_DER       [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! ECHO            [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! PRINT           [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! PRINT_R         [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! ENTERO          [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! FLOTANTE        [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! STRING          [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! BOOLEANO        [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! NEW             [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! ARRAY           [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! SIGNO_DOLAR     [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! FOR             [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! WHILE           [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! FUNCTION        [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! MENOR_IGUAL     [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! MAYOR_IGUAL     [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! IF              [ reduce using rule 65 (for -> cola LLAVE_DER .) ]
  ! RETURN          [ reduce using rule 65 (for -> cola LLAVE_DER .) ]


state 45

    (13) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (110) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    ARRAY           shift and go to state 72
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    SIGNO_DOLAR     shift and go to state 35

    decl_variable                  shift and go to state 70
    valor                          shift and go to state 71
    datos                          shift and go to state 73
    pila                           shift and go to state 74
    cola                           shift and go to state 75
    arreglo                        shift and go to state 76

state 46

    (94) concatenacion -> decl_variable ASIG_CONCA . datos PUNTO_COMA
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 78

state 47

    (87) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (88) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (89) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (90) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (91) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 80
    POP             shift and go to state 81
    COUNT           shift and go to state 82
    CURRENT         shift and go to state 83

    operad_pila                    shift and go to state 79

state 48

    (27) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 84


state 49

    (22) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 22 (salidas_pos -> datos .)
    ENTERO          reduce using rule 22 (salidas_pos -> datos .)
    FLOTANTE        reduce using rule 22 (salidas_pos -> datos .)
    STRING          reduce using rule 22 (salidas_pos -> datos .)
    BOOLEANO        reduce using rule 22 (salidas_pos -> datos .)
    SIGNO_DOLAR     reduce using rule 22 (salidas_pos -> datos .)
    $end            reduce using rule 22 (salidas_pos -> datos .)
    ECHO            reduce using rule 22 (salidas_pos -> datos .)
    PRINT           reduce using rule 22 (salidas_pos -> datos .)
    PRINT_R         reduce using rule 22 (salidas_pos -> datos .)
    RETURN          reduce using rule 22 (salidas_pos -> datos .)
    FOR             reduce using rule 22 (salidas_pos -> datos .)
    WHILE           reduce using rule 22 (salidas_pos -> datos .)
    IF              reduce using rule 22 (salidas_pos -> datos .)
    NEW             reduce using rule 22 (salidas_pos -> datos .)
    LLAVE_DER       reduce using rule 22 (salidas_pos -> datos .)
    ARRAY           reduce using rule 22 (salidas_pos -> datos .)
    FUNCTION        reduce using rule 22 (salidas_pos -> datos .)
    MENOR_IGUAL     reduce using rule 22 (salidas_pos -> datos .)
    MAYOR_IGUAL     reduce using rule 22 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 22 (salidas_pos -> datos .)


state 50

    (23) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 23 (salidas_pos -> decl_variable .)
    ENTERO          reduce using rule 23 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 23 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 23 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 23 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 23 (salidas_pos -> decl_variable .)
    $end            reduce using rule 23 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 23 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 23 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 23 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 23 (salidas_pos -> decl_variable .)
    IF              reduce using rule 23 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 23 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 23 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 23 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 23 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 23 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 23 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 23 (salidas_pos -> decl_variable .)


state 51

    (26) multiples -> salidas_pos multiples .

    $end            reduce using rule 26 (multiples -> salidas_pos multiples .)
    ECHO            reduce using rule 26 (multiples -> salidas_pos multiples .)
    PRINT           reduce using rule 26 (multiples -> salidas_pos multiples .)
    PRINT_R         reduce using rule 26 (multiples -> salidas_pos multiples .)
    RETURN          reduce using rule 26 (multiples -> salidas_pos multiples .)
    SIGNO_DOLAR     reduce using rule 26 (multiples -> salidas_pos multiples .)
    FOR             reduce using rule 26 (multiples -> salidas_pos multiples .)
    WHILE           reduce using rule 26 (multiples -> salidas_pos multiples .)
    IF              reduce using rule 26 (multiples -> salidas_pos multiples .)
    NEW             reduce using rule 26 (multiples -> salidas_pos multiples .)
    ENTERO          reduce using rule 26 (multiples -> salidas_pos multiples .)
    FLOTANTE        reduce using rule 26 (multiples -> salidas_pos multiples .)
    STRING          reduce using rule 26 (multiples -> salidas_pos multiples .)
    BOOLEANO        reduce using rule 26 (multiples -> salidas_pos multiples .)
    LLAVE_DER       reduce using rule 26 (multiples -> salidas_pos multiples .)
    ARRAY           reduce using rule 26 (multiples -> salidas_pos multiples .)
    FUNCTION        reduce using rule 26 (multiples -> salidas_pos multiples .)
    MENOR_IGUAL     reduce using rule 26 (multiples -> salidas_pos multiples .)
    MAYOR_IGUAL     reduce using rule 26 (multiples -> salidas_pos multiples .)


state 52

    (28) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (95) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    SIGNO_DOLAR     shift and go to state 35

    salidas_pos                    shift and go to state 85
    datos                          shift and go to state 49
    decl_variable                  shift and go to state 50
    conca_string                   shift and go to state 42

state 53

    (29) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 86


state 54

    (96) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35

    valor                          shift and go to state 87
    datos                          shift and go to state 73
    pila                           shift and go to state 74
    cola                           shift and go to state 75
    arreglo                        shift and go to state 76
    decl_variable                  shift and go to state 70

state 55

    (95) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 88


state 56

    (86) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 89


state 57

    (63) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 90


state 58

    (106) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (103) valores -> . datos repite_valores
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    valores                        shift and go to state 91
    datos                          shift and go to state 92

state 59

    (12) decl_variable -> SIGNO_DOLAR VARIABLE .

    IGUAL           reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_CONCA      reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_OBJ        reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PUNTO_COMA      reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 12 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 60

    (76) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    RETURN          reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 76 (if_else -> if_else_inicio if_else_fin .)


state 61

    (77) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (81) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 62

    if_else_fin                    shift and go to state 93

state 62

    (81) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 94


state 63

    (79) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 95


state 64

    (64) for -> FOR PAREN_IZQ . asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 35

    asignacion                     shift and go to state 96
    decl_variable                  shift and go to state 97

state 65

    (102) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 35

    decl_variable                  shift and go to state 98

state 66

    (92) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 99


state 67

    (69) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 100


state 68

    (70) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 101


state 69

    (78) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) op_logica -> . ENTERO operad_log ENTERO
    (83) op_logica -> . FLOTANTE operad_log FLOTANTE
    (84) op_logica -> . STRING operad_log STRING
    (85) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 103
    FLOTANTE        shift and go to state 104
    STRING          shift and go to state 105
    BOOLEANO        shift and go to state 106

    op_logica                      shift and go to state 102

state 70

    (110) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 107


state 71

    (13) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 108


state 72

    (110) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (106) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 109


state 73

    (14) valor -> datos .

    PUNTO_COMA      reduce using rule 14 (valor -> datos .)
    PAREN_DER       reduce using rule 14 (valor -> datos .)


state 74

    (15) valor -> pila .

    PUNTO_COMA      reduce using rule 15 (valor -> pila .)
    PAREN_DER       reduce using rule 15 (valor -> pila .)


state 75

    (16) valor -> cola .

    PUNTO_COMA      reduce using rule 16 (valor -> cola .)
    PAREN_DER       reduce using rule 16 (valor -> cola .)


state 76

    (17) valor -> arreglo .

    PUNTO_COMA      reduce using rule 17 (valor -> arreglo .)
    PAREN_DER       reduce using rule 17 (valor -> arreglo .)


state 77

    (20) datos -> STRING .

    PUNTO_COMA      reduce using rule 20 (datos -> STRING .)
    PAREN_DER       reduce using rule 20 (datos -> STRING .)
    COMA            reduce using rule 20 (datos -> STRING .)
    FLECHA          reduce using rule 20 (datos -> STRING .)


state 78

    (94) concatenacion -> decl_variable ASIG_CONCA datos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 110


state 79

    (87) op_pila -> decl_variable ASIG_OBJ operad_pila .

    $end            reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    LLAVE_DER       reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    RETURN          reduce using rule 87 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 80

    (88) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 111


state 81

    (89) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 112


state 82

    (90) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 113


state 83

    (91) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 114


state 84

    (27) salida -> ECHO salidas_pos PUNTO_COMA .

    $end            reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 27 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 85

    (28) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 115


state 86

    (29) salida -> PRINT salidas_pos PUNTO_COMA .

    $end            reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 29 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 87

    (96) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 116


state 88

    (95) conca_string -> STRING PUNTO STRING .

    ENTERO          reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    FLOTANTE        reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    STRING          reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    BOOLEANO        reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    SIGNO_DOLAR     reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    $end            reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    PUNTO_COMA      reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    ECHO            reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    PRINT           reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    PRINT_R         reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    RETURN          reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    FOR             reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    WHILE           reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    IF              reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    NEW             reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    LLAVE_DER       reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    ARRAY           reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    FUNCTION        reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    MENOR_IGUAL     reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    MAYOR_IGUAL     reduce using rule 95 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 95 (conca_string -> STRING PUNTO STRING .)


state 89

    (86) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 117


state 90

    (63) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 118


state 91

    (106) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 119


state 92

    (103) valores -> datos . repite_valores
    (104) repite_valores -> . COMA datos
    (105) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 121

    repite_valores                 shift and go to state 120

state 93

    (77) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    RETURN          reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 77 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 94

    (81) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    bloque                         shift and go to state 122
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 95

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (82) op_logica -> . ENTERO operad_log ENTERO
    (83) op_logica -> . FLOTANTE operad_log FLOTANTE
    (84) op_logica -> . STRING operad_log STRING
    (85) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 103
    FLOTANTE        shift and go to state 104
    STRING          shift and go to state 105
    BOOLEANO        shift and go to state 106

    op_logica                      shift and go to state 132

state 96

    (64) for -> FOR PAREN_IZQ asignacion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 134

    declaracionp                   shift and go to state 133

state 97

    (13) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 135


state 98

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (38) operad_log -> . IDENTICO
    (39) operad_log -> . DIFERENTE
    (40) operad_log -> . MAYOR_QUE
    (41) operad_log -> . MAYOR_IGUAL
    (42) operad_log -> . MENOR_QUE
    (43) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 137
    DIFERENTE       shift and go to state 138
    MAYOR_QUE       shift and go to state 139
    MAYOR_IGUAL     shift and go to state 140
    MENOR_QUE       shift and go to state 141
    MENOR_IGUAL     shift and go to state 142

    operad_log                     shift and go to state 136

state 99

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    TRES_PUNTOS     shift and go to state 143
    SIGNO_DOLAR     shift and go to state 144


state 100

    (69) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 69 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 101

    (70) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 70 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 102

    (78) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 145


state 103

    (82) op_logica -> ENTERO . operad_log ENTERO
    (38) operad_log -> . IDENTICO
    (39) operad_log -> . DIFERENTE
    (40) operad_log -> . MAYOR_QUE
    (41) operad_log -> . MAYOR_IGUAL
    (42) operad_log -> . MENOR_QUE
    (43) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 137
    DIFERENTE       shift and go to state 138
    MAYOR_QUE       shift and go to state 139
    MAYOR_IGUAL     shift and go to state 140
    MENOR_QUE       shift and go to state 141
    MENOR_IGUAL     shift and go to state 142

    operad_log                     shift and go to state 146

state 104

    (83) op_logica -> FLOTANTE . operad_log FLOTANTE
    (38) operad_log -> . IDENTICO
    (39) operad_log -> . DIFERENTE
    (40) operad_log -> . MAYOR_QUE
    (41) operad_log -> . MAYOR_IGUAL
    (42) operad_log -> . MENOR_QUE
    (43) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 137
    DIFERENTE       shift and go to state 138
    MAYOR_QUE       shift and go to state 139
    MAYOR_IGUAL     shift and go to state 140
    MENOR_QUE       shift and go to state 141
    MENOR_IGUAL     shift and go to state 142

    operad_log                     shift and go to state 147

state 105

    (84) op_logica -> STRING . operad_log STRING
    (38) operad_log -> . IDENTICO
    (39) operad_log -> . DIFERENTE
    (40) operad_log -> . MAYOR_QUE
    (41) operad_log -> . MAYOR_IGUAL
    (42) operad_log -> . MENOR_QUE
    (43) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 137
    DIFERENTE       shift and go to state 138
    MAYOR_QUE       shift and go to state 139
    MAYOR_IGUAL     shift and go to state 140
    MENOR_QUE       shift and go to state 141
    MENOR_IGUAL     shift and go to state 142

    operad_log                     shift and go to state 148

state 106

    (85) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 85 (op_logica -> BOOLEANO .)


state 107

    (110) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 149


state 108

    (13) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    $end            reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    RETURN          reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 13 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 109

    (110) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (106) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (107) valoresflecha -> . datos FLECHA datos repite_valores_f
    (103) valores -> . datos repite_valores
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    valoresflecha                  shift and go to state 150
    valores                        shift and go to state 91
    datos                          shift and go to state 151

state 110

    (94) concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .

    $end            reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ECHO            reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT           reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT_R         reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ENTERO          reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FLOTANTE        reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    STRING          reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    BOOLEANO        reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    NEW             reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ARRAY           reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FOR             reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    WHILE           reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FUNCTION        reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    IF              reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    RETURN          reduce using rule 94 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)


state 111

    (88) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 152

state 112

    (89) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 153


state 113

    (90) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 154


state 114

    (91) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 155


state 115

    (28) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 156


state 116

    (96) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 157


state 117

    (86) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 86 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 118

    (63) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 63 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 119

    (106) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    $end            reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    LLAVE_DER       reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    RETURN          reduce using rule 106 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 120

    (103) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 103 (valores -> datos repite_valores .)


state 121

    (104) repite_valores -> COMA . datos
    (105) repite_valores -> COMA . datos repite_valores
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 158

state 122

    (81) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 159


state 123

    (51) bloque -> asignacion .
    (55) bloque -> asignacion . bloque
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 51 (bloque -> asignacion .)
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    asignacion                     shift and go to state 123
    bloque                         shift and go to state 160
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 124

    (52) bloque -> salida .
    (56) bloque -> salida . bloque
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 52 (bloque -> salida .)
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    salida                         shift and go to state 124
    bloque                         shift and go to state 161
    asignacion                     shift and go to state 123
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 125

    (53) bloque -> retorno .
    (57) bloque -> retorno . bloque
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 53 (bloque -> retorno .)
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    retorno                        shift and go to state 125
    bloque                         shift and go to state 162
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 126

    (54) bloque -> estructuras_control .
    (58) bloque -> estructuras_control . bloque
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 54 (bloque -> estructuras_control .)
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    estructuras_control            shift and go to state 126
    bloque                         shift and go to state 163
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 127

    (59) bloque -> multiples .
    (60) bloque -> multiples . bloque
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 59 (bloque -> multiples .)
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    multiples                      shift and go to state 127
    bloque                         shift and go to state 164
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 128

    (13) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (23) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 135
    ENTERO          reduce using rule 23 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 23 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 23 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 23 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 23 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 23 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 23 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 23 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 23 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 23 (salidas_pos -> decl_variable .)
    IF              reduce using rule 23 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 23 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 23 (salidas_pos -> decl_variable .)


state 129

    (93) retorno -> RETURN . salidas_pos PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (95) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    SIGNO_DOLAR     shift and go to state 35

    salidas_pos                    shift and go to state 165
    datos                          shift and go to state 49
    decl_variable                  shift and go to state 50
    conca_string                   shift and go to state 42

state 130

    (65) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 166


state 131

    (63) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 57


state 132

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 167


state 133

    (64) for -> FOR PAREN_IZQ asignacion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (73) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 169

    declaracion_s                  shift and go to state 168

state 134

    (68) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 170


state 135

    (13) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35

    decl_variable                  shift and go to state 70
    valor                          shift and go to state 71
    datos                          shift and go to state 73
    pila                           shift and go to state 74
    cola                           shift and go to state 75
    arreglo                        shift and go to state 76

state 136

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35

    decl_variable                  shift and go to state 70
    valor                          shift and go to state 171
    datos                          shift and go to state 73
    pila                           shift and go to state 74
    cola                           shift and go to state 75
    arreglo                        shift and go to state 76

state 137

    (38) operad_log -> IDENTICO .

    ENTERO          reduce using rule 38 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 38 (operad_log -> IDENTICO .)
    STRING          reduce using rule 38 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 38 (operad_log -> IDENTICO .)
    NEW             reduce using rule 38 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 38 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 38 (operad_log -> IDENTICO .)


state 138

    (39) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 39 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 39 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 39 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 39 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 39 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 39 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 39 (operad_log -> DIFERENTE .)


state 139

    (40) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 40 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 40 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 40 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 40 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 40 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 40 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 40 (operad_log -> MAYOR_QUE .)


state 140

    (41) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 41 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 41 (operad_log -> MAYOR_IGUAL .)


state 141

    (42) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 42 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 42 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 42 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 42 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 42 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 42 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 42 (operad_log -> MENOR_QUE .)


state 142

    (43) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 43 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 43 (operad_log -> MENOR_IGUAL .)


state 143

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 35

    decl_variable                  shift and go to state 172

state 144

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 173


state 145

    (78) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 174


state 146

    (82) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 175


state 147

    (83) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 176


state 148

    (84) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 177


state 149

    (110) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 178


state 150

    (110) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 179


state 151

    (107) valoresflecha -> datos . FLECHA datos repite_valores_f
    (103) valores -> datos . repite_valores
    (104) repite_valores -> . COMA datos
    (105) repite_valores -> . COMA datos repite_valores

    FLECHA          shift and go to state 180
    COMA            shift and go to state 121

    repite_valores                 shift and go to state 120

state 152

    (88) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 181


state 153

    (89) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 182


state 154

    (90) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 183


state 155

    (91) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 184


state 156

    (28) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 28 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 157

    (96) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    $end            reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 96 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 158

    (104) repite_valores -> COMA datos .
    (105) repite_valores -> COMA datos . repite_valores
    (104) repite_valores -> . COMA datos
    (105) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 104 (repite_valores -> COMA datos .)
    COMA            shift and go to state 121

    repite_valores                 shift and go to state 185

state 159

    (81) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 81 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 160

    (55) bloque -> asignacion bloque .

    LLAVE_DER       reduce using rule 55 (bloque -> asignacion bloque .)


state 161

    (56) bloque -> salida bloque .

    LLAVE_DER       reduce using rule 56 (bloque -> salida bloque .)


state 162

    (57) bloque -> retorno bloque .

    LLAVE_DER       reduce using rule 57 (bloque -> retorno bloque .)


state 163

    (58) bloque -> estructuras_control bloque .

    LLAVE_DER       reduce using rule 58 (bloque -> estructuras_control bloque .)


state 164

    (60) bloque -> multiples bloque .

    LLAVE_DER       reduce using rule 60 (bloque -> multiples bloque .)


state 165

    (93) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 186


state 166

    (65) for -> cola LLAVE_DER .

    ECHO            reduce using rule 65 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 65 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 65 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 65 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 65 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 65 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 65 (for -> cola LLAVE_DER .)
    IF              reduce using rule 65 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 65 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 65 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 65 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 65 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 65 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 65 (for -> cola LLAVE_DER .)


state 167

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 187


state 168

    (64) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 188


state 169

    (73) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 189


state 170

    (68) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (71) valorc -> . menor
    (72) valorc -> . mayor
    (69) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (70) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 40
    MAYOR_IGUAL     shift and go to state 41

    valorc                         shift and go to state 190
    menor                          shift and go to state 27
    mayor                          shift and go to state 28

state 171

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 191


state 172

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 192


state 173

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 193


state 174

    (78) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    bloque                         shift and go to state 194
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 175

    (82) op_logica -> ENTERO operad_log ENTERO .

    PAREN_DER       reduce using rule 82 (op_logica -> ENTERO operad_log ENTERO .)


state 176

    (83) op_logica -> FLOTANTE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 83 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 177

    (84) op_logica -> STRING operad_log STRING .

    PAREN_DER       reduce using rule 84 (op_logica -> STRING operad_log STRING .)


state 178

    (110) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (107) valoresflecha -> . datos FLECHA datos repite_valores_f
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    valoresflecha                  shift and go to state 150
    datos                          shift and go to state 195

state 179

    (110) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 196


state 180

    (107) valoresflecha -> datos FLECHA . datos repite_valores_f
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 197

state 181

    (88) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 198


state 182

    (89) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 89 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 183

    (90) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 90 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 184

    (91) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 91 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 185

    (105) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 105 (repite_valores -> COMA datos repite_valores .)


state 186

    (93) retorno -> RETURN salidas_pos PUNTO_COMA .

    ECHO            reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    IF              reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 93 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 187

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    bloque                         shift and go to state 199
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    decl_variable                  shift and go to state 128
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 188

    (64) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 200


state 189

    (73) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (74) crecimiento -> . INCREMENTO
    (75) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 202
    DECREMENTO      shift and go to state 203

    crecimiento                    shift and go to state 201

state 190

    (68) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    SIGNO_DOLAR     reduce using rule 68 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 191

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 204


state 192

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 205


state 193

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 206


state 194

    (78) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 207


state 195

    (107) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 180


state 196

    (110) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 110 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 197

    (107) valoresflecha -> datos FLECHA datos . repite_valores_f
    (108) repite_valores_f -> . COMA datos FLECHA datos
    (109) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 209

    repite_valores_f               shift and go to state 208

state 198

    (88) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 88 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 199

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 210


state 200

    (64) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (66) sentenciasAnidadas -> . instrucciones
    (67) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (94) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (33) estructuras_datos -> . pila
    (34) estructuras_datos -> . cola
    (35) estructuras_datos -> . arreglo
    (36) funciones -> . funcion_variable
    (37) funciones -> . sinRetorno
    (87) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (71) valorc -> . menor
    (72) valorc -> . mayor
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (92) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) sinRetorno -> . cola LLAVE_DER
    (69) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (70) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    FUNCTION        shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAYOR_IGUAL     shift and go to state 41
    IF              shift and go to state 43

    asignacion                     shift and go to state 3
    sentenciasAnidadas             shift and go to state 211
    instrucciones                  shift and go to state 212
    valor                          shift and go to state 2
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    datos                          shift and go to state 13
    pila                           shift and go to state 14
    cola                           shift and go to state 15
    arreglo                        shift and go to state 16
    decl_variable                  shift and go to state 17
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    funcion_variable               shift and go to state 25
    sinRetorno                     shift and go to state 26
    menor                          shift and go to state 27
    mayor                          shift and go to state 28
    if_else_inicio                 shift and go to state 36
    conca_string                   shift and go to state 42

state 201

    (73) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    PAREN_DER       reduce using rule 73 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 202

    (74) crecimiento -> INCREMENTO .

    PAREN_DER       reduce using rule 74 (crecimiento -> INCREMENTO .)


state 203

    (75) crecimiento -> DECREMENTO .

    PAREN_DER       reduce using rule 75 (crecimiento -> DECREMENTO .)


state 204

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (100) contenido -> . bloque
    (101) contenido -> . sinRetorno
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (61) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) sinRetorno -> . cola LLAVE_DER
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    FUNCTION        shift and go to state 216
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    NEW             shift and go to state 131
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    decl_variable                  shift and go to state 128
    contenido                      shift and go to state 213
    bloque                         shift and go to state 214
    sinRetorno                     shift and go to state 215
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    cola                           shift and go to state 217
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 205

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (51) bloque -> . asignacion
    (52) bloque -> . salida
    (53) bloque -> . retorno
    (54) bloque -> . estructuras_control
    (55) bloque -> . asignacion bloque
    (56) bloque -> . salida bloque
    (57) bloque -> . retorno bloque
    (58) bloque -> . estructuras_control bloque
    (59) bloque -> . multiples
    (60) bloque -> . multiples bloque
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (93) retorno -> . RETURN salidas_pos PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (95) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    RETURN          shift and go to state 129
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    IF              shift and go to state 43
    NEW             shift and go to state 131
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32

    decl_variable                  shift and go to state 128
    bloque                         shift and go to state 218
    asignacion                     shift and go to state 123
    salida                         shift and go to state 124
    retorno                        shift and go to state 125
    estructuras_control            shift and go to state 126
    multiples                      shift and go to state 127
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    if_else_inicio                 shift and go to state 36
    cola                           shift and go to state 130
    datos                          shift and go to state 49
    conca_string                   shift and go to state 42

state 206

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (66) sentenciasAnidadas -> . instrucciones
    (67) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (94) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (33) estructuras_datos -> . pila
    (34) estructuras_datos -> . cola
    (35) estructuras_datos -> . arreglo
    (36) funciones -> . funcion_variable
    (37) funciones -> . sinRetorno
    (87) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (71) valorc -> . menor
    (72) valorc -> . mayor
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (92) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) sinRetorno -> . cola LLAVE_DER
    (69) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (70) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (95) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    FUNCTION        shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAYOR_IGUAL     shift and go to state 41
    IF              shift and go to state 43

    sentenciasAnidadas             shift and go to state 219
    instrucciones                  shift and go to state 212
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    datos                          shift and go to state 13
    pila                           shift and go to state 14
    cola                           shift and go to state 15
    arreglo                        shift and go to state 16
    decl_variable                  shift and go to state 17
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    funcion_variable               shift and go to state 25
    sinRetorno                     shift and go to state 26
    menor                          shift and go to state 27
    mayor                          shift and go to state 28
    if_else_inicio                 shift and go to state 36
    conca_string                   shift and go to state 42

state 207

    (78) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 78 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 78 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 208

    (107) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 107 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 209

    (108) repite_valores_f -> COMA . datos FLECHA datos
    (109) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 220

state 210

    (79) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (79) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (80) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 79 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 63

    if_else_cuerpo                 shift and go to state 221

state 211

    (64) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 64 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 212

    (66) sentenciasAnidadas -> instrucciones .
    (67) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (66) sentenciasAnidadas -> . instrucciones
    (67) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (14) valor -> . datos
    (15) valor -> . pila
    (16) valor -> . cola
    (17) valor -> . arreglo
    (13) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (94) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (27) salida -> . ECHO salidas_pos PUNTO_COMA
    (28) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (29) salida -> . PRINT salidas_pos PUNTO_COMA
    (96) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (30) estructuras_control -> . if_else
    (31) estructuras_control -> . for
    (32) estructuras_control -> . whileDeclaracion
    (33) estructuras_datos -> . pila
    (34) estructuras_datos -> . cola
    (35) estructuras_datos -> . arreglo
    (36) funciones -> . funcion_variable
    (37) funciones -> . sinRetorno
    (87) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (71) valorc -> . menor
    (72) valorc -> . mayor
    (25) multiples -> . salidas_pos
    (26) multiples -> . salidas_pos multiples
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO
    (86) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (63) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (106) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (110) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (12) decl_variable -> . SIGNO_DOLAR VARIABLE
    (76) if_else -> . if_else_inicio if_else_fin
    (77) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (64) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) for -> . cola LLAVE_DER
    (102) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (92) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (61) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (62) sinRetorno -> . cola LLAVE_DER
    (69) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (70) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (22) salidas_pos -> . datos
    (23) salidas_pos -> . decl_variable
    (24) salidas_pos -> . conca_string
    (78) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (95) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 66 (sentenciasAnidadas -> instrucciones .)
    RETURN          reduce using rule 66 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 18
    PRINT           shift and go to state 20
    PRINT_R         shift and go to state 21
    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 31
    BOOLEANO        shift and go to state 32
    NEW             shift and go to state 33
    ARRAY           shift and go to state 34
    SIGNO_DOLAR     shift and go to state 35
    FOR             shift and go to state 37
    WHILE           shift and go to state 38
    FUNCTION        shift and go to state 39
    MENOR_IGUAL     shift and go to state 40
    MAYOR_IGUAL     shift and go to state 41
    IF              shift and go to state 43

  ! LLAVE_DER       [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 66 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 212
    sentenciasAnidadas             shift and go to state 222
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    datos                          shift and go to state 13
    pila                           shift and go to state 14
    cola                           shift and go to state 15
    arreglo                        shift and go to state 16
    decl_variable                  shift and go to state 17
    salidas_pos                    shift and go to state 19
    if_else                        shift and go to state 22
    for                            shift and go to state 23
    whileDeclaracion               shift and go to state 24
    funcion_variable               shift and go to state 25
    sinRetorno                     shift and go to state 26
    menor                          shift and go to state 27
    mayor                          shift and go to state 28
    if_else_inicio                 shift and go to state 36
    conca_string                   shift and go to state 42

state 213

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 223


state 214

    (100) contenido -> bloque .

    LLAVE_DER       reduce using rule 100 (contenido -> bloque .)


state 215

    (101) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 101 (contenido -> sinRetorno .)


state 216

    (61) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 224


state 217

    (62) sinRetorno -> cola . LLAVE_DER
    (65) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 225


state 218

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 226


state 219

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 61 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 220

    (108) repite_valores_f -> COMA datos . FLECHA datos
    (109) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 227


state 221

    (80) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 80 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 222

    (67) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    RETURN          reduce using rule 67 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 223

    (102) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    RETURN          reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 102 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 224

    (61) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 228


state 225

    (62) sinRetorno -> cola LLAVE_DER .
    (65) for -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 62 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 62 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 65 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 65 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 65 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 65 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 65 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 65 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 65 (for -> cola LLAVE_DER .)
    IF              reduce using rule 65 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 65 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 65 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 65 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 65 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 65 (for -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 65 (for -> cola LLAVE_DER .) ]


state 226

    (92) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 92 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 227

    (108) repite_valores_f -> COMA datos FLECHA . datos
    (109) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (18) datos -> . ENTERO
    (19) datos -> . FLOTANTE
    (20) datos -> . STRING
    (21) datos -> . BOOLEANO

    ENTERO          shift and go to state 29
    FLOTANTE        shift and go to state 30
    STRING          shift and go to state 77
    BOOLEANO        shift and go to state 32

    datos                          shift and go to state 229

state 228

    (61) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    SIGNO_DOLAR     shift and go to state 144


state 229

    (108) repite_valores_f -> COMA datos FLECHA datos .
    (109) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (104) repite_valores -> . COMA datos
    (105) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 108 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 121

    repite_valores                 shift and go to state 230

state 230

    (109) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 109 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 15 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 19 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 19 resolved as shift
WARNING: shift/reduce conflict for STRING in state 19 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 19 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 19 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 212 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 212 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 212 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 212 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 212 resolved as shift
WARNING: shift/reduce conflict for NEW in state 212 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 212 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 212 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 212 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (valor -> datos)
WARNING: rejected rule (salidas_pos -> datos) in state 13
WARNING: reduce/reduce conflict in state 14 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 15
WARNING: reduce/reduce conflict in state 16 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 16
WARNING: reduce/reduce conflict in state 44 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 44
WARNING: reduce/reduce conflict in state 225 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 225
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
