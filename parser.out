Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    NAMESPACE
    OR
    OR_SYMB
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> concatenacion
Rule 4     instrucciones -> salida
Rule 5     instrucciones -> estructuras_control
Rule 6     instrucciones -> estructuras_datos
Rule 7     instrucciones -> funciones
Rule 8     instrucciones -> op_pila
Rule 9     instrucciones -> valorc
Rule 10    instrucciones -> multiples
Rule 11    instrucciones -> LLAVE_DER
Rule 12    instrucciones -> llamadaFuncion
Rule 13    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 14    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 15    valor -> datos
Rule 16    valor -> pila
Rule 17    valor -> cola
Rule 18    valor -> arreglo
Rule 19    valor -> opAritVar
Rule 20    datos -> ENTERO
Rule 21    datos -> FLOTANTE
Rule 22    datos -> STRING
Rule 23    datos -> BOOLEANO
Rule 24    salidas_pos -> datos
Rule 25    salidas_pos -> decl_variable
Rule 26    salidas_pos -> conca_string
Rule 27    multiples -> salidas_pos
Rule 28    multiples -> salidas_pos multiples
Rule 29    salida -> ECHO salidas_pos PUNTO_COMA
Rule 30    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 31    salida -> PRINT salidas_pos PUNTO_COMA
Rule 32    estructuras_control -> if_else
Rule 33    estructuras_control -> for
Rule 34    estructuras_control -> whileDeclaracion
Rule 35    estructuras_datos -> pila
Rule 36    estructuras_datos -> cola
Rule 37    estructuras_datos -> arreglo
Rule 38    funciones -> funcion_variable
Rule 39    funciones -> sinRetorno
Rule 40    funciones -> functConPar
Rule 41    operad_log -> IDENTICO
Rule 42    operad_log -> DIFERENTE
Rule 43    operad_log -> MAYOR_QUE
Rule 44    operad_log -> MAYOR_IGUAL
Rule 45    operad_log -> MENOR_QUE
Rule 46    operad_log -> MENOR_IGUAL
Rule 47    operad_arit -> SUMA
Rule 48    operad_arit -> RESTA
Rule 49    operad_arit -> MULTIPL
Rule 50    operad_arit -> DIVISION
Rule 51    operad_arit -> DIVISION_ENT
Rule 52    operad_arit -> POTENCIA
Rule 53    operad_arit -> MODULO
Rule 54    bloque -> asignacion
Rule 55    bloque -> salida
Rule 56    bloque -> retorno
Rule 57    bloque -> estructuras_control
Rule 58    bloque -> asignacion bloque
Rule 59    bloque -> salida bloque
Rule 60    bloque -> retorno bloque
Rule 61    bloque -> estructuras_control bloque
Rule 62    bloque -> multiples
Rule 63    bloque -> multiples bloque
Rule 64    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 65    sinRetorno -> cola LLAVE_DER
Rule 66    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 67    for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 68    for -> cola LLAVE_DER
Rule 69    sentenciasAnidadas -> instrucciones
Rule 70    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 71    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 72    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 73    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 74    valorc -> menor
Rule 75    valorc -> mayor
Rule 76    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 77    crecimiento -> INCREMENTO
Rule 78    crecimiento -> DECREMENTO
Rule 79    if_else -> if_else_inicio if_else_fin
Rule 80    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 81    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 82    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 83    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 84    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 85    op_logica -> ENTERO operad_log ENTERO
Rule 86    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 87    op_logica -> STRING operad_log STRING
Rule 88    op_logica -> BOOLEANO
Rule 89    op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
Rule 90    op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO
Rule 91    op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE
Rule 92    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 93    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 94    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 95    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 96    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 97    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 98    funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 99    retorno -> RETURN salidas_pos PUNTO_COMA
Rule 100   concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA
Rule 101   conca_string -> STRING PUNTO STRING
Rule 102   salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 103   salidas_pos_obj -> valor
Rule 104   salidas_pos_obj -> decl_variable
Rule 105   salidas_pos_obj -> conca_string
Rule 106   contenido -> bloque
Rule 107   contenido -> sinRetorno
Rule 108   whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 109   valores -> datos repite_valores
Rule 110   repite_valores -> COMA datos
Rule 111   repite_valores -> COMA datos repite_valores
Rule 112   arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 113   valoresflecha -> datos FLECHA datos repite_valores_f
Rule 114   repite_valores_f -> COMA datos FLECHA datos
Rule 115   repite_valores_f -> COMA datos FLECHA datos repite_valores
Rule 116   arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 117   parametros -> datos
Rule 118   parametros -> SIGNO_DOLAR VARIABLE
Rule 119   parametrosR -> parametros
Rule 120   parametrosR -> parametros repite_parametros
Rule 121   repite_parametros -> COMA parametros
Rule 122   repite_parametros -> COMA parametros repite_parametros
Rule 123   functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 124   llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
Rule 125   paraCalculos -> ENTERO
Rule 126   paraCalculos -> FLOTANTE
Rule 127   paraCalculos -> SIGNO_DOLAR VARIABLE
Rule 128   combinarOp -> operad_arit paraCalculos
Rule 129   combinarOp -> operad_arit paraCalculos combinarOp
Rule 130   opAritVar -> paraCalculos combinarOp

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 112 116
AS                   : 
ASIG_CONCA           : 100
ASIG_OBJ             : 93
ASIG_REFER           : 
BOOLEANO             : 23 88
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 110 111 114 115 121 122
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 96
CURRENT              : 97
DECLARE              : 
DECREMENTO           : 78
DEFAULT              : 
DIFERENTE            : 42
DIVISION             : 50
DIVISION_ENT         : 51
DO                   : 
ECHO                 : 29
ELSE                 : 84
ELSEIF               : 82 83
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 20 72 73 85 85 90 125
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 113 114 115
FLOTANTE             : 21 86 86 91 126
FN                   : 
FOR                  : 67
FOREACH              : 
FUNCTION             : 64 98 123
GLOBAL               : 
IDENTICO             : 41
IF                   : 81
IGUAL                : 14 116
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 77
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 11 65 68 81 82 83 84 98 108 123
LLAVE_IZQ            : 64 67 81 82 83 84 98 108 123
MACHT                : 
MAYOR_IGUAL          : 44 73
MAYOR_QUE            : 43
MENOR_IGUAL          : 46 72
MENOR_QUE            : 45
MODULO               : 53
MULTIPL              : 49
NAMESPACE            : 
NEW                  : 66 92
OR                   : 
OR_SYMB              : 
PAREN_DER            : 30 64 66 67 81 82 83 92 94 95 96 97 98 102 108 112 116 123 124
PAREN_IZQ            : 30 64 66 67 81 82 83 92 94 95 96 97 98 102 108 112 116 123 124
POP                  : 95
POTENCIA             : 52
PRINT                : 30 31
PRINT_R              : 102
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 101
PUNTODOBLE           : 
PUNTO_COMA           : 14 29 30 31 72 73 94 95 96 97 99 100 102 116 124
PUSH                 : 94
QUEUE                : 66
REQUIERE             : 
RESTA                : 48
RETURN               : 99
SALTO_LINEA          : 
SIGNO_DOLAR          : 13 64 71 76 89 89 90 91 118 127
STACK                : 92
STATIC               : 
STRING               : 22 87 87 101 101
STRREV               : 
SUMA                 : 47
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 98
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 13 64 64 71 76 89 89 90 91 98 118 123 124 127
WHILE                : 108
error                : 

Nonterminals, with rules where they appear

arreglo              : 18 37
asignacion           : 2 54 58 67
bloque               : 58 59 60 61 63 81 82 83 84 98 106 123
cola                 : 17 36 65 68
combinarOp           : 129 130
conca_string         : 26 105
concatenacion        : 3
contenido            : 108
crecimiento          : 76
datos                : 15 24 94 100 109 110 111 113 113 114 114 115 115 117
decl_variable        : 14 25 93 98 100 104 108 116
declaracion_s        : 67
declaracionp         : 67
estructuras_control  : 5 57 61
estructuras_datos    : 6
for                  : 33
funcion_variable     : 38
funciones            : 7
functConPar          : 40
if_else              : 32
if_else_cuerpo       : 80 83
if_else_fin          : 79 80
if_else_inicio       : 79 80
instrucciones        : 69 70 0
llamadaFuncion       : 12
mayor                : 75
menor                : 74
multiples            : 10 28 62 63
opAritVar            : 19
op_logica            : 81 82 83
op_pila              : 8
operad_arit          : 128 129
operad_log           : 85 86 87 89 90 91 108
operad_pila          : 93
paraCalculos         : 128 129 130
parametros           : 119 120 121 122
parametrosR          : 123 124
pila                 : 16 35
repite_parametros    : 120 122
repite_valores       : 109 111 115
repite_valores_f     : 113
retorno              : 56 60
salida               : 4 55 59
salidas_pos          : 27 28 29 30 31 99
salidas_pos_obj      : 
sentenciasAnidadas   : 64 67 70
sinRetorno           : 39 107
valor                : 1 14 102 103 108
valorc               : 9 71
valores              : 112
valoresflecha        : 116
whileDeclaracion     : 34

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (100) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (40) funciones -> . functConPar
    (93) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (74) valorc -> . menor
    (75) valorc -> . mayor
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (124) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (98) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) sinRetorno -> . cola LLAVE_DER
    (123) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (72) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (73) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    VARIABLE        shift and go to state 32
    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    FUNCTION        shift and go to state 44
    MENOR_IGUAL     shift and go to state 45
    MAYOR_IGUAL     shift and go to state 46
    IF              shift and go to state 48

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    opAritVar                      shift and go to state 18
    decl_variable                  shift and go to state 19
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    funcion_variable               shift and go to state 27
    sinRetorno                     shift and go to state 28
    functConPar                    shift and go to state 29
    menor                          shift and go to state 30
    mayor                          shift and go to state 31
    paraCalculos                   shift and go to state 39
    if_else_inicio                 shift and go to state 41
    conca_string                   shift and go to state 47

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .

    $end            reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    PRINT_R         reduce using rule 1 (instrucciones -> valor .)
    VARIABLE        reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    ARRAY           reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)
    RETURN          reduce using rule 1 (instrucciones -> valor .)


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 2 (instrucciones -> asignacion .)
    VARIABLE        reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)
    RETURN          reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> concatenacion .

    $end            reduce using rule 3 (instrucciones -> concatenacion .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> concatenacion .)
    ECHO            reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT           reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT_R         reduce using rule 3 (instrucciones -> concatenacion .)
    VARIABLE        reduce using rule 3 (instrucciones -> concatenacion .)
    ENTERO          reduce using rule 3 (instrucciones -> concatenacion .)
    FLOTANTE        reduce using rule 3 (instrucciones -> concatenacion .)
    STRING          reduce using rule 3 (instrucciones -> concatenacion .)
    BOOLEANO        reduce using rule 3 (instrucciones -> concatenacion .)
    NEW             reduce using rule 3 (instrucciones -> concatenacion .)
    ARRAY           reduce using rule 3 (instrucciones -> concatenacion .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> concatenacion .)
    FOR             reduce using rule 3 (instrucciones -> concatenacion .)
    WHILE           reduce using rule 3 (instrucciones -> concatenacion .)
    FUNCTION        reduce using rule 3 (instrucciones -> concatenacion .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    IF              reduce using rule 3 (instrucciones -> concatenacion .)
    RETURN          reduce using rule 3 (instrucciones -> concatenacion .)


state 5

    (4) instrucciones -> salida .

    $end            reduce using rule 4 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> salida .)
    ECHO            reduce using rule 4 (instrucciones -> salida .)
    PRINT           reduce using rule 4 (instrucciones -> salida .)
    PRINT_R         reduce using rule 4 (instrucciones -> salida .)
    VARIABLE        reduce using rule 4 (instrucciones -> salida .)
    ENTERO          reduce using rule 4 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 4 (instrucciones -> salida .)
    STRING          reduce using rule 4 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 4 (instrucciones -> salida .)
    NEW             reduce using rule 4 (instrucciones -> salida .)
    ARRAY           reduce using rule 4 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> salida .)
    FOR             reduce using rule 4 (instrucciones -> salida .)
    WHILE           reduce using rule 4 (instrucciones -> salida .)
    FUNCTION        reduce using rule 4 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    IF              reduce using rule 4 (instrucciones -> salida .)
    RETURN          reduce using rule 4 (instrucciones -> salida .)


state 6

    (5) instrucciones -> estructuras_control .

    $end            reduce using rule 5 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 5 (instrucciones -> estructuras_control .)
    VARIABLE        reduce using rule 5 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 5 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    IF              reduce using rule 5 (instrucciones -> estructuras_control .)
    RETURN          reduce using rule 5 (instrucciones -> estructuras_control .)


state 7

    (6) instrucciones -> estructuras_datos .

    $end            reduce using rule 6 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 6 (instrucciones -> estructuras_datos .)
    VARIABLE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 6 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 6 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 6 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 6 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 6 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 6 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 6 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 6 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 6 (instrucciones -> estructuras_datos .)
    RETURN          reduce using rule 6 (instrucciones -> estructuras_datos .)


state 8

    (7) instrucciones -> funciones .

    $end            reduce using rule 7 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> funciones .)
    ECHO            reduce using rule 7 (instrucciones -> funciones .)
    PRINT           reduce using rule 7 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 7 (instrucciones -> funciones .)
    VARIABLE        reduce using rule 7 (instrucciones -> funciones .)
    ENTERO          reduce using rule 7 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 7 (instrucciones -> funciones .)
    STRING          reduce using rule 7 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 7 (instrucciones -> funciones .)
    NEW             reduce using rule 7 (instrucciones -> funciones .)
    ARRAY           reduce using rule 7 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> funciones .)
    FOR             reduce using rule 7 (instrucciones -> funciones .)
    WHILE           reduce using rule 7 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 7 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    IF              reduce using rule 7 (instrucciones -> funciones .)
    RETURN          reduce using rule 7 (instrucciones -> funciones .)


state 9

    (8) instrucciones -> op_pila .

    $end            reduce using rule 8 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_pila .)
    ECHO            reduce using rule 8 (instrucciones -> op_pila .)
    PRINT           reduce using rule 8 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 8 (instrucciones -> op_pila .)
    VARIABLE        reduce using rule 8 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 8 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_pila .)
    STRING          reduce using rule 8 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_pila .)
    NEW             reduce using rule 8 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 8 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_pila .)
    FOR             reduce using rule 8 (instrucciones -> op_pila .)
    WHILE           reduce using rule 8 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    IF              reduce using rule 8 (instrucciones -> op_pila .)
    RETURN          reduce using rule 8 (instrucciones -> op_pila .)


state 10

    (9) instrucciones -> valorc .

    $end            reduce using rule 9 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> valorc .)
    ECHO            reduce using rule 9 (instrucciones -> valorc .)
    PRINT           reduce using rule 9 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 9 (instrucciones -> valorc .)
    VARIABLE        reduce using rule 9 (instrucciones -> valorc .)
    ENTERO          reduce using rule 9 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 9 (instrucciones -> valorc .)
    STRING          reduce using rule 9 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 9 (instrucciones -> valorc .)
    NEW             reduce using rule 9 (instrucciones -> valorc .)
    ARRAY           reduce using rule 9 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> valorc .)
    FOR             reduce using rule 9 (instrucciones -> valorc .)
    WHILE           reduce using rule 9 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 9 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    IF              reduce using rule 9 (instrucciones -> valorc .)
    RETURN          reduce using rule 9 (instrucciones -> valorc .)


state 11

    (10) instrucciones -> multiples .

    $end            reduce using rule 10 (instrucciones -> multiples .)
    LLAVE_DER       reduce using rule 10 (instrucciones -> multiples .)
    ECHO            reduce using rule 10 (instrucciones -> multiples .)
    PRINT           reduce using rule 10 (instrucciones -> multiples .)
    PRINT_R         reduce using rule 10 (instrucciones -> multiples .)
    VARIABLE        reduce using rule 10 (instrucciones -> multiples .)
    ENTERO          reduce using rule 10 (instrucciones -> multiples .)
    FLOTANTE        reduce using rule 10 (instrucciones -> multiples .)
    STRING          reduce using rule 10 (instrucciones -> multiples .)
    BOOLEANO        reduce using rule 10 (instrucciones -> multiples .)
    NEW             reduce using rule 10 (instrucciones -> multiples .)
    ARRAY           reduce using rule 10 (instrucciones -> multiples .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> multiples .)
    FOR             reduce using rule 10 (instrucciones -> multiples .)
    WHILE           reduce using rule 10 (instrucciones -> multiples .)
    FUNCTION        reduce using rule 10 (instrucciones -> multiples .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    IF              reduce using rule 10 (instrucciones -> multiples .)
    RETURN          reduce using rule 10 (instrucciones -> multiples .)


state 12

    (11) instrucciones -> LLAVE_DER .

    $end            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    LLAVE_DER       reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT_R         reduce using rule 11 (instrucciones -> LLAVE_DER .)
    VARIABLE        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ARRAY           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 11 (instrucciones -> LLAVE_DER .)
    RETURN          reduce using rule 11 (instrucciones -> LLAVE_DER .)


state 13

    (12) instrucciones -> llamadaFuncion .

    $end            reduce using rule 12 (instrucciones -> llamadaFuncion .)
    LLAVE_DER       reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ECHO            reduce using rule 12 (instrucciones -> llamadaFuncion .)
    PRINT           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    PRINT_R         reduce using rule 12 (instrucciones -> llamadaFuncion .)
    VARIABLE        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ENTERO          reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FLOTANTE        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    STRING          reduce using rule 12 (instrucciones -> llamadaFuncion .)
    BOOLEANO        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    NEW             reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    SIGNO_DOLAR     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FOR             reduce using rule 12 (instrucciones -> llamadaFuncion .)
    WHILE           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    MENOR_IGUAL     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    MAYOR_IGUAL     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    IF              reduce using rule 12 (instrucciones -> llamadaFuncion .)
    RETURN          reduce using rule 12 (instrucciones -> llamadaFuncion .)


state 14

    (15) valor -> datos .
    (24) salidas_pos -> datos .

  ! reduce/reduce conflict for ENTERO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for $end resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for ECHO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for PRINT resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for IF resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (valor -> datos .)
    $end            reduce using rule 15 (valor -> datos .)
    LLAVE_DER       reduce using rule 15 (valor -> datos .)
    ECHO            reduce using rule 15 (valor -> datos .)
    PRINT           reduce using rule 15 (valor -> datos .)
    PRINT_R         reduce using rule 15 (valor -> datos .)
    VARIABLE        reduce using rule 15 (valor -> datos .)
    ENTERO          reduce using rule 15 (valor -> datos .)
    FLOTANTE        reduce using rule 15 (valor -> datos .)
    STRING          reduce using rule 15 (valor -> datos .)
    BOOLEANO        reduce using rule 15 (valor -> datos .)
    NEW             reduce using rule 15 (valor -> datos .)
    ARRAY           reduce using rule 15 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 15 (valor -> datos .)
    FOR             reduce using rule 15 (valor -> datos .)
    WHILE           reduce using rule 15 (valor -> datos .)
    FUNCTION        reduce using rule 15 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 15 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 15 (valor -> datos .)
    IF              reduce using rule 15 (valor -> datos .)
    RETURN          reduce using rule 15 (valor -> datos .)

  ! ENTERO          [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! FLOTANTE        [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! STRING          [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! BOOLEANO        [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! SIGNO_DOLAR     [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! $end            [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! LLAVE_DER       [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! ECHO            [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! PRINT           [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! PRINT_R         [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! VARIABLE        [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! NEW             [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! ARRAY           [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! FOR             [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! WHILE           [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! FUNCTION        [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! MENOR_IGUAL     [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! MAYOR_IGUAL     [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! IF              [ reduce using rule 24 (salidas_pos -> datos .) ]
  ! RETURN          [ reduce using rule 24 (salidas_pos -> datos .) ]


state 15

    (16) valor -> pila .
    (35) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (valor -> pila .)
    $end            reduce using rule 16 (valor -> pila .)
    LLAVE_DER       reduce using rule 16 (valor -> pila .)
    ECHO            reduce using rule 16 (valor -> pila .)
    PRINT           reduce using rule 16 (valor -> pila .)
    PRINT_R         reduce using rule 16 (valor -> pila .)
    VARIABLE        reduce using rule 16 (valor -> pila .)
    ENTERO          reduce using rule 16 (valor -> pila .)
    FLOTANTE        reduce using rule 16 (valor -> pila .)
    STRING          reduce using rule 16 (valor -> pila .)
    BOOLEANO        reduce using rule 16 (valor -> pila .)
    NEW             reduce using rule 16 (valor -> pila .)
    ARRAY           reduce using rule 16 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 16 (valor -> pila .)
    FOR             reduce using rule 16 (valor -> pila .)
    WHILE           reduce using rule 16 (valor -> pila .)
    FUNCTION        reduce using rule 16 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 16 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 16 (valor -> pila .)
    IF              reduce using rule 16 (valor -> pila .)
    RETURN          reduce using rule 16 (valor -> pila .)

  ! $end            [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! VARIABLE        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 35 (estructuras_datos -> pila .) ]
  ! RETURN          [ reduce using rule 35 (estructuras_datos -> pila .) ]


state 16

    (17) valor -> cola .
    (36) estructuras_datos -> cola .
    (68) for -> cola . LLAVE_DER
    (65) sinRetorno -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 17 (valor -> cola .)
    ECHO            reduce using rule 17 (valor -> cola .)
    PRINT           reduce using rule 17 (valor -> cola .)
    PRINT_R         reduce using rule 17 (valor -> cola .)
    VARIABLE        reduce using rule 17 (valor -> cola .)
    ENTERO          reduce using rule 17 (valor -> cola .)
    FLOTANTE        reduce using rule 17 (valor -> cola .)
    STRING          reduce using rule 17 (valor -> cola .)
    BOOLEANO        reduce using rule 17 (valor -> cola .)
    NEW             reduce using rule 17 (valor -> cola .)
    ARRAY           reduce using rule 17 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 17 (valor -> cola .)
    FOR             reduce using rule 17 (valor -> cola .)
    WHILE           reduce using rule 17 (valor -> cola .)
    FUNCTION        reduce using rule 17 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 17 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 17 (valor -> cola .)
    IF              reduce using rule 17 (valor -> cola .)
    RETURN          reduce using rule 17 (valor -> cola .)
    LLAVE_DER       shift and go to state 49

  ! LLAVE_DER       [ reduce using rule 17 (valor -> cola .) ]
  ! $end            [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! VARIABLE        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 36 (estructuras_datos -> cola .) ]
  ! RETURN          [ reduce using rule 36 (estructuras_datos -> cola .) ]


state 17

    (18) valor -> arreglo .
    (37) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for $end resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (valor -> arreglo .)
    $end            reduce using rule 18 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 18 (valor -> arreglo .)
    ECHO            reduce using rule 18 (valor -> arreglo .)
    PRINT           reduce using rule 18 (valor -> arreglo .)
    PRINT_R         reduce using rule 18 (valor -> arreglo .)
    VARIABLE        reduce using rule 18 (valor -> arreglo .)
    ENTERO          reduce using rule 18 (valor -> arreglo .)
    FLOTANTE        reduce using rule 18 (valor -> arreglo .)
    STRING          reduce using rule 18 (valor -> arreglo .)
    BOOLEANO        reduce using rule 18 (valor -> arreglo .)
    NEW             reduce using rule 18 (valor -> arreglo .)
    ARRAY           reduce using rule 18 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 18 (valor -> arreglo .)
    FOR             reduce using rule 18 (valor -> arreglo .)
    WHILE           reduce using rule 18 (valor -> arreglo .)
    FUNCTION        reduce using rule 18 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 18 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 18 (valor -> arreglo .)
    IF              reduce using rule 18 (valor -> arreglo .)
    RETURN          reduce using rule 18 (valor -> arreglo .)

  ! $end            [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! LLAVE_DER       [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! VARIABLE        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 37 (estructuras_datos -> arreglo .) ]
  ! RETURN          [ reduce using rule 37 (estructuras_datos -> arreglo .) ]


state 18

    (19) valor -> opAritVar .

    $end            reduce using rule 19 (valor -> opAritVar .)
    PUNTO_COMA      reduce using rule 19 (valor -> opAritVar .)
    PAREN_DER       reduce using rule 19 (valor -> opAritVar .)
    LLAVE_DER       reduce using rule 19 (valor -> opAritVar .)
    ECHO            reduce using rule 19 (valor -> opAritVar .)
    PRINT           reduce using rule 19 (valor -> opAritVar .)
    PRINT_R         reduce using rule 19 (valor -> opAritVar .)
    VARIABLE        reduce using rule 19 (valor -> opAritVar .)
    ENTERO          reduce using rule 19 (valor -> opAritVar .)
    FLOTANTE        reduce using rule 19 (valor -> opAritVar .)
    STRING          reduce using rule 19 (valor -> opAritVar .)
    BOOLEANO        reduce using rule 19 (valor -> opAritVar .)
    NEW             reduce using rule 19 (valor -> opAritVar .)
    ARRAY           reduce using rule 19 (valor -> opAritVar .)
    SIGNO_DOLAR     reduce using rule 19 (valor -> opAritVar .)
    FOR             reduce using rule 19 (valor -> opAritVar .)
    WHILE           reduce using rule 19 (valor -> opAritVar .)
    FUNCTION        reduce using rule 19 (valor -> opAritVar .)
    MENOR_IGUAL     reduce using rule 19 (valor -> opAritVar .)
    MAYOR_IGUAL     reduce using rule 19 (valor -> opAritVar .)
    IF              reduce using rule 19 (valor -> opAritVar .)
    RETURN          reduce using rule 19 (valor -> opAritVar .)


state 19

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (100) concatenacion -> decl_variable . ASIG_CONCA datos PUNTO_COMA
    (93) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (116) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (25) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 50
    ASIG_CONCA      shift and go to state 51
    ASIG_OBJ        shift and go to state 52
    ENTERO          reduce using rule 25 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 25 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 25 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 25 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 25 (salidas_pos -> decl_variable .)
    $end            reduce using rule 25 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 25 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 25 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 25 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 25 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 25 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 25 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 25 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 25 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 25 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 25 (salidas_pos -> decl_variable .)
    IF              reduce using rule 25 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 25 (salidas_pos -> decl_variable .)


state 20

    (29) salida -> ECHO . salidas_pos PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (101) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    SIGNO_DOLAR     shift and go to state 58

    salidas_pos                    shift and go to state 53
    datos                          shift and go to state 54
    decl_variable                  shift and go to state 55
    conca_string                   shift and go to state 47

state 21

    (27) multiples -> salidas_pos .
    (28) multiples -> salidas_pos . multiples
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (101) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
    $end            reduce using rule 27 (multiples -> salidas_pos .)
    ECHO            reduce using rule 27 (multiples -> salidas_pos .)
    PRINT           reduce using rule 27 (multiples -> salidas_pos .)
    PRINT_R         reduce using rule 27 (multiples -> salidas_pos .)
    RETURN          reduce using rule 27 (multiples -> salidas_pos .)
    FOR             reduce using rule 27 (multiples -> salidas_pos .)
    WHILE           reduce using rule 27 (multiples -> salidas_pos .)
    IF              reduce using rule 27 (multiples -> salidas_pos .)
    NEW             reduce using rule 27 (multiples -> salidas_pos .)
    LLAVE_DER       reduce using rule 27 (multiples -> salidas_pos .)
    VARIABLE        reduce using rule 27 (multiples -> salidas_pos .)
    ARRAY           reduce using rule 27 (multiples -> salidas_pos .)
    FUNCTION        reduce using rule 27 (multiples -> salidas_pos .)
    MENOR_IGUAL     reduce using rule 27 (multiples -> salidas_pos .)
    MAYOR_IGUAL     reduce using rule 27 (multiples -> salidas_pos .)
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    SIGNO_DOLAR     shift and go to state 58

  ! SIGNO_DOLAR     [ reduce using rule 27 (multiples -> salidas_pos .) ]
  ! ENTERO          [ reduce using rule 27 (multiples -> salidas_pos .) ]
  ! FLOTANTE        [ reduce using rule 27 (multiples -> salidas_pos .) ]
  ! STRING          [ reduce using rule 27 (multiples -> salidas_pos .) ]
  ! BOOLEANO        [ reduce using rule 27 (multiples -> salidas_pos .) ]

    salidas_pos                    shift and go to state 21
    multiples                      shift and go to state 59
    datos                          shift and go to state 54
    decl_variable                  shift and go to state 55
    conca_string                   shift and go to state 47

state 22

    (30) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> PRINT . salidas_pos PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (101) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 60
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    SIGNO_DOLAR     shift and go to state 58

    salidas_pos                    shift and go to state 61
    datos                          shift and go to state 54
    decl_variable                  shift and go to state 55
    conca_string                   shift and go to state 47

state 23

    (102) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 62


state 24

    (32) estructuras_control -> if_else .

    $end            reduce using rule 32 (estructuras_control -> if_else .)
    ECHO            reduce using rule 32 (estructuras_control -> if_else .)
    PRINT           reduce using rule 32 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 32 (estructuras_control -> if_else .)
    RETURN          reduce using rule 32 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 32 (estructuras_control -> if_else .)
    FOR             reduce using rule 32 (estructuras_control -> if_else .)
    WHILE           reduce using rule 32 (estructuras_control -> if_else .)
    IF              reduce using rule 32 (estructuras_control -> if_else .)
    NEW             reduce using rule 32 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 32 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 32 (estructuras_control -> if_else .)
    STRING          reduce using rule 32 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 32 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 32 (estructuras_control -> if_else .)
    VARIABLE        reduce using rule 32 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 32 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 32 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 32 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 32 (estructuras_control -> if_else .)


state 25

    (33) estructuras_control -> for .

    $end            reduce using rule 33 (estructuras_control -> for .)
    ECHO            reduce using rule 33 (estructuras_control -> for .)
    PRINT           reduce using rule 33 (estructuras_control -> for .)
    PRINT_R         reduce using rule 33 (estructuras_control -> for .)
    RETURN          reduce using rule 33 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 33 (estructuras_control -> for .)
    FOR             reduce using rule 33 (estructuras_control -> for .)
    WHILE           reduce using rule 33 (estructuras_control -> for .)
    IF              reduce using rule 33 (estructuras_control -> for .)
    NEW             reduce using rule 33 (estructuras_control -> for .)
    ENTERO          reduce using rule 33 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 33 (estructuras_control -> for .)
    STRING          reduce using rule 33 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 33 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 33 (estructuras_control -> for .)
    VARIABLE        reduce using rule 33 (estructuras_control -> for .)
    ARRAY           reduce using rule 33 (estructuras_control -> for .)
    FUNCTION        reduce using rule 33 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 33 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 33 (estructuras_control -> for .)


state 26

    (34) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    RETURN          reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    VARIABLE        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 34 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 34 (estructuras_control -> whileDeclaracion .)


state 27

    (38) funciones -> funcion_variable .

    $end            reduce using rule 38 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 38 (funciones -> funcion_variable .)
    ECHO            reduce using rule 38 (funciones -> funcion_variable .)
    PRINT           reduce using rule 38 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 38 (funciones -> funcion_variable .)
    VARIABLE        reduce using rule 38 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 38 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 38 (funciones -> funcion_variable .)
    STRING          reduce using rule 38 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 38 (funciones -> funcion_variable .)
    NEW             reduce using rule 38 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 38 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 38 (funciones -> funcion_variable .)
    FOR             reduce using rule 38 (funciones -> funcion_variable .)
    WHILE           reduce using rule 38 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 38 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 38 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 38 (funciones -> funcion_variable .)
    IF              reduce using rule 38 (funciones -> funcion_variable .)
    RETURN          reduce using rule 38 (funciones -> funcion_variable .)


state 28

    (39) funciones -> sinRetorno .

    $end            reduce using rule 39 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 39 (funciones -> sinRetorno .)
    ECHO            reduce using rule 39 (funciones -> sinRetorno .)
    PRINT           reduce using rule 39 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 39 (funciones -> sinRetorno .)
    VARIABLE        reduce using rule 39 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 39 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 39 (funciones -> sinRetorno .)
    STRING          reduce using rule 39 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 39 (funciones -> sinRetorno .)
    NEW             reduce using rule 39 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 39 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 39 (funciones -> sinRetorno .)
    FOR             reduce using rule 39 (funciones -> sinRetorno .)
    WHILE           reduce using rule 39 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 39 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 39 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 39 (funciones -> sinRetorno .)
    IF              reduce using rule 39 (funciones -> sinRetorno .)
    RETURN          reduce using rule 39 (funciones -> sinRetorno .)


state 29

    (40) funciones -> functConPar .

    $end            reduce using rule 40 (funciones -> functConPar .)
    LLAVE_DER       reduce using rule 40 (funciones -> functConPar .)
    ECHO            reduce using rule 40 (funciones -> functConPar .)
    PRINT           reduce using rule 40 (funciones -> functConPar .)
    PRINT_R         reduce using rule 40 (funciones -> functConPar .)
    VARIABLE        reduce using rule 40 (funciones -> functConPar .)
    ENTERO          reduce using rule 40 (funciones -> functConPar .)
    FLOTANTE        reduce using rule 40 (funciones -> functConPar .)
    STRING          reduce using rule 40 (funciones -> functConPar .)
    BOOLEANO        reduce using rule 40 (funciones -> functConPar .)
    NEW             reduce using rule 40 (funciones -> functConPar .)
    ARRAY           reduce using rule 40 (funciones -> functConPar .)
    SIGNO_DOLAR     reduce using rule 40 (funciones -> functConPar .)
    FOR             reduce using rule 40 (funciones -> functConPar .)
    WHILE           reduce using rule 40 (funciones -> functConPar .)
    FUNCTION        reduce using rule 40 (funciones -> functConPar .)
    MENOR_IGUAL     reduce using rule 40 (funciones -> functConPar .)
    MAYOR_IGUAL     reduce using rule 40 (funciones -> functConPar .)
    IF              reduce using rule 40 (funciones -> functConPar .)
    RETURN          reduce using rule 40 (funciones -> functConPar .)


state 30

    (74) valorc -> menor .

    $end            reduce using rule 74 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 74 (valorc -> menor .)
    LLAVE_DER       reduce using rule 74 (valorc -> menor .)
    ECHO            reduce using rule 74 (valorc -> menor .)
    PRINT           reduce using rule 74 (valorc -> menor .)
    PRINT_R         reduce using rule 74 (valorc -> menor .)
    VARIABLE        reduce using rule 74 (valorc -> menor .)
    ENTERO          reduce using rule 74 (valorc -> menor .)
    FLOTANTE        reduce using rule 74 (valorc -> menor .)
    STRING          reduce using rule 74 (valorc -> menor .)
    BOOLEANO        reduce using rule 74 (valorc -> menor .)
    NEW             reduce using rule 74 (valorc -> menor .)
    ARRAY           reduce using rule 74 (valorc -> menor .)
    FOR             reduce using rule 74 (valorc -> menor .)
    WHILE           reduce using rule 74 (valorc -> menor .)
    FUNCTION        reduce using rule 74 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 74 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 74 (valorc -> menor .)
    IF              reduce using rule 74 (valorc -> menor .)
    RETURN          reduce using rule 74 (valorc -> menor .)


state 31

    (75) valorc -> mayor .

    $end            reduce using rule 75 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 75 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 75 (valorc -> mayor .)
    ECHO            reduce using rule 75 (valorc -> mayor .)
    PRINT           reduce using rule 75 (valorc -> mayor .)
    PRINT_R         reduce using rule 75 (valorc -> mayor .)
    VARIABLE        reduce using rule 75 (valorc -> mayor .)
    ENTERO          reduce using rule 75 (valorc -> mayor .)
    FLOTANTE        reduce using rule 75 (valorc -> mayor .)
    STRING          reduce using rule 75 (valorc -> mayor .)
    BOOLEANO        reduce using rule 75 (valorc -> mayor .)
    NEW             reduce using rule 75 (valorc -> mayor .)
    ARRAY           reduce using rule 75 (valorc -> mayor .)
    FOR             reduce using rule 75 (valorc -> mayor .)
    WHILE           reduce using rule 75 (valorc -> mayor .)
    FUNCTION        reduce using rule 75 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 75 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 75 (valorc -> mayor .)
    IF              reduce using rule 75 (valorc -> mayor .)
    RETURN          reduce using rule 75 (valorc -> mayor .)


state 32

    (124) llamadaFuncion -> VARIABLE . PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 63


state 33

    (20) datos -> ENTERO .
    (125) paraCalculos -> ENTERO .

    $end            reduce using rule 20 (datos -> ENTERO .)
    ENTERO          reduce using rule 20 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 20 (datos -> ENTERO .)
    STRING          reduce using rule 20 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 20 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 20 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 20 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 20 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 20 (datos -> ENTERO .)
    ECHO            reduce using rule 20 (datos -> ENTERO .)
    PRINT           reduce using rule 20 (datos -> ENTERO .)
    PRINT_R         reduce using rule 20 (datos -> ENTERO .)
    VARIABLE        reduce using rule 20 (datos -> ENTERO .)
    NEW             reduce using rule 20 (datos -> ENTERO .)
    ARRAY           reduce using rule 20 (datos -> ENTERO .)
    FOR             reduce using rule 20 (datos -> ENTERO .)
    WHILE           reduce using rule 20 (datos -> ENTERO .)
    FUNCTION        reduce using rule 20 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 20 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 20 (datos -> ENTERO .)
    IF              reduce using rule 20 (datos -> ENTERO .)
    RETURN          reduce using rule 20 (datos -> ENTERO .)
    SUMA            reduce using rule 125 (paraCalculos -> ENTERO .)
    RESTA           reduce using rule 125 (paraCalculos -> ENTERO .)
    MULTIPL         reduce using rule 125 (paraCalculos -> ENTERO .)
    DIVISION        reduce using rule 125 (paraCalculos -> ENTERO .)
    DIVISION_ENT    reduce using rule 125 (paraCalculos -> ENTERO .)
    POTENCIA        reduce using rule 125 (paraCalculos -> ENTERO .)
    MODULO          reduce using rule 125 (paraCalculos -> ENTERO .)


state 34

    (21) datos -> FLOTANTE .
    (126) paraCalculos -> FLOTANTE .

    $end            reduce using rule 21 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 21 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 21 (datos -> FLOTANTE .)
    STRING          reduce using rule 21 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 21 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 21 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 21 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 21 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 21 (datos -> FLOTANTE .)
    ECHO            reduce using rule 21 (datos -> FLOTANTE .)
    PRINT           reduce using rule 21 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 21 (datos -> FLOTANTE .)
    VARIABLE        reduce using rule 21 (datos -> FLOTANTE .)
    NEW             reduce using rule 21 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 21 (datos -> FLOTANTE .)
    FOR             reduce using rule 21 (datos -> FLOTANTE .)
    WHILE           reduce using rule 21 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 21 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 21 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 21 (datos -> FLOTANTE .)
    IF              reduce using rule 21 (datos -> FLOTANTE .)
    RETURN          reduce using rule 21 (datos -> FLOTANTE .)
    SUMA            reduce using rule 126 (paraCalculos -> FLOTANTE .)
    RESTA           reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MULTIPL         reduce using rule 126 (paraCalculos -> FLOTANTE .)
    DIVISION        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    DIVISION_ENT    reduce using rule 126 (paraCalculos -> FLOTANTE .)
    POTENCIA        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MODULO          reduce using rule 126 (paraCalculos -> FLOTANTE .)


state 35

    (22) datos -> STRING .
    (101) conca_string -> STRING . PUNTO STRING

    $end            reduce using rule 22 (datos -> STRING .)
    ENTERO          reduce using rule 22 (datos -> STRING .)
    FLOTANTE        reduce using rule 22 (datos -> STRING .)
    STRING          reduce using rule 22 (datos -> STRING .)
    BOOLEANO        reduce using rule 22 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 22 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 22 (datos -> STRING .)
    ECHO            reduce using rule 22 (datos -> STRING .)
    PRINT           reduce using rule 22 (datos -> STRING .)
    PRINT_R         reduce using rule 22 (datos -> STRING .)
    RETURN          reduce using rule 22 (datos -> STRING .)
    FOR             reduce using rule 22 (datos -> STRING .)
    WHILE           reduce using rule 22 (datos -> STRING .)
    IF              reduce using rule 22 (datos -> STRING .)
    NEW             reduce using rule 22 (datos -> STRING .)
    LLAVE_DER       reduce using rule 22 (datos -> STRING .)
    VARIABLE        reduce using rule 22 (datos -> STRING .)
    ARRAY           reduce using rule 22 (datos -> STRING .)
    FUNCTION        reduce using rule 22 (datos -> STRING .)
    MENOR_IGUAL     reduce using rule 22 (datos -> STRING .)
    MAYOR_IGUAL     reduce using rule 22 (datos -> STRING .)
    PAREN_DER       reduce using rule 22 (datos -> STRING .)
    PUNTO           shift and go to state 64


state 36

    (23) datos -> BOOLEANO .

    $end            reduce using rule 23 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 23 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 23 (datos -> BOOLEANO .)
    STRING          reduce using rule 23 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 23 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 23 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 23 (datos -> BOOLEANO .)
    ECHO            reduce using rule 23 (datos -> BOOLEANO .)
    PRINT           reduce using rule 23 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 23 (datos -> BOOLEANO .)
    RETURN          reduce using rule 23 (datos -> BOOLEANO .)
    FOR             reduce using rule 23 (datos -> BOOLEANO .)
    WHILE           reduce using rule 23 (datos -> BOOLEANO .)
    IF              reduce using rule 23 (datos -> BOOLEANO .)
    NEW             reduce using rule 23 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 23 (datos -> BOOLEANO .)
    VARIABLE        reduce using rule 23 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 23 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 23 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 23 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 23 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 23 (datos -> BOOLEANO .)
    COMA            reduce using rule 23 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 23 (datos -> BOOLEANO .)


state 37

    (92) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (66) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 65
    QUEUE           shift and go to state 66


state 38

    (112) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 67


state 39

    (130) opAritVar -> paraCalculos . combinarOp
    (128) combinarOp -> . operad_arit paraCalculos
    (129) combinarOp -> . operad_arit paraCalculos combinarOp
    (47) operad_arit -> . SUMA
    (48) operad_arit -> . RESTA
    (49) operad_arit -> . MULTIPL
    (50) operad_arit -> . DIVISION
    (51) operad_arit -> . DIVISION_ENT
    (52) operad_arit -> . POTENCIA
    (53) operad_arit -> . MODULO

    SUMA            shift and go to state 70
    RESTA           shift and go to state 71
    MULTIPL         shift and go to state 72
    DIVISION        shift and go to state 73
    DIVISION_ENT    shift and go to state 74
    POTENCIA        shift and go to state 75
    MODULO          shift and go to state 76

    combinarOp                     shift and go to state 68
    operad_arit                    shift and go to state 69

state 40

    (13) decl_variable -> SIGNO_DOLAR . VARIABLE
    (127) paraCalculos -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 77


state 41

    (79) if_else -> if_else_inicio . if_else_fin
    (80) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (84) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 80
    ELSEIF          shift and go to state 81

    if_else_fin                    shift and go to state 78
    if_else_cuerpo                 shift and go to state 79

state 42

    (67) for -> FOR . PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 82


state 43

    (108) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 83


state 44

    (98) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (123) functConPar -> FUNCTION . VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    VARIABLE        shift and go to state 84


state 45

    (72) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 85


state 46

    (73) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 86


state 47

    (26) salidas_pos -> conca_string .

    ENTERO          reduce using rule 26 (salidas_pos -> conca_string .)
    FLOTANTE        reduce using rule 26 (salidas_pos -> conca_string .)
    STRING          reduce using rule 26 (salidas_pos -> conca_string .)
    BOOLEANO        reduce using rule 26 (salidas_pos -> conca_string .)
    SIGNO_DOLAR     reduce using rule 26 (salidas_pos -> conca_string .)
    $end            reduce using rule 26 (salidas_pos -> conca_string .)
    PUNTO_COMA      reduce using rule 26 (salidas_pos -> conca_string .)
    ECHO            reduce using rule 26 (salidas_pos -> conca_string .)
    PRINT           reduce using rule 26 (salidas_pos -> conca_string .)
    PRINT_R         reduce using rule 26 (salidas_pos -> conca_string .)
    RETURN          reduce using rule 26 (salidas_pos -> conca_string .)
    FOR             reduce using rule 26 (salidas_pos -> conca_string .)
    WHILE           reduce using rule 26 (salidas_pos -> conca_string .)
    IF              reduce using rule 26 (salidas_pos -> conca_string .)
    NEW             reduce using rule 26 (salidas_pos -> conca_string .)
    LLAVE_DER       reduce using rule 26 (salidas_pos -> conca_string .)
    VARIABLE        reduce using rule 26 (salidas_pos -> conca_string .)
    ARRAY           reduce using rule 26 (salidas_pos -> conca_string .)
    FUNCTION        reduce using rule 26 (salidas_pos -> conca_string .)
    MENOR_IGUAL     reduce using rule 26 (salidas_pos -> conca_string .)
    MAYOR_IGUAL     reduce using rule 26 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 26 (salidas_pos -> conca_string .)


state 48

    (81) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 87


state 49

    (68) for -> cola LLAVE_DER .
    (65) sinRetorno -> cola LLAVE_DER .

  ! reduce/reduce conflict for $end resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ECHO resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for STRING resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for NEW resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ARRAY resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for WHILE resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for IF resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
    $end            reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    PRINT           reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    VARIABLE        reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    ENTERO          reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    STRING          reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    NEW             reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    ARRAY           reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    FOR             reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    WHILE           reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    IF              reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    RETURN          reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)

  ! $end            [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! LLAVE_DER       [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! ECHO            [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! PRINT           [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! PRINT_R         [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! VARIABLE        [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! ENTERO          [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! FLOTANTE        [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! STRING          [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! BOOLEANO        [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! NEW             [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! ARRAY           [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! SIGNO_DOLAR     [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! FOR             [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! WHILE           [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! FUNCTION        [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! MENOR_IGUAL     [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! MAYOR_IGUAL     [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! IF              [ reduce using rule 68 (for -> cola LLAVE_DER .) ]
  ! RETURN          [ reduce using rule 68 (for -> cola LLAVE_DER .) ]


state 50

    (14) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (116) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ARRAY           shift and go to state 90
    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    SIGNO_DOLAR     shift and go to state 40

    decl_variable                  shift and go to state 88
    valor                          shift and go to state 89
    datos                          shift and go to state 91
    pila                           shift and go to state 92
    cola                           shift and go to state 93
    arreglo                        shift and go to state 94
    opAritVar                      shift and go to state 18
    paraCalculos                   shift and go to state 39

state 51

    (100) concatenacion -> decl_variable ASIG_CONCA . datos PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 96

state 52

    (93) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (94) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (95) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (96) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (97) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 98
    POP             shift and go to state 99
    COUNT           shift and go to state 100
    CURRENT         shift and go to state 101

    operad_pila                    shift and go to state 97

state 53

    (29) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 102


state 54

    (24) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 24 (salidas_pos -> datos .)
    ENTERO          reduce using rule 24 (salidas_pos -> datos .)
    FLOTANTE        reduce using rule 24 (salidas_pos -> datos .)
    STRING          reduce using rule 24 (salidas_pos -> datos .)
    BOOLEANO        reduce using rule 24 (salidas_pos -> datos .)
    SIGNO_DOLAR     reduce using rule 24 (salidas_pos -> datos .)
    $end            reduce using rule 24 (salidas_pos -> datos .)
    ECHO            reduce using rule 24 (salidas_pos -> datos .)
    PRINT           reduce using rule 24 (salidas_pos -> datos .)
    PRINT_R         reduce using rule 24 (salidas_pos -> datos .)
    RETURN          reduce using rule 24 (salidas_pos -> datos .)
    FOR             reduce using rule 24 (salidas_pos -> datos .)
    WHILE           reduce using rule 24 (salidas_pos -> datos .)
    IF              reduce using rule 24 (salidas_pos -> datos .)
    NEW             reduce using rule 24 (salidas_pos -> datos .)
    LLAVE_DER       reduce using rule 24 (salidas_pos -> datos .)
    VARIABLE        reduce using rule 24 (salidas_pos -> datos .)
    ARRAY           reduce using rule 24 (salidas_pos -> datos .)
    FUNCTION        reduce using rule 24 (salidas_pos -> datos .)
    MENOR_IGUAL     reduce using rule 24 (salidas_pos -> datos .)
    MAYOR_IGUAL     reduce using rule 24 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 24 (salidas_pos -> datos .)


state 55

    (25) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 25 (salidas_pos -> decl_variable .)
    ENTERO          reduce using rule 25 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 25 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 25 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 25 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 25 (salidas_pos -> decl_variable .)
    $end            reduce using rule 25 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 25 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 25 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 25 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 25 (salidas_pos -> decl_variable .)
    IF              reduce using rule 25 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 25 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 25 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 25 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 25 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 25 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 25 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 25 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 25 (salidas_pos -> decl_variable .)


state 56

    (20) datos -> ENTERO .

    PUNTO_COMA      reduce using rule 20 (datos -> ENTERO .)
    ENTERO          reduce using rule 20 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 20 (datos -> ENTERO .)
    STRING          reduce using rule 20 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 20 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 20 (datos -> ENTERO .)
    $end            reduce using rule 20 (datos -> ENTERO .)
    ECHO            reduce using rule 20 (datos -> ENTERO .)
    PRINT           reduce using rule 20 (datos -> ENTERO .)
    PRINT_R         reduce using rule 20 (datos -> ENTERO .)
    RETURN          reduce using rule 20 (datos -> ENTERO .)
    FOR             reduce using rule 20 (datos -> ENTERO .)
    WHILE           reduce using rule 20 (datos -> ENTERO .)
    IF              reduce using rule 20 (datos -> ENTERO .)
    NEW             reduce using rule 20 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 20 (datos -> ENTERO .)
    VARIABLE        reduce using rule 20 (datos -> ENTERO .)
    ARRAY           reduce using rule 20 (datos -> ENTERO .)
    FUNCTION        reduce using rule 20 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 20 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 20 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 20 (datos -> ENTERO .)
    COMA            reduce using rule 20 (datos -> ENTERO .)
    FLECHA          reduce using rule 20 (datos -> ENTERO .)


state 57

    (21) datos -> FLOTANTE .

    PUNTO_COMA      reduce using rule 21 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 21 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 21 (datos -> FLOTANTE .)
    STRING          reduce using rule 21 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 21 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 21 (datos -> FLOTANTE .)
    $end            reduce using rule 21 (datos -> FLOTANTE .)
    ECHO            reduce using rule 21 (datos -> FLOTANTE .)
    PRINT           reduce using rule 21 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 21 (datos -> FLOTANTE .)
    RETURN          reduce using rule 21 (datos -> FLOTANTE .)
    FOR             reduce using rule 21 (datos -> FLOTANTE .)
    WHILE           reduce using rule 21 (datos -> FLOTANTE .)
    IF              reduce using rule 21 (datos -> FLOTANTE .)
    NEW             reduce using rule 21 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 21 (datos -> FLOTANTE .)
    VARIABLE        reduce using rule 21 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 21 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 21 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 21 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 21 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 21 (datos -> FLOTANTE .)
    COMA            reduce using rule 21 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 21 (datos -> FLOTANTE .)


state 58

    (13) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 103


state 59

    (28) multiples -> salidas_pos multiples .

    $end            reduce using rule 28 (multiples -> salidas_pos multiples .)
    ECHO            reduce using rule 28 (multiples -> salidas_pos multiples .)
    PRINT           reduce using rule 28 (multiples -> salidas_pos multiples .)
    PRINT_R         reduce using rule 28 (multiples -> salidas_pos multiples .)
    RETURN          reduce using rule 28 (multiples -> salidas_pos multiples .)
    SIGNO_DOLAR     reduce using rule 28 (multiples -> salidas_pos multiples .)
    FOR             reduce using rule 28 (multiples -> salidas_pos multiples .)
    WHILE           reduce using rule 28 (multiples -> salidas_pos multiples .)
    IF              reduce using rule 28 (multiples -> salidas_pos multiples .)
    NEW             reduce using rule 28 (multiples -> salidas_pos multiples .)
    ENTERO          reduce using rule 28 (multiples -> salidas_pos multiples .)
    FLOTANTE        reduce using rule 28 (multiples -> salidas_pos multiples .)
    STRING          reduce using rule 28 (multiples -> salidas_pos multiples .)
    BOOLEANO        reduce using rule 28 (multiples -> salidas_pos multiples .)
    LLAVE_DER       reduce using rule 28 (multiples -> salidas_pos multiples .)
    VARIABLE        reduce using rule 28 (multiples -> salidas_pos multiples .)
    ARRAY           reduce using rule 28 (multiples -> salidas_pos multiples .)
    FUNCTION        reduce using rule 28 (multiples -> salidas_pos multiples .)
    MENOR_IGUAL     reduce using rule 28 (multiples -> salidas_pos multiples .)
    MAYOR_IGUAL     reduce using rule 28 (multiples -> salidas_pos multiples .)


state 60

    (30) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (101) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    SIGNO_DOLAR     shift and go to state 58

    salidas_pos                    shift and go to state 104
    datos                          shift and go to state 54
    decl_variable                  shift and go to state 55
    conca_string                   shift and go to state 47

state 61

    (31) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 105


state 62

    (102) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40

    valor                          shift and go to state 106
    datos                          shift and go to state 91
    pila                           shift and go to state 92
    cola                           shift and go to state 93
    arreglo                        shift and go to state 94
    opAritVar                      shift and go to state 18
    decl_variable                  shift and go to state 88
    paraCalculos                   shift and go to state 39

state 63

    (124) llamadaFuncion -> VARIABLE PAREN_IZQ . parametrosR PAREN_DER PUNTO_COMA
    (119) parametrosR -> . parametros
    (120) parametrosR -> . parametros repite_parametros
    (117) parametros -> . datos
    (118) parametros -> . SIGNO_DOLAR VARIABLE
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 110
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    parametrosR                    shift and go to state 107
    parametros                     shift and go to state 108
    datos                          shift and go to state 109

state 64

    (101) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 111


state 65

    (92) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 112


state 66

    (66) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 113


state 67

    (112) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (109) valores -> . datos repite_valores
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    valores                        shift and go to state 114
    datos                          shift and go to state 115

state 68

    (130) opAritVar -> paraCalculos combinarOp .

    $end            reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    PUNTO_COMA      reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    PAREN_DER       reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    LLAVE_DER       reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    ECHO            reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    PRINT           reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    PRINT_R         reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    VARIABLE        reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    ENTERO          reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    FLOTANTE        reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    STRING          reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    BOOLEANO        reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    NEW             reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    ARRAY           reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    SIGNO_DOLAR     reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    FOR             reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    WHILE           reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    FUNCTION        reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    MENOR_IGUAL     reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    MAYOR_IGUAL     reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    IF              reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)
    RETURN          reduce using rule 130 (opAritVar -> paraCalculos combinarOp .)


state 69

    (128) combinarOp -> operad_arit . paraCalculos
    (129) combinarOp -> operad_arit . paraCalculos combinarOp
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 117
    FLOTANTE        shift and go to state 118
    SIGNO_DOLAR     shift and go to state 119

    paraCalculos                   shift and go to state 116

state 70

    (47) operad_arit -> SUMA .

    ENTERO          reduce using rule 47 (operad_arit -> SUMA .)
    FLOTANTE        reduce using rule 47 (operad_arit -> SUMA .)
    SIGNO_DOLAR     reduce using rule 47 (operad_arit -> SUMA .)


state 71

    (48) operad_arit -> RESTA .

    ENTERO          reduce using rule 48 (operad_arit -> RESTA .)
    FLOTANTE        reduce using rule 48 (operad_arit -> RESTA .)
    SIGNO_DOLAR     reduce using rule 48 (operad_arit -> RESTA .)


state 72

    (49) operad_arit -> MULTIPL .

    ENTERO          reduce using rule 49 (operad_arit -> MULTIPL .)
    FLOTANTE        reduce using rule 49 (operad_arit -> MULTIPL .)
    SIGNO_DOLAR     reduce using rule 49 (operad_arit -> MULTIPL .)


state 73

    (50) operad_arit -> DIVISION .

    ENTERO          reduce using rule 50 (operad_arit -> DIVISION .)
    FLOTANTE        reduce using rule 50 (operad_arit -> DIVISION .)
    SIGNO_DOLAR     reduce using rule 50 (operad_arit -> DIVISION .)


state 74

    (51) operad_arit -> DIVISION_ENT .

    ENTERO          reduce using rule 51 (operad_arit -> DIVISION_ENT .)
    FLOTANTE        reduce using rule 51 (operad_arit -> DIVISION_ENT .)
    SIGNO_DOLAR     reduce using rule 51 (operad_arit -> DIVISION_ENT .)


state 75

    (52) operad_arit -> POTENCIA .

    ENTERO          reduce using rule 52 (operad_arit -> POTENCIA .)
    FLOTANTE        reduce using rule 52 (operad_arit -> POTENCIA .)
    SIGNO_DOLAR     reduce using rule 52 (operad_arit -> POTENCIA .)


state 76

    (53) operad_arit -> MODULO .

    ENTERO          reduce using rule 53 (operad_arit -> MODULO .)
    FLOTANTE        reduce using rule 53 (operad_arit -> MODULO .)
    SIGNO_DOLAR     reduce using rule 53 (operad_arit -> MODULO .)


state 77

    (13) decl_variable -> SIGNO_DOLAR VARIABLE .
    (127) paraCalculos -> SIGNO_DOLAR VARIABLE .

    IGUAL           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_CONCA      reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_OBJ        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SUMA            reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RESTA           reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MULTIPL         reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION_ENT    reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    POTENCIA        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MODULO          reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)


state 78

    (79) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    RETURN          reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    VARIABLE        reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 79 (if_else -> if_else_inicio if_else_fin .)


state 79

    (80) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (84) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 80

    if_else_fin                    shift and go to state 120

state 80

    (84) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 121


state 81

    (82) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 122


state 82

    (67) for -> FOR PAREN_IZQ . asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 58

    asignacion                     shift and go to state 123
    decl_variable                  shift and go to state 124

state 83

    (108) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 58

    decl_variable                  shift and go to state 125

state 84

    (98) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (123) functConPar -> FUNCTION VARIABLE . PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 126


state 85

    (72) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 127


state 86

    (73) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 128


state 87

    (81) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (85) op_logica -> . ENTERO operad_log ENTERO
    (86) op_logica -> . FLOTANTE operad_log FLOTANTE
    (87) op_logica -> . STRING operad_log STRING
    (88) op_logica -> . BOOLEANO
    (89) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (90) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (91) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 130
    FLOTANTE        shift and go to state 131
    STRING          shift and go to state 132
    BOOLEANO        shift and go to state 133
    SIGNO_DOLAR     shift and go to state 134

    op_logica                      shift and go to state 129

state 88

    (116) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 135


state 89

    (14) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 136


state 90

    (116) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (112) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 137


state 91

    (15) valor -> datos .

    PUNTO_COMA      reduce using rule 15 (valor -> datos .)
    PAREN_DER       reduce using rule 15 (valor -> datos .)


state 92

    (16) valor -> pila .

    PUNTO_COMA      reduce using rule 16 (valor -> pila .)
    PAREN_DER       reduce using rule 16 (valor -> pila .)


state 93

    (17) valor -> cola .

    PUNTO_COMA      reduce using rule 17 (valor -> cola .)
    PAREN_DER       reduce using rule 17 (valor -> cola .)


state 94

    (18) valor -> arreglo .

    PUNTO_COMA      reduce using rule 18 (valor -> arreglo .)
    PAREN_DER       reduce using rule 18 (valor -> arreglo .)


state 95

    (22) datos -> STRING .

    PUNTO_COMA      reduce using rule 22 (datos -> STRING .)
    PAREN_DER       reduce using rule 22 (datos -> STRING .)
    COMA            reduce using rule 22 (datos -> STRING .)
    FLECHA          reduce using rule 22 (datos -> STRING .)


state 96

    (100) concatenacion -> decl_variable ASIG_CONCA datos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 138


state 97

    (93) op_pila -> decl_variable ASIG_OBJ operad_pila .

    $end            reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    LLAVE_DER       reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    VARIABLE        reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    RETURN          reduce using rule 93 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 98

    (94) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 139


state 99

    (95) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 140


state 100

    (96) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 141


state 101

    (97) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 142


state 102

    (29) salida -> ECHO salidas_pos PUNTO_COMA .

    $end            reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 29 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 103

    (13) decl_variable -> SIGNO_DOLAR VARIABLE .

    PUNTO_COMA      reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IGUAL           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 104

    (30) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 143


state 105

    (31) salida -> PRINT salidas_pos PUNTO_COMA .

    $end            reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 31 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 106

    (102) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 144


state 107

    (124) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 145


state 108

    (119) parametrosR -> parametros .
    (120) parametrosR -> parametros . repite_parametros
    (121) repite_parametros -> . COMA parametros
    (122) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 119 (parametrosR -> parametros .)
    COMA            shift and go to state 147

    repite_parametros              shift and go to state 146

state 109

    (117) parametros -> datos .

    COMA            reduce using rule 117 (parametros -> datos .)
    PAREN_DER       reduce using rule 117 (parametros -> datos .)


state 110

    (118) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 148


state 111

    (101) conca_string -> STRING PUNTO STRING .

    ENTERO          reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    FLOTANTE        reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    STRING          reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    BOOLEANO        reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    SIGNO_DOLAR     reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    $end            reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    PUNTO_COMA      reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    ECHO            reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    PRINT           reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    PRINT_R         reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    RETURN          reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    FOR             reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    WHILE           reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    IF              reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    NEW             reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    LLAVE_DER       reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    VARIABLE        reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    ARRAY           reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    FUNCTION        reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    MENOR_IGUAL     reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    MAYOR_IGUAL     reduce using rule 101 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 101 (conca_string -> STRING PUNTO STRING .)


state 112

    (92) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 149


state 113

    (66) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 150


state 114

    (112) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 151


state 115

    (109) valores -> datos . repite_valores
    (110) repite_valores -> . COMA datos
    (111) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 153

    repite_valores                 shift and go to state 152

state 116

    (128) combinarOp -> operad_arit paraCalculos .
    (129) combinarOp -> operad_arit paraCalculos . combinarOp
    (128) combinarOp -> . operad_arit paraCalculos
    (129) combinarOp -> . operad_arit paraCalculos combinarOp
    (47) operad_arit -> . SUMA
    (48) operad_arit -> . RESTA
    (49) operad_arit -> . MULTIPL
    (50) operad_arit -> . DIVISION
    (51) operad_arit -> . DIVISION_ENT
    (52) operad_arit -> . POTENCIA
    (53) operad_arit -> . MODULO

    $end            reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    PUNTO_COMA      reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    PAREN_DER       reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    LLAVE_DER       reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    ECHO            reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    PRINT           reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    PRINT_R         reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    VARIABLE        reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    ENTERO          reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    FLOTANTE        reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    STRING          reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    BOOLEANO        reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    NEW             reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    ARRAY           reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    SIGNO_DOLAR     reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    FOR             reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    WHILE           reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    FUNCTION        reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    MENOR_IGUAL     reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    MAYOR_IGUAL     reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    IF              reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    RETURN          reduce using rule 128 (combinarOp -> operad_arit paraCalculos .)
    SUMA            shift and go to state 70
    RESTA           shift and go to state 71
    MULTIPL         shift and go to state 72
    DIVISION        shift and go to state 73
    DIVISION_ENT    shift and go to state 74
    POTENCIA        shift and go to state 75
    MODULO          shift and go to state 76

    operad_arit                    shift and go to state 69
    combinarOp                     shift and go to state 154

state 117

    (125) paraCalculos -> ENTERO .

    SUMA            reduce using rule 125 (paraCalculos -> ENTERO .)
    RESTA           reduce using rule 125 (paraCalculos -> ENTERO .)
    MULTIPL         reduce using rule 125 (paraCalculos -> ENTERO .)
    DIVISION        reduce using rule 125 (paraCalculos -> ENTERO .)
    DIVISION_ENT    reduce using rule 125 (paraCalculos -> ENTERO .)
    POTENCIA        reduce using rule 125 (paraCalculos -> ENTERO .)
    MODULO          reduce using rule 125 (paraCalculos -> ENTERO .)
    $end            reduce using rule 125 (paraCalculos -> ENTERO .)
    PUNTO_COMA      reduce using rule 125 (paraCalculos -> ENTERO .)
    PAREN_DER       reduce using rule 125 (paraCalculos -> ENTERO .)
    LLAVE_DER       reduce using rule 125 (paraCalculos -> ENTERO .)
    ECHO            reduce using rule 125 (paraCalculos -> ENTERO .)
    PRINT           reduce using rule 125 (paraCalculos -> ENTERO .)
    PRINT_R         reduce using rule 125 (paraCalculos -> ENTERO .)
    VARIABLE        reduce using rule 125 (paraCalculos -> ENTERO .)
    ENTERO          reduce using rule 125 (paraCalculos -> ENTERO .)
    FLOTANTE        reduce using rule 125 (paraCalculos -> ENTERO .)
    STRING          reduce using rule 125 (paraCalculos -> ENTERO .)
    BOOLEANO        reduce using rule 125 (paraCalculos -> ENTERO .)
    NEW             reduce using rule 125 (paraCalculos -> ENTERO .)
    ARRAY           reduce using rule 125 (paraCalculos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 125 (paraCalculos -> ENTERO .)
    FOR             reduce using rule 125 (paraCalculos -> ENTERO .)
    WHILE           reduce using rule 125 (paraCalculos -> ENTERO .)
    FUNCTION        reduce using rule 125 (paraCalculos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 125 (paraCalculos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 125 (paraCalculos -> ENTERO .)
    IF              reduce using rule 125 (paraCalculos -> ENTERO .)
    RETURN          reduce using rule 125 (paraCalculos -> ENTERO .)


state 118

    (126) paraCalculos -> FLOTANTE .

    SUMA            reduce using rule 126 (paraCalculos -> FLOTANTE .)
    RESTA           reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MULTIPL         reduce using rule 126 (paraCalculos -> FLOTANTE .)
    DIVISION        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    DIVISION_ENT    reduce using rule 126 (paraCalculos -> FLOTANTE .)
    POTENCIA        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MODULO          reduce using rule 126 (paraCalculos -> FLOTANTE .)
    $end            reduce using rule 126 (paraCalculos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 126 (paraCalculos -> FLOTANTE .)
    PAREN_DER       reduce using rule 126 (paraCalculos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 126 (paraCalculos -> FLOTANTE .)
    ECHO            reduce using rule 126 (paraCalculos -> FLOTANTE .)
    PRINT           reduce using rule 126 (paraCalculos -> FLOTANTE .)
    PRINT_R         reduce using rule 126 (paraCalculos -> FLOTANTE .)
    VARIABLE        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    ENTERO          reduce using rule 126 (paraCalculos -> FLOTANTE .)
    FLOTANTE        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    STRING          reduce using rule 126 (paraCalculos -> FLOTANTE .)
    BOOLEANO        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    NEW             reduce using rule 126 (paraCalculos -> FLOTANTE .)
    ARRAY           reduce using rule 126 (paraCalculos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 126 (paraCalculos -> FLOTANTE .)
    FOR             reduce using rule 126 (paraCalculos -> FLOTANTE .)
    WHILE           reduce using rule 126 (paraCalculos -> FLOTANTE .)
    FUNCTION        reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 126 (paraCalculos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 126 (paraCalculos -> FLOTANTE .)
    IF              reduce using rule 126 (paraCalculos -> FLOTANTE .)
    RETURN          reduce using rule 126 (paraCalculos -> FLOTANTE .)


state 119

    (127) paraCalculos -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 155


state 120

    (80) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    RETURN          reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    VARIABLE        reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 80 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 121

    (84) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    bloque                         shift and go to state 156
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 122

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (85) op_logica -> . ENTERO operad_log ENTERO
    (86) op_logica -> . FLOTANTE operad_log FLOTANTE
    (87) op_logica -> . STRING operad_log STRING
    (88) op_logica -> . BOOLEANO
    (89) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (90) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (91) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 130
    FLOTANTE        shift and go to state 131
    STRING          shift and go to state 132
    BOOLEANO        shift and go to state 133
    SIGNO_DOLAR     shift and go to state 134

    op_logica                      shift and go to state 166

state 123

    (67) for -> FOR PAREN_IZQ asignacion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 168

    declaracionp                   shift and go to state 167

state 124

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 169


state 125

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (41) operad_log -> . IDENTICO
    (42) operad_log -> . DIFERENTE
    (43) operad_log -> . MAYOR_QUE
    (44) operad_log -> . MAYOR_IGUAL
    (45) operad_log -> . MENOR_QUE
    (46) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 171
    DIFERENTE       shift and go to state 172
    MAYOR_QUE       shift and go to state 173
    MAYOR_IGUAL     shift and go to state 174
    MENOR_QUE       shift and go to state 175
    MENOR_IGUAL     shift and go to state 176

    operad_log                     shift and go to state 170

state 126

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ . parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (119) parametrosR -> . parametros
    (120) parametrosR -> . parametros repite_parametros
    (117) parametros -> . datos
    (118) parametros -> . SIGNO_DOLAR VARIABLE
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    TRES_PUNTOS     shift and go to state 177
    SIGNO_DOLAR     shift and go to state 178
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    parametrosR                    shift and go to state 179
    parametros                     shift and go to state 108
    datos                          shift and go to state 109

state 127

    (72) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 72 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 128

    (73) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 73 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 129

    (81) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 180


state 130

    (85) op_logica -> ENTERO . operad_log ENTERO
    (41) operad_log -> . IDENTICO
    (42) operad_log -> . DIFERENTE
    (43) operad_log -> . MAYOR_QUE
    (44) operad_log -> . MAYOR_IGUAL
    (45) operad_log -> . MENOR_QUE
    (46) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 171
    DIFERENTE       shift and go to state 172
    MAYOR_QUE       shift and go to state 173
    MAYOR_IGUAL     shift and go to state 174
    MENOR_QUE       shift and go to state 175
    MENOR_IGUAL     shift and go to state 176

    operad_log                     shift and go to state 181

state 131

    (86) op_logica -> FLOTANTE . operad_log FLOTANTE
    (41) operad_log -> . IDENTICO
    (42) operad_log -> . DIFERENTE
    (43) operad_log -> . MAYOR_QUE
    (44) operad_log -> . MAYOR_IGUAL
    (45) operad_log -> . MENOR_QUE
    (46) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 171
    DIFERENTE       shift and go to state 172
    MAYOR_QUE       shift and go to state 173
    MAYOR_IGUAL     shift and go to state 174
    MENOR_QUE       shift and go to state 175
    MENOR_IGUAL     shift and go to state 176

    operad_log                     shift and go to state 182

state 132

    (87) op_logica -> STRING . operad_log STRING
    (41) operad_log -> . IDENTICO
    (42) operad_log -> . DIFERENTE
    (43) operad_log -> . MAYOR_QUE
    (44) operad_log -> . MAYOR_IGUAL
    (45) operad_log -> . MENOR_QUE
    (46) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 171
    DIFERENTE       shift and go to state 172
    MAYOR_QUE       shift and go to state 173
    MAYOR_IGUAL     shift and go to state 174
    MENOR_QUE       shift and go to state 175
    MENOR_IGUAL     shift and go to state 176

    operad_log                     shift and go to state 183

state 133

    (88) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 88 (op_logica -> BOOLEANO .)


state 134

    (89) op_logica -> SIGNO_DOLAR . VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (90) op_logica -> SIGNO_DOLAR . VARIABLE operad_log ENTERO
    (91) op_logica -> SIGNO_DOLAR . VARIABLE operad_log FLOTANTE

    VARIABLE        shift and go to state 184


state 135

    (116) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 185


state 136

    (14) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    $end            reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    RETURN          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    VARIABLE        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 137

    (116) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (112) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (113) valoresflecha -> . datos FLECHA datos repite_valores_f
    (109) valores -> . datos repite_valores
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    valoresflecha                  shift and go to state 186
    valores                        shift and go to state 114
    datos                          shift and go to state 187

state 138

    (100) concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .

    $end            reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ECHO            reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT           reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT_R         reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    VARIABLE        reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ENTERO          reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FLOTANTE        reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    STRING          reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    BOOLEANO        reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    NEW             reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ARRAY           reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FOR             reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    WHILE           reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FUNCTION        reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    IF              reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    RETURN          reduce using rule 100 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)


state 139

    (94) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 188

state 140

    (95) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 189


state 141

    (96) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 190


state 142

    (97) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 191


state 143

    (30) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 192


state 144

    (102) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 193


state 145

    (124) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 194


state 146

    (120) parametrosR -> parametros repite_parametros .

    PAREN_DER       reduce using rule 120 (parametrosR -> parametros repite_parametros .)


state 147

    (121) repite_parametros -> COMA . parametros
    (122) repite_parametros -> COMA . parametros repite_parametros
    (117) parametros -> . datos
    (118) parametros -> . SIGNO_DOLAR VARIABLE
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 110
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    parametros                     shift and go to state 195
    datos                          shift and go to state 109

state 148

    (118) parametros -> SIGNO_DOLAR VARIABLE .

    COMA            reduce using rule 118 (parametros -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 118 (parametros -> SIGNO_DOLAR VARIABLE .)


state 149

    (92) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 92 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 150

    (66) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 66 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 151

    (112) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    $end            reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    LLAVE_DER       reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    VARIABLE        reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    RETURN          reduce using rule 112 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 152

    (109) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 109 (valores -> datos repite_valores .)


state 153

    (110) repite_valores -> COMA . datos
    (111) repite_valores -> COMA . datos repite_valores
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 196

state 154

    (129) combinarOp -> operad_arit paraCalculos combinarOp .

    $end            reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PUNTO_COMA      reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PAREN_DER       reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    LLAVE_DER       reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ECHO            reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PRINT           reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PRINT_R         reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    VARIABLE        reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ENTERO          reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FLOTANTE        reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    STRING          reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    BOOLEANO        reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    NEW             reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ARRAY           reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    SIGNO_DOLAR     reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FOR             reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    WHILE           reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FUNCTION        reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    MENOR_IGUAL     reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    MAYOR_IGUAL     reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    IF              reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)
    RETURN          reduce using rule 129 (combinarOp -> operad_arit paraCalculos combinarOp .)


state 155

    (127) paraCalculos -> SIGNO_DOLAR VARIABLE .

    SUMA            reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RESTA           reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MULTIPL         reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION_ENT    reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    POTENCIA        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MODULO          reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PUNTO_COMA      reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 127 (paraCalculos -> SIGNO_DOLAR VARIABLE .)


state 156

    (84) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 197


state 157

    (54) bloque -> asignacion .
    (58) bloque -> asignacion . bloque
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 54 (bloque -> asignacion .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    asignacion                     shift and go to state 157
    bloque                         shift and go to state 198
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 158

    (55) bloque -> salida .
    (59) bloque -> salida . bloque
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 55 (bloque -> salida .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    salida                         shift and go to state 158
    bloque                         shift and go to state 199
    asignacion                     shift and go to state 157
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 159

    (56) bloque -> retorno .
    (60) bloque -> retorno . bloque
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 56 (bloque -> retorno .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    retorno                        shift and go to state 159
    bloque                         shift and go to state 200
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 160

    (57) bloque -> estructuras_control .
    (61) bloque -> estructuras_control . bloque
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 57 (bloque -> estructuras_control .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    estructuras_control            shift and go to state 160
    bloque                         shift and go to state 201
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 161

    (62) bloque -> multiples .
    (63) bloque -> multiples . bloque
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 62 (bloque -> multiples .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    multiples                      shift and go to state 161
    bloque                         shift and go to state 202
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 162

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (25) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 169
    ENTERO          reduce using rule 25 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 25 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 25 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 25 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 25 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 25 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 25 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 25 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 25 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 25 (salidas_pos -> decl_variable .)
    IF              reduce using rule 25 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 25 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 25 (salidas_pos -> decl_variable .)


state 163

    (99) retorno -> RETURN . salidas_pos PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (101) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    SIGNO_DOLAR     shift and go to state 58

    salidas_pos                    shift and go to state 203
    datos                          shift and go to state 54
    decl_variable                  shift and go to state 55
    conca_string                   shift and go to state 47

state 164

    (68) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 204


state 165

    (66) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 66


state 166

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 205


state 167

    (67) for -> FOR PAREN_IZQ asignacion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (76) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 207

    declaracion_s                  shift and go to state 206

state 168

    (71) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 208


state 169

    (14) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40

    decl_variable                  shift and go to state 88
    valor                          shift and go to state 89
    datos                          shift and go to state 91
    pila                           shift and go to state 92
    cola                           shift and go to state 93
    arreglo                        shift and go to state 94
    opAritVar                      shift and go to state 18
    paraCalculos                   shift and go to state 39

state 170

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40

    decl_variable                  shift and go to state 88
    valor                          shift and go to state 209
    datos                          shift and go to state 91
    pila                           shift and go to state 92
    cola                           shift and go to state 93
    arreglo                        shift and go to state 94
    opAritVar                      shift and go to state 18
    paraCalculos                   shift and go to state 39

state 171

    (41) operad_log -> IDENTICO .

    ENTERO          reduce using rule 41 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 41 (operad_log -> IDENTICO .)
    STRING          reduce using rule 41 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 41 (operad_log -> IDENTICO .)
    NEW             reduce using rule 41 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 41 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 41 (operad_log -> IDENTICO .)


state 172

    (42) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 42 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 42 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 42 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 42 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 42 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 42 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 42 (operad_log -> DIFERENTE .)


state 173

    (43) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 43 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 43 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 43 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 43 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 43 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 43 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 43 (operad_log -> MAYOR_QUE .)


state 174

    (44) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 44 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 44 (operad_log -> MAYOR_IGUAL .)


state 175

    (45) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 45 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 45 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 45 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 45 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 45 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 45 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 45 (operad_log -> MENOR_QUE .)


state 176

    (46) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 46 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 46 (operad_log -> MENOR_IGUAL .)


state 177

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 58

    decl_variable                  shift and go to state 210

state 178

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (118) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 211


state 179

    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 212


state 180

    (81) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 213


state 181

    (85) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 214


state 182

    (86) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 215


state 183

    (87) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 216


state 184

    (89) op_logica -> SIGNO_DOLAR VARIABLE . operad_log SIGNO_DOLAR VARIABLE
    (90) op_logica -> SIGNO_DOLAR VARIABLE . operad_log ENTERO
    (91) op_logica -> SIGNO_DOLAR VARIABLE . operad_log FLOTANTE
    (41) operad_log -> . IDENTICO
    (42) operad_log -> . DIFERENTE
    (43) operad_log -> . MAYOR_QUE
    (44) operad_log -> . MAYOR_IGUAL
    (45) operad_log -> . MENOR_QUE
    (46) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 171
    DIFERENTE       shift and go to state 172
    MAYOR_QUE       shift and go to state 173
    MAYOR_IGUAL     shift and go to state 174
    MENOR_QUE       shift and go to state 175
    MENOR_IGUAL     shift and go to state 176

    operad_log                     shift and go to state 217

state 185

    (116) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 218


state 186

    (116) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 219


state 187

    (113) valoresflecha -> datos . FLECHA datos repite_valores_f
    (109) valores -> datos . repite_valores
    (110) repite_valores -> . COMA datos
    (111) repite_valores -> . COMA datos repite_valores

    FLECHA          shift and go to state 220
    COMA            shift and go to state 153

    repite_valores                 shift and go to state 152

state 188

    (94) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 221


state 189

    (95) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 222


state 190

    (96) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 223


state 191

    (97) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 224


state 192

    (30) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 30 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 193

    (102) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    $end            reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 102 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 194

    (124) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .

    $end            reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 124 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)


state 195

    (121) repite_parametros -> COMA parametros .
    (122) repite_parametros -> COMA parametros . repite_parametros
    (121) repite_parametros -> . COMA parametros
    (122) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 121 (repite_parametros -> COMA parametros .)
    COMA            shift and go to state 147

    repite_parametros              shift and go to state 225

state 196

    (110) repite_valores -> COMA datos .
    (111) repite_valores -> COMA datos . repite_valores
    (110) repite_valores -> . COMA datos
    (111) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 110 (repite_valores -> COMA datos .)
    COMA            shift and go to state 153

    repite_valores                 shift and go to state 226

state 197

    (84) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 84 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 198

    (58) bloque -> asignacion bloque .

    LLAVE_DER       reduce using rule 58 (bloque -> asignacion bloque .)


state 199

    (59) bloque -> salida bloque .

    LLAVE_DER       reduce using rule 59 (bloque -> salida bloque .)


state 200

    (60) bloque -> retorno bloque .

    LLAVE_DER       reduce using rule 60 (bloque -> retorno bloque .)


state 201

    (61) bloque -> estructuras_control bloque .

    LLAVE_DER       reduce using rule 61 (bloque -> estructuras_control bloque .)


state 202

    (63) bloque -> multiples bloque .

    LLAVE_DER       reduce using rule 63 (bloque -> multiples bloque .)


state 203

    (99) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 227


state 204

    (68) for -> cola LLAVE_DER .

    ECHO            reduce using rule 68 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 68 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 68 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 68 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 68 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 68 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 68 (for -> cola LLAVE_DER .)
    IF              reduce using rule 68 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 68 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 68 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 68 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 68 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 68 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 68 (for -> cola LLAVE_DER .)


state 205

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 228


state 206

    (67) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 229


state 207

    (76) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 230


state 208

    (71) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (74) valorc -> . menor
    (75) valorc -> . mayor
    (72) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (73) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 45
    MAYOR_IGUAL     shift and go to state 46

    valorc                         shift and go to state 231
    menor                          shift and go to state 30
    mayor                          shift and go to state 31

state 209

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 232


state 210

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 233


state 211

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (118) parametros -> SIGNO_DOLAR VARIABLE .

  ! shift/reduce conflict for PAREN_DER resolved as shift
    PAREN_DER       shift and go to state 234
    COMA            reduce using rule 118 (parametros -> SIGNO_DOLAR VARIABLE .)

  ! PAREN_DER       [ reduce using rule 118 (parametros -> SIGNO_DOLAR VARIABLE .) ]


state 212

    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 235


state 213

    (81) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    bloque                         shift and go to state 236
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 214

    (85) op_logica -> ENTERO operad_log ENTERO .

    PAREN_DER       reduce using rule 85 (op_logica -> ENTERO operad_log ENTERO .)


state 215

    (86) op_logica -> FLOTANTE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 86 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 216

    (87) op_logica -> STRING operad_log STRING .

    PAREN_DER       reduce using rule 87 (op_logica -> STRING operad_log STRING .)


state 217

    (89) op_logica -> SIGNO_DOLAR VARIABLE operad_log . SIGNO_DOLAR VARIABLE
    (90) op_logica -> SIGNO_DOLAR VARIABLE operad_log . ENTERO
    (91) op_logica -> SIGNO_DOLAR VARIABLE operad_log . FLOTANTE

    SIGNO_DOLAR     shift and go to state 237
    ENTERO          shift and go to state 238
    FLOTANTE        shift and go to state 239


state 218

    (116) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (113) valoresflecha -> . datos FLECHA datos repite_valores_f
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    valoresflecha                  shift and go to state 186
    datos                          shift and go to state 240

state 219

    (116) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 241


state 220

    (113) valoresflecha -> datos FLECHA . datos repite_valores_f
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 242

state 221

    (94) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 243


state 222

    (95) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 95 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 223

    (96) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 96 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 224

    (97) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 97 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 225

    (122) repite_parametros -> COMA parametros repite_parametros .

    PAREN_DER       reduce using rule 122 (repite_parametros -> COMA parametros repite_parametros .)


state 226

    (111) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 111 (repite_valores -> COMA datos repite_valores .)


state 227

    (99) retorno -> RETURN salidas_pos PUNTO_COMA .

    ECHO            reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    IF              reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 99 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 228

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    bloque                         shift and go to state 244
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 229

    (67) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 245


state 230

    (76) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (77) crecimiento -> . INCREMENTO
    (78) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 247
    DECREMENTO      shift and go to state 248

    crecimiento                    shift and go to state 246

state 231

    (71) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    SIGNO_DOLAR     reduce using rule 71 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 232

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 249


state 233

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 250


state 234

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 251


state 235

    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    bloque                         shift and go to state 252
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    decl_variable                  shift and go to state 162
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 236

    (81) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 253


state 237

    (89) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 254


state 238

    (90) op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .

    PAREN_DER       reduce using rule 90 (op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .)


state 239

    (91) op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 91 (op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .)


state 240

    (113) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 220


state 241

    (116) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 116 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 242

    (113) valoresflecha -> datos FLECHA datos . repite_valores_f
    (114) repite_valores_f -> . COMA datos FLECHA datos
    (115) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 256

    repite_valores_f               shift and go to state 255

state 243

    (94) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 94 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 244

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 257


state 245

    (67) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (69) sentenciasAnidadas -> . instrucciones
    (70) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (100) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (40) funciones -> . functConPar
    (93) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (74) valorc -> . menor
    (75) valorc -> . mayor
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (124) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (98) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) sinRetorno -> . cola LLAVE_DER
    (123) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (72) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (73) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    VARIABLE        shift and go to state 32
    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    FUNCTION        shift and go to state 44
    MENOR_IGUAL     shift and go to state 45
    MAYOR_IGUAL     shift and go to state 46
    IF              shift and go to state 48

    asignacion                     shift and go to state 3
    sentenciasAnidadas             shift and go to state 258
    instrucciones                  shift and go to state 259
    valor                          shift and go to state 2
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    opAritVar                      shift and go to state 18
    decl_variable                  shift and go to state 19
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    funcion_variable               shift and go to state 27
    sinRetorno                     shift and go to state 28
    functConPar                    shift and go to state 29
    menor                          shift and go to state 30
    mayor                          shift and go to state 31
    paraCalculos                   shift and go to state 39
    if_else_inicio                 shift and go to state 41
    conca_string                   shift and go to state 47

state 246

    (76) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    PAREN_DER       reduce using rule 76 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 247

    (77) crecimiento -> INCREMENTO .

    PAREN_DER       reduce using rule 77 (crecimiento -> INCREMENTO .)


state 248

    (78) crecimiento -> DECREMENTO .

    PAREN_DER       reduce using rule 78 (crecimiento -> DECREMENTO .)


state 249

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (106) contenido -> . bloque
    (107) contenido -> . sinRetorno
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (64) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) sinRetorno -> . cola LLAVE_DER
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    FUNCTION        shift and go to state 263
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    NEW             shift and go to state 165
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    decl_variable                  shift and go to state 162
    contenido                      shift and go to state 260
    bloque                         shift and go to state 261
    sinRetorno                     shift and go to state 262
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    cola                           shift and go to state 264
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 250

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (54) bloque -> . asignacion
    (55) bloque -> . salida
    (56) bloque -> . retorno
    (57) bloque -> . estructuras_control
    (58) bloque -> . asignacion bloque
    (59) bloque -> . salida bloque
    (60) bloque -> . retorno bloque
    (61) bloque -> . estructuras_control bloque
    (62) bloque -> . multiples
    (63) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (99) retorno -> . RETURN salidas_pos PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (101) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    RETURN          shift and go to state 163
    SIGNO_DOLAR     shift and go to state 58
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    IF              shift and go to state 48
    NEW             shift and go to state 165
    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36

    decl_variable                  shift and go to state 162
    bloque                         shift and go to state 265
    asignacion                     shift and go to state 157
    salida                         shift and go to state 158
    retorno                        shift and go to state 159
    estructuras_control            shift and go to state 160
    multiples                      shift and go to state 161
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    if_else_inicio                 shift and go to state 41
    cola                           shift and go to state 164
    datos                          shift and go to state 54
    conca_string                   shift and go to state 47

state 251

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (69) sentenciasAnidadas -> . instrucciones
    (70) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (100) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (40) funciones -> . functConPar
    (93) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (74) valorc -> . menor
    (75) valorc -> . mayor
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (124) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (98) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) sinRetorno -> . cola LLAVE_DER
    (123) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (72) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (73) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (101) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    VARIABLE        shift and go to state 32
    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    FUNCTION        shift and go to state 44
    MENOR_IGUAL     shift and go to state 45
    MAYOR_IGUAL     shift and go to state 46
    IF              shift and go to state 48

    sentenciasAnidadas             shift and go to state 266
    instrucciones                  shift and go to state 259
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    opAritVar                      shift and go to state 18
    decl_variable                  shift and go to state 19
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    funcion_variable               shift and go to state 27
    sinRetorno                     shift and go to state 28
    functConPar                    shift and go to state 29
    menor                          shift and go to state 30
    mayor                          shift and go to state 31
    paraCalculos                   shift and go to state 39
    if_else_inicio                 shift and go to state 41
    conca_string                   shift and go to state 47

state 252

    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 267


state 253

    (81) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 81 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 81 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 254

    (89) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .

    PAREN_DER       reduce using rule 89 (op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .)


state 255

    (113) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 113 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 256

    (114) repite_valores_f -> COMA . datos FLECHA datos
    (115) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 268

state 257

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (82) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (83) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 82 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 81

    if_else_cuerpo                 shift and go to state 269

state 258

    (67) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 67 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 259

    (69) sentenciasAnidadas -> instrucciones .
    (70) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (69) sentenciasAnidadas -> . instrucciones
    (70) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) valor -> . opAritVar
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (100) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (29) salida -> . ECHO salidas_pos PUNTO_COMA
    (30) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (31) salida -> . PRINT salidas_pos PUNTO_COMA
    (102) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (32) estructuras_control -> . if_else
    (33) estructuras_control -> . for
    (34) estructuras_control -> . whileDeclaracion
    (35) estructuras_datos -> . pila
    (36) estructuras_datos -> . cola
    (37) estructuras_datos -> . arreglo
    (38) funciones -> . funcion_variable
    (39) funciones -> . sinRetorno
    (40) funciones -> . functConPar
    (93) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (74) valorc -> . menor
    (75) valorc -> . mayor
    (27) multiples -> . salidas_pos
    (28) multiples -> . salidas_pos multiples
    (124) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (92) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (66) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (112) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (116) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (130) opAritVar -> . paraCalculos combinarOp
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (79) if_else -> . if_else_inicio if_else_fin
    (80) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (67) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) for -> . cola LLAVE_DER
    (108) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (98) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (64) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (65) sinRetorno -> . cola LLAVE_DER
    (123) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (72) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (73) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (24) salidas_pos -> . datos
    (25) salidas_pos -> . decl_variable
    (26) salidas_pos -> . conca_string
    (125) paraCalculos -> . ENTERO
    (126) paraCalculos -> . FLOTANTE
    (127) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (81) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (101) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 69 (sentenciasAnidadas -> instrucciones .)
    RETURN          reduce using rule 69 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 20
    PRINT           shift and go to state 22
    PRINT_R         shift and go to state 23
    VARIABLE        shift and go to state 32
    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    STRING          shift and go to state 35
    BOOLEANO        shift and go to state 36
    NEW             shift and go to state 37
    ARRAY           shift and go to state 38
    SIGNO_DOLAR     shift and go to state 40
    FOR             shift and go to state 42
    WHILE           shift and go to state 43
    FUNCTION        shift and go to state 44
    MENOR_IGUAL     shift and go to state 45
    MAYOR_IGUAL     shift and go to state 46
    IF              shift and go to state 48

  ! LLAVE_DER       [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! VARIABLE        [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 69 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 259
    sentenciasAnidadas             shift and go to state 270
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    opAritVar                      shift and go to state 18
    decl_variable                  shift and go to state 19
    salidas_pos                    shift and go to state 21
    if_else                        shift and go to state 24
    for                            shift and go to state 25
    whileDeclaracion               shift and go to state 26
    funcion_variable               shift and go to state 27
    sinRetorno                     shift and go to state 28
    functConPar                    shift and go to state 29
    menor                          shift and go to state 30
    mayor                          shift and go to state 31
    paraCalculos                   shift and go to state 39
    if_else_inicio                 shift and go to state 41
    conca_string                   shift and go to state 47

state 260

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 271


state 261

    (106) contenido -> bloque .

    LLAVE_DER       reduce using rule 106 (contenido -> bloque .)


state 262

    (107) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 107 (contenido -> sinRetorno .)


state 263

    (64) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 272


state 264

    (65) sinRetorno -> cola . LLAVE_DER
    (68) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 273


state 265

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 274


state 266

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 64 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 267

    (123) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 123 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 268

    (114) repite_valores_f -> COMA datos . FLECHA datos
    (115) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 275


state 269

    (83) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 83 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 270

    (70) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    VARIABLE        reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    RETURN          reduce using rule 70 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 271

    (108) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    RETURN          reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    VARIABLE        reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 108 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 272

    (64) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 276


state 273

    (65) sinRetorno -> cola LLAVE_DER .
    (68) for -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 65 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 65 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 68 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 68 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 68 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 68 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 68 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 68 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 68 (for -> cola LLAVE_DER .)
    IF              reduce using rule 68 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 68 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 68 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 68 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 68 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 68 (for -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 68 (for -> cola LLAVE_DER .) ]


state 274

    (98) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 98 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 275

    (114) repite_valores_f -> COMA datos FLECHA . datos
    (115) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 56
    FLOTANTE        shift and go to state 57
    STRING          shift and go to state 95
    BOOLEANO        shift and go to state 36

    datos                          shift and go to state 277

state 276

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    SIGNO_DOLAR     shift and go to state 278


state 277

    (114) repite_valores_f -> COMA datos FLECHA datos .
    (115) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (110) repite_valores -> . COMA datos
    (111) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 114 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 153

    repite_valores                 shift and go to state 279

state 278

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 280


state 279

    (115) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 115 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)


state 280

    (64) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 234

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 16 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING in state 21 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 21 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 21 resolved as shift
WARNING: shift/reduce conflict for PAREN_DER in state 211 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 259 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 259 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 259 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 259 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 259 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 259 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 259 resolved as shift
WARNING: shift/reduce conflict for STRING in state 259 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 259 resolved as shift
WARNING: shift/reduce conflict for NEW in state 259 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 259 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 259 resolved as shift
WARNING: shift/reduce conflict for FOR in state 259 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 259 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 259 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 259 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 259 resolved as shift
WARNING: shift/reduce conflict for IF in state 259 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (valor -> datos)
WARNING: rejected rule (salidas_pos -> datos) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 15
WARNING: reduce/reduce conflict in state 16 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 16
WARNING: reduce/reduce conflict in state 17 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 17
WARNING: reduce/reduce conflict in state 49 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 49
WARNING: reduce/reduce conflict in state 273 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 273
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
