Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_CONCA
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DIVISION
    DIVISION_ENT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    ESPACIO
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    MODULO
    MULTIPL
    NAMESPACE
    OR
    OR_SYMB
    POTENCIA
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SUMA
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> salida
Rule 4     instrucciones -> prueba
Rule 5     instrucciones -> estructuras_control
Rule 6     instrucciones -> estructuras_datos
Rule 7     instrucciones -> funciones
Rule 8     instrucciones -> op_logica
Rule 9     instrucciones -> op_pila
Rule 10    instrucciones -> declaracion
Rule 11    instrucciones -> declaracionp
Rule 12    instrucciones -> declaracion_s
Rule 13    instrucciones -> crecimiento
Rule 14    instrucciones -> valorc
Rule 15    instrucciones -> LLAVE_DER
Rule 16    asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
Rule 17    valor -> datos
Rule 18    valor -> pila
Rule 19    valor -> cola
Rule 20    datos -> ENTERO
Rule 21    datos -> FLOTANTE
Rule 22    datos -> STRING
Rule 23    datos -> BOOLEANO
Rule 24    salida -> ECHO CADENA PUNTO_COMA
Rule 25    prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER
Rule 26    salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
Rule 27    salida -> PRINT STRING PUNTO_COMA
Rule 28    salida -> PRINT for PUNTO_COMA
Rule 29    estructuras_control -> if_else
Rule 30    estructuras_control -> for
Rule 31    estructuras_control -> whileDeclaracion
Rule 32    estructuras_datos -> pila
Rule 33    estructuras_datos -> cola
Rule 34    estructuras_datos -> arreglo
Rule 35    funciones -> funcion_variable
Rule 36    funciones -> sinRetorno
Rule 37    operad_log -> IDENTICO
Rule 38    operad_log -> DIFERENTE
Rule 39    operad_log -> MAYOR_QUE
Rule 40    operad_log -> MAYOR_IGUAL
Rule 41    operad_log -> MENOR_QUE
Rule 42    operad_log -> MENOR_IGUAL
Rule 43    bloque -> asignacion
Rule 44    bloque -> salida
Rule 45    bloque -> retorno
Rule 46    bloque -> prueba
Rule 47    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 48    sentenciasAnidadas -> instrucciones
Rule 49    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 50    for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 51    for -> cola LLAVE_DER
Rule 52    declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA
Rule 53    declaracionp -> SIGNO_DOLAR CADENA valorc
Rule 54    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 55    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 56    valorc -> menor
Rule 57    valorc -> mayor
Rule 58    declaracion_s -> SIGNO_DOLAR CADENA crecimiento
Rule 59    crecimiento -> INCREMENTO
Rule 60    crecimiento -> DECREMENTO
Rule 61    if_else -> if_else_inicio if_else_fin
Rule 62    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 63    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER
Rule 64    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER
Rule 65    if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER
Rule 66    op_logica -> ENTERO operad_log ENTERO
Rule 67    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 68    op_logica -> STRING operad_log STRING
Rule 69    op_logica -> BOOLEANO
Rule 70    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 71    op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila
Rule 72    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 73    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 74    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 75    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 76    funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 77    retorno -> RETURN SIGNO_DOLAR CADENA
Rule 78    contenido -> bloque
Rule 79    contenido -> sinRetorno
Rule 80    whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 81    valores -> valor repite_valores
Rule 82    repite_valores -> COMA valor
Rule 83    repite_valores -> COMA valor repite_valores
Rule 84    arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
Rule 85    valoresflecha -> valor FLECHA valor repite_valores_f
Rule 86    repite_valores_f -> COMA valor FLECHA valor
Rule 87    repite_valores_f -> COMA valor FLECHA valor repite_valores
Rule 88    arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 89    sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 84 88
AS                   : 
ASIG_CONCA           : 
ASIG_REFER           : 
BOOLEANO             : 23 69
BREAK                : 
CADENA               : 16 24 25 52 53 58 71 76 76 77 80 84 88 89 89
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 82 83 86 87
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 74
CURRENT              : 75
DECLARE              : 
DECREMENTO           : 60
DEFAULT              : 
DIFERENTE            : 38
DIVISION             : 
DIVISION_ENT         : 
DO                   : 
ECHO                 : 24 25
ELSE                 : 65
ELSEIF               : 64
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 20 52 54 55 66 66
ESPACIO              : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 85 86 87
FLOTANTE             : 21 67 67
FN                   : 
FOR                  : 50
FOREACH              : 
FUNCTION             : 76 89
GLOBAL               : 
IDENTICO             : 37
IF                   : 63
IGUAL                : 16 52 84 88
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 59
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 15 25 51 63 64 65 76 80 89
LLAVE_IZQ            : 50 63 64 65 76 80 89
MACHT                : 
MAYOR_IGUAL          : 40 55
MAYOR_QUE            : 39 71
MENOR_IGUAL          : 42 54
MENOR_QUE            : 41
MODULO               : 
MULTIPL              : 
NAMESPACE            : 
NEW                  : 47 70
OR                   : 
OR_SYMB              : 
PAREN_DER            : 26 47 50 63 64 70 72 73 74 75 76 80 84 88 89
PAREN_IZQ            : 26 47 50 63 64 70 72 73 74 75 76 80 84 88 89
POP                  : 73
POTENCIA             : 
PRINT                : 26 27 28
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTODOBLE           : 
PUNTO_COMA           : 16 24 25 26 27 28 52 54 55 72 73 74 75 84 88
PUSH                 : 72
QUEUE                : 47
REQUIERE             : 
RESTA                : 71
RETURN               : 77
SALTO_LINEA          : 
SIGNO_DOLAR          : 16 25 52 53 58 71 76 77 80 84 88 89
STACK                : 70
STATIC               : 
STRING               : 22 26 27 68 68
STRREV               : 
SUMA                 : 
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 76
TRY                  : 
USE                  : 
VAR                  : 
WHILE                : 80
error                : 

Nonterminals, with rules where they appear

arreglo              : 34
asignacion           : 2 43
bloque               : 76 78
cola                 : 19 33 51
contenido            : 80 89
crecimiento          : 13 58
datos                : 17 72
declaracion          : 10 50
declaracion_s        : 12 50
declaracionp         : 11 50
estructuras_control  : 5
estructuras_datos    : 6
for                  : 28 30
funcion_variable     : 35
funciones            : 7
if_else              : 29
if_else_cuerpo       : 62
if_else_fin          : 61 62
if_else_inicio       : 61 62
instrucciones        : 48 49 0
mayor                : 57
menor                : 56
op_logica            : 8 63 64
op_pila              : 9
operad_log           : 66 67 68 80
operad_pila          : 71
pila                 : 18 32
prueba               : 4 46
repite_valores       : 81 83 87
repite_valores_f     : 85
retorno              : 45
salida               : 3 44 63 64 65
sentenciasAnidadas   : 49 50
sinRetorno           : 36 79
valor                : 1 16 80 81 82 83 85 85 86 86 87 87
valorc               : 14 53
valores              : 84
valoresflecha        : 88
whileDeclaracion     : 31

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . prueba
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_logica
    (9) instrucciones -> . op_pila
    (10) instrucciones -> . declaracion
    (11) instrucciones -> . declaracionp
    (12) instrucciones -> . declaracion_s
    (13) instrucciones -> . crecimiento
    (14) instrucciones -> . valorc
    (15) instrucciones -> . LLAVE_DER
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER
    (29) estructuras_control -> . if_else
    (30) estructuras_control -> . for
    (31) estructuras_control -> . whileDeclaracion
    (32) estructuras_datos -> . pila
    (33) estructuras_datos -> . cola
    (34) estructuras_datos -> . arreglo
    (35) funciones -> . funcion_variable
    (36) funciones -> . sinRetorno
    (66) op_logica -> . ENTERO operad_log ENTERO
    (67) op_logica -> . FLOTANTE operad_log FLOTANTE
    (68) op_logica -> . STRING operad_log STRING
    (69) op_logica -> . BOOLEANO
    (71) op_pila -> . SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila
    (52) declaracion -> . SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA
    (53) declaracionp -> . SIGNO_DOLAR CADENA valorc
    (58) declaracion_s -> . SIGNO_DOLAR CADENA crecimiento
    (59) crecimiento -> . INCREMENTO
    (60) crecimiento -> . DECREMENTO
    (56) valorc -> . menor
    (57) valorc -> . mayor
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (61) if_else -> . if_else_inicio if_else_fin
    (62) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (50) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (51) for -> . cola LLAVE_DER
    (80) whileDeclaracion -> . WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (84) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (76) funcion_variable -> . FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (54) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (55) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (63) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

    LLAVE_DER       shift and go to state 16
    SIGNO_DOLAR     shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 23
    BOOLEANO        shift and go to state 32
    INCREMENTO      shift and go to state 33
    DECREMENTO      shift and go to state 34
    NEW             shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    FUNCTION        shift and go to state 41
    MENOR_IGUAL     shift and go to state 42
    MAYOR_IGUAL     shift and go to state 43
    IF              shift and go to state 44

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    prueba                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_logica                      shift and go to state 9
    op_pila                        shift and go to state 10
    declaracion                    shift and go to state 11
    declaracionp                   shift and go to state 12
    declaracion_s                  shift and go to state 13
    crecimiento                    shift and go to state 14
    valorc                         shift and go to state 15
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    for                            shift and go to state 24
    if_else                        shift and go to state 25
    whileDeclaracion               shift and go to state 26
    arreglo                        shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 35
    mayor                          shift and go to state 36
    if_else_inicio                 shift and go to state 38

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .

    $end            reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    INCREMENTO      reduce using rule 1 (instrucciones -> valor .)
    DECREMENTO      reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)
    PUNTO_COMA      reduce using rule 1 (instrucciones -> valor .)


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    INCREMENTO      reduce using rule 2 (instrucciones -> asignacion .)
    DECREMENTO      reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)
    PUNTO_COMA      reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> salida .

    $end            reduce using rule 3 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> salida .)
    ECHO            reduce using rule 3 (instrucciones -> salida .)
    PRINT           reduce using rule 3 (instrucciones -> salida .)
    ENTERO          reduce using rule 3 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 3 (instrucciones -> salida .)
    STRING          reduce using rule 3 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 3 (instrucciones -> salida .)
    INCREMENTO      reduce using rule 3 (instrucciones -> salida .)
    DECREMENTO      reduce using rule 3 (instrucciones -> salida .)
    NEW             reduce using rule 3 (instrucciones -> salida .)
    FOR             reduce using rule 3 (instrucciones -> salida .)
    WHILE           reduce using rule 3 (instrucciones -> salida .)
    FUNCTION        reduce using rule 3 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> salida .)
    IF              reduce using rule 3 (instrucciones -> salida .)
    PUNTO_COMA      reduce using rule 3 (instrucciones -> salida .)


state 5

    (4) instrucciones -> prueba .

    $end            reduce using rule 4 (instrucciones -> prueba .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> prueba .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> prueba .)
    ECHO            reduce using rule 4 (instrucciones -> prueba .)
    PRINT           reduce using rule 4 (instrucciones -> prueba .)
    ENTERO          reduce using rule 4 (instrucciones -> prueba .)
    FLOTANTE        reduce using rule 4 (instrucciones -> prueba .)
    STRING          reduce using rule 4 (instrucciones -> prueba .)
    BOOLEANO        reduce using rule 4 (instrucciones -> prueba .)
    INCREMENTO      reduce using rule 4 (instrucciones -> prueba .)
    DECREMENTO      reduce using rule 4 (instrucciones -> prueba .)
    NEW             reduce using rule 4 (instrucciones -> prueba .)
    FOR             reduce using rule 4 (instrucciones -> prueba .)
    WHILE           reduce using rule 4 (instrucciones -> prueba .)
    FUNCTION        reduce using rule 4 (instrucciones -> prueba .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> prueba .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> prueba .)
    IF              reduce using rule 4 (instrucciones -> prueba .)
    PUNTO_COMA      reduce using rule 4 (instrucciones -> prueba .)


state 6

    (5) instrucciones -> estructuras_control .

    $end            reduce using rule 5 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_control .)
    INCREMENTO      reduce using rule 5 (instrucciones -> estructuras_control .)
    DECREMENTO      reduce using rule 5 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    IF              reduce using rule 5 (instrucciones -> estructuras_control .)
    PUNTO_COMA      reduce using rule 5 (instrucciones -> estructuras_control .)


state 7

    (6) instrucciones -> estructuras_datos .

    $end            reduce using rule 6 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 6 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 6 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 6 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 6 (instrucciones -> estructuras_datos .)
    INCREMENTO      reduce using rule 6 (instrucciones -> estructuras_datos .)
    DECREMENTO      reduce using rule 6 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 6 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 6 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 6 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 6 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 6 (instrucciones -> estructuras_datos .)
    PUNTO_COMA      reduce using rule 6 (instrucciones -> estructuras_datos .)


state 8

    (7) instrucciones -> funciones .

    $end            reduce using rule 7 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> funciones .)
    ECHO            reduce using rule 7 (instrucciones -> funciones .)
    PRINT           reduce using rule 7 (instrucciones -> funciones .)
    ENTERO          reduce using rule 7 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 7 (instrucciones -> funciones .)
    STRING          reduce using rule 7 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 7 (instrucciones -> funciones .)
    INCREMENTO      reduce using rule 7 (instrucciones -> funciones .)
    DECREMENTO      reduce using rule 7 (instrucciones -> funciones .)
    NEW             reduce using rule 7 (instrucciones -> funciones .)
    FOR             reduce using rule 7 (instrucciones -> funciones .)
    WHILE           reduce using rule 7 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 7 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    IF              reduce using rule 7 (instrucciones -> funciones .)
    PUNTO_COMA      reduce using rule 7 (instrucciones -> funciones .)


state 9

    (8) instrucciones -> op_logica .

    $end            reduce using rule 8 (instrucciones -> op_logica .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_logica .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_logica .)
    ECHO            reduce using rule 8 (instrucciones -> op_logica .)
    PRINT           reduce using rule 8 (instrucciones -> op_logica .)
    ENTERO          reduce using rule 8 (instrucciones -> op_logica .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_logica .)
    STRING          reduce using rule 8 (instrucciones -> op_logica .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_logica .)
    INCREMENTO      reduce using rule 8 (instrucciones -> op_logica .)
    DECREMENTO      reduce using rule 8 (instrucciones -> op_logica .)
    NEW             reduce using rule 8 (instrucciones -> op_logica .)
    FOR             reduce using rule 8 (instrucciones -> op_logica .)
    WHILE           reduce using rule 8 (instrucciones -> op_logica .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_logica .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_logica .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_logica .)
    IF              reduce using rule 8 (instrucciones -> op_logica .)
    PUNTO_COMA      reduce using rule 8 (instrucciones -> op_logica .)


state 10

    (9) instrucciones -> op_pila .

    $end            reduce using rule 9 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> op_pila .)
    ECHO            reduce using rule 9 (instrucciones -> op_pila .)
    PRINT           reduce using rule 9 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 9 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 9 (instrucciones -> op_pila .)
    STRING          reduce using rule 9 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 9 (instrucciones -> op_pila .)
    INCREMENTO      reduce using rule 9 (instrucciones -> op_pila .)
    DECREMENTO      reduce using rule 9 (instrucciones -> op_pila .)
    NEW             reduce using rule 9 (instrucciones -> op_pila .)
    FOR             reduce using rule 9 (instrucciones -> op_pila .)
    WHILE           reduce using rule 9 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 9 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> op_pila .)
    IF              reduce using rule 9 (instrucciones -> op_pila .)
    PUNTO_COMA      reduce using rule 9 (instrucciones -> op_pila .)


state 11

    (10) instrucciones -> declaracion .

    $end            reduce using rule 10 (instrucciones -> declaracion .)
    LLAVE_DER       reduce using rule 10 (instrucciones -> declaracion .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> declaracion .)
    ECHO            reduce using rule 10 (instrucciones -> declaracion .)
    PRINT           reduce using rule 10 (instrucciones -> declaracion .)
    ENTERO          reduce using rule 10 (instrucciones -> declaracion .)
    FLOTANTE        reduce using rule 10 (instrucciones -> declaracion .)
    STRING          reduce using rule 10 (instrucciones -> declaracion .)
    BOOLEANO        reduce using rule 10 (instrucciones -> declaracion .)
    INCREMENTO      reduce using rule 10 (instrucciones -> declaracion .)
    DECREMENTO      reduce using rule 10 (instrucciones -> declaracion .)
    NEW             reduce using rule 10 (instrucciones -> declaracion .)
    FOR             reduce using rule 10 (instrucciones -> declaracion .)
    WHILE           reduce using rule 10 (instrucciones -> declaracion .)
    FUNCTION        reduce using rule 10 (instrucciones -> declaracion .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> declaracion .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> declaracion .)
    IF              reduce using rule 10 (instrucciones -> declaracion .)
    PUNTO_COMA      reduce using rule 10 (instrucciones -> declaracion .)


state 12

    (11) instrucciones -> declaracionp .

    $end            reduce using rule 11 (instrucciones -> declaracionp .)
    LLAVE_DER       reduce using rule 11 (instrucciones -> declaracionp .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> declaracionp .)
    ECHO            reduce using rule 11 (instrucciones -> declaracionp .)
    PRINT           reduce using rule 11 (instrucciones -> declaracionp .)
    ENTERO          reduce using rule 11 (instrucciones -> declaracionp .)
    FLOTANTE        reduce using rule 11 (instrucciones -> declaracionp .)
    STRING          reduce using rule 11 (instrucciones -> declaracionp .)
    BOOLEANO        reduce using rule 11 (instrucciones -> declaracionp .)
    INCREMENTO      reduce using rule 11 (instrucciones -> declaracionp .)
    DECREMENTO      reduce using rule 11 (instrucciones -> declaracionp .)
    NEW             reduce using rule 11 (instrucciones -> declaracionp .)
    FOR             reduce using rule 11 (instrucciones -> declaracionp .)
    WHILE           reduce using rule 11 (instrucciones -> declaracionp .)
    FUNCTION        reduce using rule 11 (instrucciones -> declaracionp .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> declaracionp .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> declaracionp .)
    IF              reduce using rule 11 (instrucciones -> declaracionp .)
    PUNTO_COMA      reduce using rule 11 (instrucciones -> declaracionp .)


state 13

    (12) instrucciones -> declaracion_s .

    $end            reduce using rule 12 (instrucciones -> declaracion_s .)
    LLAVE_DER       reduce using rule 12 (instrucciones -> declaracion_s .)
    SIGNO_DOLAR     reduce using rule 12 (instrucciones -> declaracion_s .)
    ECHO            reduce using rule 12 (instrucciones -> declaracion_s .)
    PRINT           reduce using rule 12 (instrucciones -> declaracion_s .)
    ENTERO          reduce using rule 12 (instrucciones -> declaracion_s .)
    FLOTANTE        reduce using rule 12 (instrucciones -> declaracion_s .)
    STRING          reduce using rule 12 (instrucciones -> declaracion_s .)
    BOOLEANO        reduce using rule 12 (instrucciones -> declaracion_s .)
    INCREMENTO      reduce using rule 12 (instrucciones -> declaracion_s .)
    DECREMENTO      reduce using rule 12 (instrucciones -> declaracion_s .)
    NEW             reduce using rule 12 (instrucciones -> declaracion_s .)
    FOR             reduce using rule 12 (instrucciones -> declaracion_s .)
    WHILE           reduce using rule 12 (instrucciones -> declaracion_s .)
    FUNCTION        reduce using rule 12 (instrucciones -> declaracion_s .)
    MENOR_IGUAL     reduce using rule 12 (instrucciones -> declaracion_s .)
    MAYOR_IGUAL     reduce using rule 12 (instrucciones -> declaracion_s .)
    IF              reduce using rule 12 (instrucciones -> declaracion_s .)
    PUNTO_COMA      reduce using rule 12 (instrucciones -> declaracion_s .)


state 14

    (13) instrucciones -> crecimiento .

    $end            reduce using rule 13 (instrucciones -> crecimiento .)
    LLAVE_DER       reduce using rule 13 (instrucciones -> crecimiento .)
    SIGNO_DOLAR     reduce using rule 13 (instrucciones -> crecimiento .)
    ECHO            reduce using rule 13 (instrucciones -> crecimiento .)
    PRINT           reduce using rule 13 (instrucciones -> crecimiento .)
    ENTERO          reduce using rule 13 (instrucciones -> crecimiento .)
    FLOTANTE        reduce using rule 13 (instrucciones -> crecimiento .)
    STRING          reduce using rule 13 (instrucciones -> crecimiento .)
    BOOLEANO        reduce using rule 13 (instrucciones -> crecimiento .)
    INCREMENTO      reduce using rule 13 (instrucciones -> crecimiento .)
    DECREMENTO      reduce using rule 13 (instrucciones -> crecimiento .)
    NEW             reduce using rule 13 (instrucciones -> crecimiento .)
    FOR             reduce using rule 13 (instrucciones -> crecimiento .)
    WHILE           reduce using rule 13 (instrucciones -> crecimiento .)
    FUNCTION        reduce using rule 13 (instrucciones -> crecimiento .)
    MENOR_IGUAL     reduce using rule 13 (instrucciones -> crecimiento .)
    MAYOR_IGUAL     reduce using rule 13 (instrucciones -> crecimiento .)
    IF              reduce using rule 13 (instrucciones -> crecimiento .)
    PUNTO_COMA      reduce using rule 13 (instrucciones -> crecimiento .)


state 15

    (14) instrucciones -> valorc .

    $end            reduce using rule 14 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 14 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 14 (instrucciones -> valorc .)
    ECHO            reduce using rule 14 (instrucciones -> valorc .)
    PRINT           reduce using rule 14 (instrucciones -> valorc .)
    ENTERO          reduce using rule 14 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 14 (instrucciones -> valorc .)
    STRING          reduce using rule 14 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 14 (instrucciones -> valorc .)
    INCREMENTO      reduce using rule 14 (instrucciones -> valorc .)
    DECREMENTO      reduce using rule 14 (instrucciones -> valorc .)
    NEW             reduce using rule 14 (instrucciones -> valorc .)
    FOR             reduce using rule 14 (instrucciones -> valorc .)
    WHILE           reduce using rule 14 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 14 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 14 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 14 (instrucciones -> valorc .)
    IF              reduce using rule 14 (instrucciones -> valorc .)
    PUNTO_COMA      reduce using rule 14 (instrucciones -> valorc .)


state 16

    (15) instrucciones -> LLAVE_DER .

    $end            reduce using rule 15 (instrucciones -> LLAVE_DER .)
    LLAVE_DER       reduce using rule 15 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 15 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 15 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 15 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 15 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 15 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 15 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 15 (instrucciones -> LLAVE_DER .)
    INCREMENTO      reduce using rule 15 (instrucciones -> LLAVE_DER .)
    DECREMENTO      reduce using rule 15 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 15 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 15 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 15 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 15 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 15 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 15 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 15 (instrucciones -> LLAVE_DER .)
    PUNTO_COMA      reduce using rule 15 (instrucciones -> LLAVE_DER .)


state 17

    (17) valor -> datos .

    $end            reduce using rule 17 (valor -> datos .)
    PUNTO_COMA      reduce using rule 17 (valor -> datos .)
    FLECHA          reduce using rule 17 (valor -> datos .)
    COMA            reduce using rule 17 (valor -> datos .)
    PAREN_DER       reduce using rule 17 (valor -> datos .)
    LLAVE_DER       reduce using rule 17 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 17 (valor -> datos .)
    ECHO            reduce using rule 17 (valor -> datos .)
    PRINT           reduce using rule 17 (valor -> datos .)
    ENTERO          reduce using rule 17 (valor -> datos .)
    FLOTANTE        reduce using rule 17 (valor -> datos .)
    STRING          reduce using rule 17 (valor -> datos .)
    BOOLEANO        reduce using rule 17 (valor -> datos .)
    INCREMENTO      reduce using rule 17 (valor -> datos .)
    DECREMENTO      reduce using rule 17 (valor -> datos .)
    NEW             reduce using rule 17 (valor -> datos .)
    FOR             reduce using rule 17 (valor -> datos .)
    WHILE           reduce using rule 17 (valor -> datos .)
    FUNCTION        reduce using rule 17 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 17 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 17 (valor -> datos .)
    IF              reduce using rule 17 (valor -> datos .)


state 18

    (18) valor -> pila .
    (32) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 18 (valor -> pila .)
  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 18 (valor -> pila .)
    $end            reduce using rule 18 (valor -> pila .)
    LLAVE_DER       reduce using rule 18 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 18 (valor -> pila .)
    ECHO            reduce using rule 18 (valor -> pila .)
    PRINT           reduce using rule 18 (valor -> pila .)
    ENTERO          reduce using rule 18 (valor -> pila .)
    FLOTANTE        reduce using rule 18 (valor -> pila .)
    STRING          reduce using rule 18 (valor -> pila .)
    BOOLEANO        reduce using rule 18 (valor -> pila .)
    INCREMENTO      reduce using rule 18 (valor -> pila .)
    DECREMENTO      reduce using rule 18 (valor -> pila .)
    NEW             reduce using rule 18 (valor -> pila .)
    FOR             reduce using rule 18 (valor -> pila .)
    WHILE           reduce using rule 18 (valor -> pila .)
    FUNCTION        reduce using rule 18 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 18 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 18 (valor -> pila .)
    IF              reduce using rule 18 (valor -> pila .)
    PUNTO_COMA      reduce using rule 18 (valor -> pila .)

  ! $end            [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! INCREMENTO      [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! DECREMENTO      [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 32 (estructuras_datos -> pila .) ]
  ! PUNTO_COMA      [ reduce using rule 32 (estructuras_datos -> pila .) ]


state 19

    (19) valor -> cola .
    (33) estructuras_datos -> cola .
    (51) for -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 19 (valor -> cola .)
  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 19 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 19 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 19 (valor -> cola .)
    ECHO            reduce using rule 19 (valor -> cola .)
    PRINT           reduce using rule 19 (valor -> cola .)
    ENTERO          reduce using rule 19 (valor -> cola .)
    FLOTANTE        reduce using rule 19 (valor -> cola .)
    STRING          reduce using rule 19 (valor -> cola .)
    BOOLEANO        reduce using rule 19 (valor -> cola .)
    INCREMENTO      reduce using rule 19 (valor -> cola .)
    DECREMENTO      reduce using rule 19 (valor -> cola .)
    NEW             reduce using rule 19 (valor -> cola .)
    FOR             reduce using rule 19 (valor -> cola .)
    WHILE           reduce using rule 19 (valor -> cola .)
    FUNCTION        reduce using rule 19 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 19 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 19 (valor -> cola .)
    IF              reduce using rule 19 (valor -> cola .)
    PUNTO_COMA      reduce using rule 19 (valor -> cola .)
    LLAVE_DER       shift and go to state 45

  ! LLAVE_DER       [ reduce using rule 19 (valor -> cola .) ]
  ! $end            [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! INCREMENTO      [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! DECREMENTO      [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 33 (estructuras_datos -> cola .) ]
  ! PUNTO_COMA      [ reduce using rule 33 (estructuras_datos -> cola .) ]


state 20

    (16) asignacion -> SIGNO_DOLAR . CADENA IGUAL valor PUNTO_COMA
    (71) op_pila -> SIGNO_DOLAR . CADENA RESTA MAYOR_QUE operad_pila
    (52) declaracion -> SIGNO_DOLAR . CADENA IGUAL ENTERO PUNTO_COMA
    (53) declaracionp -> SIGNO_DOLAR . CADENA valorc
    (58) declaracion_s -> SIGNO_DOLAR . CADENA crecimiento
    (84) arreglo -> SIGNO_DOLAR . CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> SIGNO_DOLAR . CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    CADENA          shift and go to state 46


state 21

    (24) salida -> ECHO . CADENA PUNTO_COMA
    (25) prueba -> ECHO . SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER

    CADENA          shift and go to state 47
    SIGNO_DOLAR     shift and go to state 48


state 22

    (26) salida -> PRINT . PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> PRINT . STRING PUNTO_COMA
    (28) salida -> PRINT . for PUNTO_COMA
    (50) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (51) for -> . cola LLAVE_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 49
    STRING          shift and go to state 50
    FOR             shift and go to state 39
    NEW             shift and go to state 53

    for                            shift and go to state 51
    cola                           shift and go to state 52

state 23

    (68) op_logica -> STRING . operad_log STRING
    (22) datos -> STRING .
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 22 (datos -> STRING .)
    LLAVE_DER       reduce using rule 22 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 22 (datos -> STRING .)
    ECHO            reduce using rule 22 (datos -> STRING .)
    PRINT           reduce using rule 22 (datos -> STRING .)
    ENTERO          reduce using rule 22 (datos -> STRING .)
    FLOTANTE        reduce using rule 22 (datos -> STRING .)
    STRING          reduce using rule 22 (datos -> STRING .)
    BOOLEANO        reduce using rule 22 (datos -> STRING .)
    INCREMENTO      reduce using rule 22 (datos -> STRING .)
    DECREMENTO      reduce using rule 22 (datos -> STRING .)
    NEW             reduce using rule 22 (datos -> STRING .)
    FOR             reduce using rule 22 (datos -> STRING .)
    WHILE           reduce using rule 22 (datos -> STRING .)
    FUNCTION        reduce using rule 22 (datos -> STRING .)
    IF              reduce using rule 22 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 22 (datos -> STRING .)
    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

  ! MENOR_IGUAL     [ reduce using rule 22 (datos -> STRING .) ]
  ! MAYOR_IGUAL     [ reduce using rule 22 (datos -> STRING .) ]

    operad_log                     shift and go to state 54

state 24

    (30) estructuras_control -> for .

    $end            reduce using rule 30 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 30 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 30 (estructuras_control -> for .)
    ECHO            reduce using rule 30 (estructuras_control -> for .)
    PRINT           reduce using rule 30 (estructuras_control -> for .)
    ENTERO          reduce using rule 30 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 30 (estructuras_control -> for .)
    STRING          reduce using rule 30 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 30 (estructuras_control -> for .)
    INCREMENTO      reduce using rule 30 (estructuras_control -> for .)
    DECREMENTO      reduce using rule 30 (estructuras_control -> for .)
    NEW             reduce using rule 30 (estructuras_control -> for .)
    FOR             reduce using rule 30 (estructuras_control -> for .)
    WHILE           reduce using rule 30 (estructuras_control -> for .)
    FUNCTION        reduce using rule 30 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 30 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 30 (estructuras_control -> for .)
    IF              reduce using rule 30 (estructuras_control -> for .)
    PUNTO_COMA      reduce using rule 30 (estructuras_control -> for .)


state 25

    (29) estructuras_control -> if_else .

    $end            reduce using rule 29 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 29 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 29 (estructuras_control -> if_else .)
    ECHO            reduce using rule 29 (estructuras_control -> if_else .)
    PRINT           reduce using rule 29 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 29 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 29 (estructuras_control -> if_else .)
    STRING          reduce using rule 29 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 29 (estructuras_control -> if_else .)
    INCREMENTO      reduce using rule 29 (estructuras_control -> if_else .)
    DECREMENTO      reduce using rule 29 (estructuras_control -> if_else .)
    NEW             reduce using rule 29 (estructuras_control -> if_else .)
    FOR             reduce using rule 29 (estructuras_control -> if_else .)
    WHILE           reduce using rule 29 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 29 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 29 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 29 (estructuras_control -> if_else .)
    IF              reduce using rule 29 (estructuras_control -> if_else .)
    PUNTO_COMA      reduce using rule 29 (estructuras_control -> if_else .)


state 26

    (31) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    INCREMENTO      reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    DECREMENTO      reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 31 (estructuras_control -> whileDeclaracion .)
    PUNTO_COMA      reduce using rule 31 (estructuras_control -> whileDeclaracion .)


state 27

    (34) estructuras_datos -> arreglo .

    $end            reduce using rule 34 (estructuras_datos -> arreglo .)
    LLAVE_DER       reduce using rule 34 (estructuras_datos -> arreglo .)
    SIGNO_DOLAR     reduce using rule 34 (estructuras_datos -> arreglo .)
    ECHO            reduce using rule 34 (estructuras_datos -> arreglo .)
    PRINT           reduce using rule 34 (estructuras_datos -> arreglo .)
    ENTERO          reduce using rule 34 (estructuras_datos -> arreglo .)
    FLOTANTE        reduce using rule 34 (estructuras_datos -> arreglo .)
    STRING          reduce using rule 34 (estructuras_datos -> arreglo .)
    BOOLEANO        reduce using rule 34 (estructuras_datos -> arreglo .)
    INCREMENTO      reduce using rule 34 (estructuras_datos -> arreglo .)
    DECREMENTO      reduce using rule 34 (estructuras_datos -> arreglo .)
    NEW             reduce using rule 34 (estructuras_datos -> arreglo .)
    FOR             reduce using rule 34 (estructuras_datos -> arreglo .)
    WHILE           reduce using rule 34 (estructuras_datos -> arreglo .)
    FUNCTION        reduce using rule 34 (estructuras_datos -> arreglo .)
    MENOR_IGUAL     reduce using rule 34 (estructuras_datos -> arreglo .)
    MAYOR_IGUAL     reduce using rule 34 (estructuras_datos -> arreglo .)
    IF              reduce using rule 34 (estructuras_datos -> arreglo .)
    PUNTO_COMA      reduce using rule 34 (estructuras_datos -> arreglo .)


state 28

    (35) funciones -> funcion_variable .

    $end            reduce using rule 35 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 35 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 35 (funciones -> funcion_variable .)
    ECHO            reduce using rule 35 (funciones -> funcion_variable .)
    PRINT           reduce using rule 35 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 35 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 35 (funciones -> funcion_variable .)
    STRING          reduce using rule 35 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 35 (funciones -> funcion_variable .)
    INCREMENTO      reduce using rule 35 (funciones -> funcion_variable .)
    DECREMENTO      reduce using rule 35 (funciones -> funcion_variable .)
    NEW             reduce using rule 35 (funciones -> funcion_variable .)
    FOR             reduce using rule 35 (funciones -> funcion_variable .)
    WHILE           reduce using rule 35 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 35 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 35 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 35 (funciones -> funcion_variable .)
    IF              reduce using rule 35 (funciones -> funcion_variable .)
    PUNTO_COMA      reduce using rule 35 (funciones -> funcion_variable .)


state 29

    (36) funciones -> sinRetorno .

    $end            reduce using rule 36 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 36 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 36 (funciones -> sinRetorno .)
    ECHO            reduce using rule 36 (funciones -> sinRetorno .)
    PRINT           reduce using rule 36 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 36 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 36 (funciones -> sinRetorno .)
    STRING          reduce using rule 36 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 36 (funciones -> sinRetorno .)
    INCREMENTO      reduce using rule 36 (funciones -> sinRetorno .)
    DECREMENTO      reduce using rule 36 (funciones -> sinRetorno .)
    NEW             reduce using rule 36 (funciones -> sinRetorno .)
    FOR             reduce using rule 36 (funciones -> sinRetorno .)
    WHILE           reduce using rule 36 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 36 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 36 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 36 (funciones -> sinRetorno .)
    IF              reduce using rule 36 (funciones -> sinRetorno .)
    PUNTO_COMA      reduce using rule 36 (funciones -> sinRetorno .)


state 30

    (66) op_logica -> ENTERO . operad_log ENTERO
    (20) datos -> ENTERO .
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 20 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 20 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 20 (datos -> ENTERO .)
    ECHO            reduce using rule 20 (datos -> ENTERO .)
    PRINT           reduce using rule 20 (datos -> ENTERO .)
    ENTERO          reduce using rule 20 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 20 (datos -> ENTERO .)
    STRING          reduce using rule 20 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 20 (datos -> ENTERO .)
    INCREMENTO      reduce using rule 20 (datos -> ENTERO .)
    DECREMENTO      reduce using rule 20 (datos -> ENTERO .)
    NEW             reduce using rule 20 (datos -> ENTERO .)
    FOR             reduce using rule 20 (datos -> ENTERO .)
    WHILE           reduce using rule 20 (datos -> ENTERO .)
    FUNCTION        reduce using rule 20 (datos -> ENTERO .)
    IF              reduce using rule 20 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 20 (datos -> ENTERO .)
    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

  ! MENOR_IGUAL     [ reduce using rule 20 (datos -> ENTERO .) ]
  ! MAYOR_IGUAL     [ reduce using rule 20 (datos -> ENTERO .) ]

    operad_log                     shift and go to state 61

state 31

    (67) op_logica -> FLOTANTE . operad_log FLOTANTE
    (21) datos -> FLOTANTE .
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
    $end            reduce using rule 21 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 21 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 21 (datos -> FLOTANTE .)
    ECHO            reduce using rule 21 (datos -> FLOTANTE .)
    PRINT           reduce using rule 21 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 21 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 21 (datos -> FLOTANTE .)
    STRING          reduce using rule 21 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 21 (datos -> FLOTANTE .)
    INCREMENTO      reduce using rule 21 (datos -> FLOTANTE .)
    DECREMENTO      reduce using rule 21 (datos -> FLOTANTE .)
    NEW             reduce using rule 21 (datos -> FLOTANTE .)
    FOR             reduce using rule 21 (datos -> FLOTANTE .)
    WHILE           reduce using rule 21 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 21 (datos -> FLOTANTE .)
    IF              reduce using rule 21 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 21 (datos -> FLOTANTE .)
    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

  ! MENOR_IGUAL     [ reduce using rule 21 (datos -> FLOTANTE .) ]
  ! MAYOR_IGUAL     [ reduce using rule 21 (datos -> FLOTANTE .) ]

    operad_log                     shift and go to state 62

state 32

    (69) op_logica -> BOOLEANO .
    (23) datos -> BOOLEANO .

  ! reduce/reduce conflict for $end resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for ECHO resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for PRINT resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for ENTERO resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for STRING resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for NEW resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for IF resolved using rule 23 (datos -> BOOLEANO .)
  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 23 (datos -> BOOLEANO .)
    $end            reduce using rule 23 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 23 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 23 (datos -> BOOLEANO .)
    ECHO            reduce using rule 23 (datos -> BOOLEANO .)
    PRINT           reduce using rule 23 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 23 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 23 (datos -> BOOLEANO .)
    STRING          reduce using rule 23 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 23 (datos -> BOOLEANO .)
    INCREMENTO      reduce using rule 23 (datos -> BOOLEANO .)
    DECREMENTO      reduce using rule 23 (datos -> BOOLEANO .)
    NEW             reduce using rule 23 (datos -> BOOLEANO .)
    FOR             reduce using rule 23 (datos -> BOOLEANO .)
    WHILE           reduce using rule 23 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 23 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 23 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 23 (datos -> BOOLEANO .)
    IF              reduce using rule 23 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 23 (datos -> BOOLEANO .)

  ! $end            [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! LLAVE_DER       [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! SIGNO_DOLAR     [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! ECHO            [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! PRINT           [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! ENTERO          [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! FLOTANTE        [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! STRING          [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! BOOLEANO        [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! INCREMENTO      [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! DECREMENTO      [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! NEW             [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! FOR             [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! WHILE           [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! FUNCTION        [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! MENOR_IGUAL     [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! MAYOR_IGUAL     [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! IF              [ reduce using rule 69 (op_logica -> BOOLEANO .) ]
  ! PUNTO_COMA      [ reduce using rule 69 (op_logica -> BOOLEANO .) ]


state 33

    (59) crecimiento -> INCREMENTO .

    $end            reduce using rule 59 (crecimiento -> INCREMENTO .)
    LLAVE_DER       reduce using rule 59 (crecimiento -> INCREMENTO .)
    SIGNO_DOLAR     reduce using rule 59 (crecimiento -> INCREMENTO .)
    ECHO            reduce using rule 59 (crecimiento -> INCREMENTO .)
    PRINT           reduce using rule 59 (crecimiento -> INCREMENTO .)
    ENTERO          reduce using rule 59 (crecimiento -> INCREMENTO .)
    FLOTANTE        reduce using rule 59 (crecimiento -> INCREMENTO .)
    STRING          reduce using rule 59 (crecimiento -> INCREMENTO .)
    BOOLEANO        reduce using rule 59 (crecimiento -> INCREMENTO .)
    INCREMENTO      reduce using rule 59 (crecimiento -> INCREMENTO .)
    DECREMENTO      reduce using rule 59 (crecimiento -> INCREMENTO .)
    NEW             reduce using rule 59 (crecimiento -> INCREMENTO .)
    FOR             reduce using rule 59 (crecimiento -> INCREMENTO .)
    WHILE           reduce using rule 59 (crecimiento -> INCREMENTO .)
    FUNCTION        reduce using rule 59 (crecimiento -> INCREMENTO .)
    MENOR_IGUAL     reduce using rule 59 (crecimiento -> INCREMENTO .)
    MAYOR_IGUAL     reduce using rule 59 (crecimiento -> INCREMENTO .)
    IF              reduce using rule 59 (crecimiento -> INCREMENTO .)
    PUNTO_COMA      reduce using rule 59 (crecimiento -> INCREMENTO .)
    PAREN_DER       reduce using rule 59 (crecimiento -> INCREMENTO .)


state 34

    (60) crecimiento -> DECREMENTO .

    $end            reduce using rule 60 (crecimiento -> DECREMENTO .)
    LLAVE_DER       reduce using rule 60 (crecimiento -> DECREMENTO .)
    SIGNO_DOLAR     reduce using rule 60 (crecimiento -> DECREMENTO .)
    ECHO            reduce using rule 60 (crecimiento -> DECREMENTO .)
    PRINT           reduce using rule 60 (crecimiento -> DECREMENTO .)
    ENTERO          reduce using rule 60 (crecimiento -> DECREMENTO .)
    FLOTANTE        reduce using rule 60 (crecimiento -> DECREMENTO .)
    STRING          reduce using rule 60 (crecimiento -> DECREMENTO .)
    BOOLEANO        reduce using rule 60 (crecimiento -> DECREMENTO .)
    INCREMENTO      reduce using rule 60 (crecimiento -> DECREMENTO .)
    DECREMENTO      reduce using rule 60 (crecimiento -> DECREMENTO .)
    NEW             reduce using rule 60 (crecimiento -> DECREMENTO .)
    FOR             reduce using rule 60 (crecimiento -> DECREMENTO .)
    WHILE           reduce using rule 60 (crecimiento -> DECREMENTO .)
    FUNCTION        reduce using rule 60 (crecimiento -> DECREMENTO .)
    MENOR_IGUAL     reduce using rule 60 (crecimiento -> DECREMENTO .)
    MAYOR_IGUAL     reduce using rule 60 (crecimiento -> DECREMENTO .)
    IF              reduce using rule 60 (crecimiento -> DECREMENTO .)
    PUNTO_COMA      reduce using rule 60 (crecimiento -> DECREMENTO .)
    PAREN_DER       reduce using rule 60 (crecimiento -> DECREMENTO .)


state 35

    (56) valorc -> menor .

    $end            reduce using rule 56 (valorc -> menor .)
    LLAVE_DER       reduce using rule 56 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 56 (valorc -> menor .)
    ECHO            reduce using rule 56 (valorc -> menor .)
    PRINT           reduce using rule 56 (valorc -> menor .)
    ENTERO          reduce using rule 56 (valorc -> menor .)
    FLOTANTE        reduce using rule 56 (valorc -> menor .)
    STRING          reduce using rule 56 (valorc -> menor .)
    BOOLEANO        reduce using rule 56 (valorc -> menor .)
    INCREMENTO      reduce using rule 56 (valorc -> menor .)
    DECREMENTO      reduce using rule 56 (valorc -> menor .)
    NEW             reduce using rule 56 (valorc -> menor .)
    FOR             reduce using rule 56 (valorc -> menor .)
    WHILE           reduce using rule 56 (valorc -> menor .)
    FUNCTION        reduce using rule 56 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 56 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 56 (valorc -> menor .)
    IF              reduce using rule 56 (valorc -> menor .)
    PUNTO_COMA      reduce using rule 56 (valorc -> menor .)


state 36

    (57) valorc -> mayor .

    $end            reduce using rule 57 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 57 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 57 (valorc -> mayor .)
    ECHO            reduce using rule 57 (valorc -> mayor .)
    PRINT           reduce using rule 57 (valorc -> mayor .)
    ENTERO          reduce using rule 57 (valorc -> mayor .)
    FLOTANTE        reduce using rule 57 (valorc -> mayor .)
    STRING          reduce using rule 57 (valorc -> mayor .)
    BOOLEANO        reduce using rule 57 (valorc -> mayor .)
    INCREMENTO      reduce using rule 57 (valorc -> mayor .)
    DECREMENTO      reduce using rule 57 (valorc -> mayor .)
    NEW             reduce using rule 57 (valorc -> mayor .)
    FOR             reduce using rule 57 (valorc -> mayor .)
    WHILE           reduce using rule 57 (valorc -> mayor .)
    FUNCTION        reduce using rule 57 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 57 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 57 (valorc -> mayor .)
    IF              reduce using rule 57 (valorc -> mayor .)
    PUNTO_COMA      reduce using rule 57 (valorc -> mayor .)


state 37

    (70) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (47) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 63
    QUEUE           shift and go to state 64


state 38

    (61) if_else -> if_else_inicio . if_else_fin
    (62) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (65) if_else_fin -> . ELSE LLAVE_IZQ salida LLAVE_DER
    (64) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

    ELSE            shift and go to state 67
    ELSEIF          shift and go to state 68

    if_else_fin                    shift and go to state 65
    if_else_cuerpo                 shift and go to state 66

state 39

    (50) for -> FOR . PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 69


state 40

    (80) whileDeclaracion -> WHILE . PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 70


state 41

    (76) funcion_variable -> FUNCTION . CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> FUNCTION . CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    CADENA          shift and go to state 71


state 42

    (54) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 72


state 43

    (55) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 73


state 44

    (63) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

    PAREN_IZQ       shift and go to state 74


state 45

    (51) for -> cola LLAVE_DER .

    $end            reduce using rule 51 (for -> cola LLAVE_DER .)
    PUNTO_COMA      reduce using rule 51 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 51 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 51 (for -> cola LLAVE_DER .)
    ECHO            reduce using rule 51 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 51 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 51 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 51 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 51 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 51 (for -> cola LLAVE_DER .)
    INCREMENTO      reduce using rule 51 (for -> cola LLAVE_DER .)
    DECREMENTO      reduce using rule 51 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 51 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 51 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 51 (for -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 51 (for -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 51 (for -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 51 (for -> cola LLAVE_DER .)
    IF              reduce using rule 51 (for -> cola LLAVE_DER .)


state 46

    (16) asignacion -> SIGNO_DOLAR CADENA . IGUAL valor PUNTO_COMA
    (71) op_pila -> SIGNO_DOLAR CADENA . RESTA MAYOR_QUE operad_pila
    (52) declaracion -> SIGNO_DOLAR CADENA . IGUAL ENTERO PUNTO_COMA
    (53) declaracionp -> SIGNO_DOLAR CADENA . valorc
    (58) declaracion_s -> SIGNO_DOLAR CADENA . crecimiento
    (84) arreglo -> SIGNO_DOLAR CADENA . IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> SIGNO_DOLAR CADENA . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (56) valorc -> . menor
    (57) valorc -> . mayor
    (59) crecimiento -> . INCREMENTO
    (60) crecimiento -> . DECREMENTO
    (54) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (55) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    IGUAL           shift and go to state 75
    RESTA           shift and go to state 76
    INCREMENTO      shift and go to state 33
    DECREMENTO      shift and go to state 34
    MENOR_IGUAL     shift and go to state 42
    MAYOR_IGUAL     shift and go to state 43

    valorc                         shift and go to state 77
    crecimiento                    shift and go to state 78
    menor                          shift and go to state 35
    mayor                          shift and go to state 36

state 47

    (24) salida -> ECHO CADENA . PUNTO_COMA

    PUNTO_COMA      shift and go to state 79


state 48

    (25) prueba -> ECHO SIGNO_DOLAR . CADENA PUNTO_COMA LLAVE_DER

    CADENA          shift and go to state 80


state 49

    (26) salida -> PRINT PAREN_IZQ . STRING PAREN_DER PUNTO_COMA

    STRING          shift and go to state 81


state 50

    (27) salida -> PRINT STRING . PUNTO_COMA

    PUNTO_COMA      shift and go to state 82


state 51

    (28) salida -> PRINT for . PUNTO_COMA

    PUNTO_COMA      shift and go to state 83


state 52

    (51) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 45


state 53

    (47) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 64


state 54

    (68) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 84


state 55

    (37) operad_log -> IDENTICO .

    STRING          reduce using rule 37 (operad_log -> IDENTICO .)
    ENTERO          reduce using rule 37 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 37 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 37 (operad_log -> IDENTICO .)
    NEW             reduce using rule 37 (operad_log -> IDENTICO .)


state 56

    (38) operad_log -> DIFERENTE .

    STRING          reduce using rule 38 (operad_log -> DIFERENTE .)
    ENTERO          reduce using rule 38 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 38 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 38 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 38 (operad_log -> DIFERENTE .)


state 57

    (39) operad_log -> MAYOR_QUE .

    STRING          reduce using rule 39 (operad_log -> MAYOR_QUE .)
    ENTERO          reduce using rule 39 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 39 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 39 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 39 (operad_log -> MAYOR_QUE .)


state 58

    (40) operad_log -> MAYOR_IGUAL .

    STRING          reduce using rule 40 (operad_log -> MAYOR_IGUAL .)
    ENTERO          reduce using rule 40 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 40 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 40 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 40 (operad_log -> MAYOR_IGUAL .)


state 59

    (41) operad_log -> MENOR_QUE .

    STRING          reduce using rule 41 (operad_log -> MENOR_QUE .)
    ENTERO          reduce using rule 41 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 41 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 41 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 41 (operad_log -> MENOR_QUE .)


state 60

    (42) operad_log -> MENOR_IGUAL .

    STRING          reduce using rule 42 (operad_log -> MENOR_IGUAL .)
    ENTERO          reduce using rule 42 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 42 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 42 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 42 (operad_log -> MENOR_IGUAL .)


state 61

    (66) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 85


state 62

    (67) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 86


state 63

    (70) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 87


state 64

    (47) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 88


state 65

    (61) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    INCREMENTO      reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    DECREMENTO      reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)
    PUNTO_COMA      reduce using rule 61 (if_else -> if_else_inicio if_else_fin .)


state 66

    (62) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (65) if_else_fin -> . ELSE LLAVE_IZQ salida LLAVE_DER

    ELSE            shift and go to state 67

    if_else_fin                    shift and go to state 89

state 67

    (65) if_else_fin -> ELSE . LLAVE_IZQ salida LLAVE_DER

    LLAVE_IZQ       shift and go to state 90


state 68

    (64) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

    PAREN_IZQ       shift and go to state 91


state 69

    (50) for -> FOR PAREN_IZQ . declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (52) declaracion -> . SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA

    SIGNO_DOLAR     shift and go to state 93

    declaracion                    shift and go to state 92

state 70

    (80) whileDeclaracion -> WHILE PAREN_IZQ . SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    SIGNO_DOLAR     shift and go to state 94


state 71

    (76) funcion_variable -> FUNCTION CADENA . PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> FUNCTION CADENA . PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 95


state 72

    (54) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 96


state 73

    (55) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 97


state 74

    (63) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER
    (66) op_logica -> . ENTERO operad_log ENTERO
    (67) op_logica -> . FLOTANTE operad_log FLOTANTE
    (68) op_logica -> . STRING operad_log STRING
    (69) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 99
    FLOTANTE        shift and go to state 100
    STRING          shift and go to state 101
    BOOLEANO        shift and go to state 102

    op_logica                      shift and go to state 98

state 75

    (16) asignacion -> SIGNO_DOLAR CADENA IGUAL . valor PUNTO_COMA
    (52) declaracion -> SIGNO_DOLAR CADENA IGUAL . ENTERO PUNTO_COMA
    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL . ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 104
    ARRAY           shift and go to state 105
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 103
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 76

    (71) op_pila -> SIGNO_DOLAR CADENA RESTA . MAYOR_QUE operad_pila

    MAYOR_QUE       shift and go to state 111


state 77

    (53) declaracionp -> SIGNO_DOLAR CADENA valorc .

    $end            reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    SIGNO_DOLAR     reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    LLAVE_DER       reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    ECHO            reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    PRINT           reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    ENTERO          reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    FLOTANTE        reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    STRING          reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    BOOLEANO        reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    INCREMENTO      reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    DECREMENTO      reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    NEW             reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    FOR             reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    WHILE           reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    FUNCTION        reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    MENOR_IGUAL     reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    MAYOR_IGUAL     reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    IF              reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)
    PUNTO_COMA      reduce using rule 53 (declaracionp -> SIGNO_DOLAR CADENA valorc .)


state 78

    (58) declaracion_s -> SIGNO_DOLAR CADENA crecimiento .

    $end            reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    PAREN_DER       reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    LLAVE_DER       reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    SIGNO_DOLAR     reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    ECHO            reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    PRINT           reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    ENTERO          reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    FLOTANTE        reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    STRING          reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    BOOLEANO        reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    INCREMENTO      reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    DECREMENTO      reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    NEW             reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    FOR             reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    WHILE           reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    FUNCTION        reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    MENOR_IGUAL     reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    MAYOR_IGUAL     reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    IF              reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)
    PUNTO_COMA      reduce using rule 58 (declaracion_s -> SIGNO_DOLAR CADENA crecimiento .)


state 79

    (24) salida -> ECHO CADENA PUNTO_COMA .

    $end            reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    LLAVE_DER       reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    ECHO            reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    PRINT           reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    ENTERO          reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    FLOTANTE        reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    STRING          reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    BOOLEANO        reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    INCREMENTO      reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    DECREMENTO      reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    NEW             reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    FOR             reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    WHILE           reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    FUNCTION        reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    IF              reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 24 (salida -> ECHO CADENA PUNTO_COMA .)


state 80

    (25) prueba -> ECHO SIGNO_DOLAR CADENA . PUNTO_COMA LLAVE_DER

    PUNTO_COMA      shift and go to state 112


state 81

    (26) salida -> PRINT PAREN_IZQ STRING . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 113


state 82

    (27) salida -> PRINT STRING PUNTO_COMA .

    $end            reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    LLAVE_DER       reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    ECHO            reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    PRINT           reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    ENTERO          reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    FLOTANTE        reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    STRING          reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    BOOLEANO        reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    INCREMENTO      reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    DECREMENTO      reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    NEW             reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    FOR             reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    WHILE           reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    FUNCTION        reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    IF              reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 27 (salida -> PRINT STRING PUNTO_COMA .)


state 83

    (28) salida -> PRINT for PUNTO_COMA .

    $end            reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    LLAVE_DER       reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    ECHO            reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    PRINT           reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    ENTERO          reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    FLOTANTE        reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    STRING          reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    BOOLEANO        reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    INCREMENTO      reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    DECREMENTO      reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    NEW             reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    FOR             reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    WHILE           reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    FUNCTION        reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    IF              reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 28 (salida -> PRINT for PUNTO_COMA .)


state 84

    (68) op_logica -> STRING operad_log STRING .

    $end            reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    PAREN_DER       reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    LLAVE_DER       reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    SIGNO_DOLAR     reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    ECHO            reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    PRINT           reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    ENTERO          reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    FLOTANTE        reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    STRING          reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    BOOLEANO        reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    INCREMENTO      reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    DECREMENTO      reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    NEW             reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    FOR             reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    WHILE           reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    FUNCTION        reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    MENOR_IGUAL     reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    MAYOR_IGUAL     reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    IF              reduce using rule 68 (op_logica -> STRING operad_log STRING .)
    PUNTO_COMA      reduce using rule 68 (op_logica -> STRING operad_log STRING .)


state 85

    (66) op_logica -> ENTERO operad_log ENTERO .

    $end            reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    PAREN_DER       reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    LLAVE_DER       reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    SIGNO_DOLAR     reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    ECHO            reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    PRINT           reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    ENTERO          reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    FLOTANTE        reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    STRING          reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    BOOLEANO        reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    INCREMENTO      reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    DECREMENTO      reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    NEW             reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    FOR             reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    WHILE           reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    FUNCTION        reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    MENOR_IGUAL     reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    MAYOR_IGUAL     reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    IF              reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)
    PUNTO_COMA      reduce using rule 66 (op_logica -> ENTERO operad_log ENTERO .)


state 86

    (67) op_logica -> FLOTANTE operad_log FLOTANTE .

    $end            reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PAREN_DER       reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    LLAVE_DER       reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    ECHO            reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PRINT           reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    ENTERO          reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FLOTANTE        reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    STRING          reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    BOOLEANO        reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    INCREMENTO      reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    DECREMENTO      reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    NEW             reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FOR             reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    WHILE           reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    FUNCTION        reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    MENOR_IGUAL     reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    IF              reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)
    PUNTO_COMA      reduce using rule 67 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 87

    (70) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 114


state 88

    (47) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 115


state 89

    (62) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    INCREMENTO      reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    DECREMENTO      reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PUNTO_COMA      reduce using rule 62 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 90

    (65) if_else_fin -> ELSE LLAVE_IZQ . salida LLAVE_DER
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA

    ECHO            shift and go to state 117
    PRINT           shift and go to state 22

    salida                         shift and go to state 116

state 91

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER
    (66) op_logica -> . ENTERO operad_log ENTERO
    (67) op_logica -> . FLOTANTE operad_log FLOTANTE
    (68) op_logica -> . STRING operad_log STRING
    (69) op_logica -> . BOOLEANO

    ENTERO          shift and go to state 99
    FLOTANTE        shift and go to state 100
    STRING          shift and go to state 101
    BOOLEANO        shift and go to state 102

    op_logica                      shift and go to state 118

state 92

    (50) for -> FOR PAREN_IZQ declaracion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (53) declaracionp -> . SIGNO_DOLAR CADENA valorc

    SIGNO_DOLAR     shift and go to state 120

    declaracionp                   shift and go to state 119

state 93

    (52) declaracion -> SIGNO_DOLAR . CADENA IGUAL ENTERO PUNTO_COMA

    CADENA          shift and go to state 121


state 94

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR . CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    CADENA          shift and go to state 122


state 95

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ . TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ . SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    TRES_PUNTOS     shift and go to state 123
    SIGNO_DOLAR     shift and go to state 124


state 96

    (54) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 54 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 97

    (55) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 55 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 98

    (63) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ salida LLAVE_DER

    PAREN_DER       shift and go to state 125


state 99

    (66) op_logica -> ENTERO . operad_log ENTERO
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

    operad_log                     shift and go to state 61

state 100

    (67) op_logica -> FLOTANTE . operad_log FLOTANTE
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

    operad_log                     shift and go to state 62

state 101

    (68) op_logica -> STRING . operad_log STRING
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

    operad_log                     shift and go to state 54

state 102

    (69) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 69 (op_logica -> BOOLEANO .)


state 103

    (16) asignacion -> SIGNO_DOLAR CADENA IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 126


state 104

    (52) declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO . PUNTO_COMA
    (20) datos -> ENTERO .

  ! shift/reduce conflict for PUNTO_COMA resolved as shift
    PUNTO_COMA      shift and go to state 127

  ! PUNTO_COMA      [ reduce using rule 20 (datos -> ENTERO .) ]


state 105

    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY . PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 128


state 106

    (18) valor -> pila .

    PUNTO_COMA      reduce using rule 18 (valor -> pila .)
    FLECHA          reduce using rule 18 (valor -> pila .)
    COMA            reduce using rule 18 (valor -> pila .)
    PAREN_DER       reduce using rule 18 (valor -> pila .)


state 107

    (19) valor -> cola .

    PUNTO_COMA      reduce using rule 19 (valor -> cola .)
    FLECHA          reduce using rule 19 (valor -> cola .)
    COMA            reduce using rule 19 (valor -> cola .)
    PAREN_DER       reduce using rule 19 (valor -> cola .)


state 108

    (21) datos -> FLOTANTE .

    PUNTO_COMA      reduce using rule 21 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 21 (datos -> FLOTANTE .)
    COMA            reduce using rule 21 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 21 (datos -> FLOTANTE .)


state 109

    (22) datos -> STRING .

    PUNTO_COMA      reduce using rule 22 (datos -> STRING .)
    FLECHA          reduce using rule 22 (datos -> STRING .)
    COMA            reduce using rule 22 (datos -> STRING .)
    PAREN_DER       reduce using rule 22 (datos -> STRING .)


state 110

    (23) datos -> BOOLEANO .

    PUNTO_COMA      reduce using rule 23 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 23 (datos -> BOOLEANO .)
    COMA            reduce using rule 23 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 23 (datos -> BOOLEANO .)


state 111

    (71) op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE . operad_pila
    (72) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (73) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (74) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (75) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 130
    POP             shift and go to state 131
    COUNT           shift and go to state 132
    CURRENT         shift and go to state 133

    operad_pila                    shift and go to state 129

state 112

    (25) prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA . LLAVE_DER

    LLAVE_DER       shift and go to state 134


state 113

    (26) salida -> PRINT PAREN_IZQ STRING PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 135


state 114

    (70) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLECHA          reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    COMA            reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    INCREMENTO      reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    DECREMENTO      reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 70 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 115

    (47) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLECHA          reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    COMA            reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    INCREMENTO      reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    DECREMENTO      reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 47 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 116

    (65) if_else_fin -> ELSE LLAVE_IZQ salida . LLAVE_DER

    LLAVE_DER       shift and go to state 136


state 117

    (24) salida -> ECHO . CADENA PUNTO_COMA

    CADENA          shift and go to state 47


state 118

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ salida LLAVE_DER

    PAREN_DER       shift and go to state 137


state 119

    (50) for -> FOR PAREN_IZQ declaracion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (58) declaracion_s -> . SIGNO_DOLAR CADENA crecimiento

    SIGNO_DOLAR     shift and go to state 139

    declaracion_s                  shift and go to state 138

state 120

    (53) declaracionp -> SIGNO_DOLAR . CADENA valorc

    CADENA          shift and go to state 140


state 121

    (52) declaracion -> SIGNO_DOLAR CADENA . IGUAL ENTERO PUNTO_COMA

    IGUAL           shift and go to state 141


state 122

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (37) operad_log -> . IDENTICO
    (38) operad_log -> . DIFERENTE
    (39) operad_log -> . MAYOR_QUE
    (40) operad_log -> . MAYOR_IGUAL
    (41) operad_log -> . MENOR_QUE
    (42) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 55
    DIFERENTE       shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_IGUAL     shift and go to state 58
    MENOR_QUE       shift and go to state 59
    MENOR_IGUAL     shift and go to state 60

    operad_log                     shift and go to state 142

state 123

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS . SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    SIGNO_DOLAR     shift and go to state 143


state 124

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR . CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    CADENA          shift and go to state 144


state 125

    (63) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ salida LLAVE_DER

    LLAVE_IZQ       shift and go to state 145


state 126

    (16) asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .

    $end            reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    INCREMENTO      reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    DECREMENTO      reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 16 (asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA .)


state 127

    (52) declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    INCREMENTO      reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    DECREMENTO      reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 52 (declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA .)


state 128

    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ . valores PAREN_DER PUNTO_COMA
    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (81) valores -> . valor repite_valores
    (85) valoresflecha -> . valor FLECHA valor repite_valores_f
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valores                        shift and go to state 146
    valoresflecha                  shift and go to state 147
    valor                          shift and go to state 148
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 129

    (71) op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .

    $end            reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    LLAVE_DER       reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    SIGNO_DOLAR     reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    ECHO            reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    PRINT           reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    ENTERO          reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    FLOTANTE        reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    STRING          reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    BOOLEANO        reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    INCREMENTO      reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    DECREMENTO      reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    NEW             reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    FOR             reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    WHILE           reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    FUNCTION        reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    MENOR_IGUAL     reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    MAYOR_IGUAL     reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    IF              reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)
    PUNTO_COMA      reduce using rule 71 (op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila .)


state 130

    (72) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 150


state 131

    (73) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 151


state 132

    (74) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 152


state 133

    (75) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 153


state 134

    (25) prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .

    $end            reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    LLAVE_DER       reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    ECHO            reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    PRINT           reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    ENTERO          reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    FLOTANTE        reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    STRING          reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    BOOLEANO        reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    INCREMENTO      reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    DECREMENTO      reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    NEW             reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    FOR             reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    WHILE           reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    FUNCTION        reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    IF              reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)
    PUNTO_COMA      reduce using rule 25 (prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER .)


state 135

    (26) salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .

    $end            reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 26 (salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA .)


state 136

    (65) if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .

    $end            reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    LLAVE_DER       reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    ECHO            reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    PRINT           reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    ENTERO          reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    FLOTANTE        reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    STRING          reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    BOOLEANO        reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    INCREMENTO      reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    DECREMENTO      reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    NEW             reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    FOR             reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    WHILE           reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    FUNCTION        reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    IF              reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)
    PUNTO_COMA      reduce using rule 65 (if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER .)


state 137

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ salida LLAVE_DER

    LLAVE_IZQ       shift and go to state 154


state 138

    (50) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 155


state 139

    (58) declaracion_s -> SIGNO_DOLAR . CADENA crecimiento

    CADENA          shift and go to state 156


state 140

    (53) declaracionp -> SIGNO_DOLAR CADENA . valorc
    (56) valorc -> . menor
    (57) valorc -> . mayor
    (54) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (55) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 42
    MAYOR_IGUAL     shift and go to state 43

    valorc                         shift and go to state 77
    menor                          shift and go to state 35
    mayor                          shift and go to state 36

state 141

    (52) declaracion -> SIGNO_DOLAR CADENA IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 157


state 142

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 158
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 143

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR . CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    CADENA          shift and go to state 159


state 144

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 160


state 145

    (63) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . salida LLAVE_DER
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA

    ECHO            shift and go to state 117
    PRINT           shift and go to state 22

    salida                         shift and go to state 161

state 146

    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 162


state 147

    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 163


state 148

    (81) valores -> valor . repite_valores
    (85) valoresflecha -> valor . FLECHA valor repite_valores_f
    (82) repite_valores -> . COMA valor
    (83) repite_valores -> . COMA valor repite_valores

    FLECHA          shift and go to state 165
    COMA            shift and go to state 166

    repite_valores                 shift and go to state 164

state 149

    (20) datos -> ENTERO .

    FLECHA          reduce using rule 20 (datos -> ENTERO .)
    COMA            reduce using rule 20 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 20 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 20 (datos -> ENTERO .)


state 150

    (72) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110

    datos                          shift and go to state 167

state 151

    (73) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 168


state 152

    (74) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 169


state 153

    (75) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 170


state 154

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . salida LLAVE_DER
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA

    ECHO            shift and go to state 117
    PRINT           shift and go to state 22

    salida                         shift and go to state 171

state 155

    (50) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 172


state 156

    (58) declaracion_s -> SIGNO_DOLAR CADENA . crecimiento
    (59) crecimiento -> . INCREMENTO
    (60) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 33
    DECREMENTO      shift and go to state 34

    crecimiento                    shift and go to state 78

state 157

    (52) declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 127


state 158

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 173


state 159

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 174


state 160

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 175


state 161

    (63) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida . LLAVE_DER

    LLAVE_DER       shift and go to state 176


state 162

    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 177


state 163

    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 178


state 164

    (81) valores -> valor repite_valores .

    PAREN_DER       reduce using rule 81 (valores -> valor repite_valores .)


state 165

    (85) valoresflecha -> valor FLECHA . valor repite_valores_f
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 179
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 166

    (82) repite_valores -> COMA . valor
    (83) repite_valores -> COMA . valor repite_valores
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 180
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 167

    (72) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 181


state 168

    (73) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 182


state 169

    (74) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 183


state 170

    (75) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 184


state 171

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida . LLAVE_DER

    LLAVE_DER       shift and go to state 185


state 172

    (50) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (48) sentenciasAnidadas -> . instrucciones
    (49) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . prueba
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_logica
    (9) instrucciones -> . op_pila
    (10) instrucciones -> . declaracion
    (11) instrucciones -> . declaracionp
    (12) instrucciones -> . declaracion_s
    (13) instrucciones -> . crecimiento
    (14) instrucciones -> . valorc
    (15) instrucciones -> . LLAVE_DER
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER
    (29) estructuras_control -> . if_else
    (30) estructuras_control -> . for
    (31) estructuras_control -> . whileDeclaracion
    (32) estructuras_datos -> . pila
    (33) estructuras_datos -> . cola
    (34) estructuras_datos -> . arreglo
    (35) funciones -> . funcion_variable
    (36) funciones -> . sinRetorno
    (66) op_logica -> . ENTERO operad_log ENTERO
    (67) op_logica -> . FLOTANTE operad_log FLOTANTE
    (68) op_logica -> . STRING operad_log STRING
    (69) op_logica -> . BOOLEANO
    (71) op_pila -> . SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila
    (52) declaracion -> . SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA
    (53) declaracionp -> . SIGNO_DOLAR CADENA valorc
    (58) declaracion_s -> . SIGNO_DOLAR CADENA crecimiento
    (59) crecimiento -> . INCREMENTO
    (60) crecimiento -> . DECREMENTO
    (56) valorc -> . menor
    (57) valorc -> . mayor
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (61) if_else -> . if_else_inicio if_else_fin
    (62) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (50) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (51) for -> . cola LLAVE_DER
    (80) whileDeclaracion -> . WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (84) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (76) funcion_variable -> . FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (54) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (55) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (63) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

    LLAVE_DER       shift and go to state 16
    SIGNO_DOLAR     shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 23
    BOOLEANO        shift and go to state 32
    INCREMENTO      shift and go to state 33
    DECREMENTO      shift and go to state 34
    NEW             shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    FUNCTION        shift and go to state 41
    MENOR_IGUAL     shift and go to state 42
    MAYOR_IGUAL     shift and go to state 43
    IF              shift and go to state 44

    declaracion                    shift and go to state 11
    declaracionp                   shift and go to state 12
    declaracion_s                  shift and go to state 13
    sentenciasAnidadas             shift and go to state 186
    instrucciones                  shift and go to state 187
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    prueba                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_logica                      shift and go to state 9
    op_pila                        shift and go to state 10
    crecimiento                    shift and go to state 14
    valorc                         shift and go to state 15
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    for                            shift and go to state 24
    if_else                        shift and go to state 25
    whileDeclaracion               shift and go to state 26
    arreglo                        shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 35
    mayor                          shift and go to state 36
    if_else_inicio                 shift and go to state 38

state 173

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 188


state 174

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 189


state 175

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (78) contenido -> . bloque
    (79) contenido -> . sinRetorno
    (43) bloque -> . asignacion
    (44) bloque -> . salida
    (45) bloque -> . retorno
    (46) bloque -> . prueba
    (89) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (77) retorno -> . RETURN SIGNO_DOLAR CADENA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER

    FUNCTION        shift and go to state 190
    SIGNO_DOLAR     shift and go to state 191
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 199

    contenido                      shift and go to state 192
    bloque                         shift and go to state 193
    sinRetorno                     shift and go to state 194
    asignacion                     shift and go to state 195
    salida                         shift and go to state 196
    retorno                        shift and go to state 197
    prueba                         shift and go to state 198

state 176

    (63) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER .

    ELSE            reduce using rule 63 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER .)
    ELSEIF          reduce using rule 63 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER .)


state 177

    (84) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .

    $end            reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 84 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA .)


state 178

    (88) arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 88 (arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 179

    (85) valoresflecha -> valor FLECHA valor . repite_valores_f
    (86) repite_valores_f -> . COMA valor FLECHA valor
    (87) repite_valores_f -> . COMA valor FLECHA valor repite_valores

    COMA            shift and go to state 201

    repite_valores_f               shift and go to state 200

state 180

    (82) repite_valores -> COMA valor .
    (83) repite_valores -> COMA valor . repite_valores
    (82) repite_valores -> . COMA valor
    (83) repite_valores -> . COMA valor repite_valores

    PAREN_DER       reduce using rule 82 (repite_valores -> COMA valor .)
    COMA            shift and go to state 166

    repite_valores                 shift and go to state 202

state 181

    (72) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 203


state 182

    (73) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 73 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 183

    (74) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 74 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 184

    (75) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 75 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 185

    (64) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER .

    ELSE            reduce using rule 64 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER .)


state 186

    (50) for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PUNTO_COMA      reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    INCREMENTO      reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    DECREMENTO      reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 50 (for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 187

    (48) sentenciasAnidadas -> instrucciones .
    (49) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (48) sentenciasAnidadas -> . instrucciones
    (49) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . salida
    (4) instrucciones -> . prueba
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_logica
    (9) instrucciones -> . op_pila
    (10) instrucciones -> . declaracion
    (11) instrucciones -> . declaracionp
    (12) instrucciones -> . declaracion_s
    (13) instrucciones -> . crecimiento
    (14) instrucciones -> . valorc
    (15) instrucciones -> . LLAVE_DER
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER
    (29) estructuras_control -> . if_else
    (30) estructuras_control -> . for
    (31) estructuras_control -> . whileDeclaracion
    (32) estructuras_datos -> . pila
    (33) estructuras_datos -> . cola
    (34) estructuras_datos -> . arreglo
    (35) funciones -> . funcion_variable
    (36) funciones -> . sinRetorno
    (66) op_logica -> . ENTERO operad_log ENTERO
    (67) op_logica -> . FLOTANTE operad_log FLOTANTE
    (68) op_logica -> . STRING operad_log STRING
    (69) op_logica -> . BOOLEANO
    (71) op_pila -> . SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila
    (52) declaracion -> . SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA
    (53) declaracionp -> . SIGNO_DOLAR CADENA valorc
    (58) declaracion_s -> . SIGNO_DOLAR CADENA crecimiento
    (59) crecimiento -> . INCREMENTO
    (60) crecimiento -> . DECREMENTO
    (56) valorc -> . menor
    (57) valorc -> . mayor
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (61) if_else -> . if_else_inicio if_else_fin
    (62) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (50) for -> . FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (51) for -> . cola LLAVE_DER
    (80) whileDeclaracion -> . WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (84) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA
    (88) arreglo -> . SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (76) funcion_variable -> . FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (89) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (54) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (55) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (63) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 48 (sentenciasAnidadas -> instrucciones .)
    PUNTO_COMA      reduce using rule 48 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 16
    SIGNO_DOLAR     shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    ENTERO          shift and go to state 30
    FLOTANTE        shift and go to state 31
    STRING          shift and go to state 23
    BOOLEANO        shift and go to state 32
    INCREMENTO      shift and go to state 33
    DECREMENTO      shift and go to state 34
    NEW             shift and go to state 37
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    FUNCTION        shift and go to state 41
    MENOR_IGUAL     shift and go to state 42
    MAYOR_IGUAL     shift and go to state 43
    IF              shift and go to state 44

  ! LLAVE_DER       [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! INCREMENTO      [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! DECREMENTO      [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 48 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 187
    sentenciasAnidadas             shift and go to state 204
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    salida                         shift and go to state 4
    prueba                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_logica                      shift and go to state 9
    op_pila                        shift and go to state 10
    declaracion                    shift and go to state 11
    declaracionp                   shift and go to state 12
    declaracion_s                  shift and go to state 13
    crecimiento                    shift and go to state 14
    valorc                         shift and go to state 15
    datos                          shift and go to state 17
    pila                           shift and go to state 18
    cola                           shift and go to state 19
    for                            shift and go to state 24
    if_else                        shift and go to state 25
    whileDeclaracion               shift and go to state 26
    arreglo                        shift and go to state 27
    funcion_variable               shift and go to state 28
    sinRetorno                     shift and go to state 29
    menor                          shift and go to state 35
    mayor                          shift and go to state 36
    if_else_inicio                 shift and go to state 38

state 188

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (78) contenido -> . bloque
    (79) contenido -> . sinRetorno
    (43) bloque -> . asignacion
    (44) bloque -> . salida
    (45) bloque -> . retorno
    (46) bloque -> . prueba
    (89) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (77) retorno -> . RETURN SIGNO_DOLAR CADENA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER

    FUNCTION        shift and go to state 190
    SIGNO_DOLAR     shift and go to state 191
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 199

    contenido                      shift and go to state 205
    bloque                         shift and go to state 193
    sinRetorno                     shift and go to state 194
    asignacion                     shift and go to state 195
    salida                         shift and go to state 196
    retorno                        shift and go to state 197
    prueba                         shift and go to state 198

state 189

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (43) bloque -> . asignacion
    (44) bloque -> . salida
    (45) bloque -> . retorno
    (46) bloque -> . prueba
    (16) asignacion -> . SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA
    (24) salida -> . ECHO CADENA PUNTO_COMA
    (26) salida -> . PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
    (27) salida -> . PRINT STRING PUNTO_COMA
    (28) salida -> . PRINT for PUNTO_COMA
    (77) retorno -> . RETURN SIGNO_DOLAR CADENA
    (25) prueba -> . ECHO SIGNO_DOLAR CADENA PUNTO_COMA LLAVE_DER

    SIGNO_DOLAR     shift and go to state 191
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    RETURN          shift and go to state 199

    bloque                         shift and go to state 206
    asignacion                     shift and go to state 195
    salida                         shift and go to state 196
    retorno                        shift and go to state 197
    prueba                         shift and go to state 198

state 190

    (89) sinRetorno -> FUNCTION . CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    CADENA          shift and go to state 207


state 191

    (16) asignacion -> SIGNO_DOLAR . CADENA IGUAL valor PUNTO_COMA

    CADENA          shift and go to state 208


state 192

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 209


state 193

    (78) contenido -> bloque .

    LLAVE_DER       reduce using rule 78 (contenido -> bloque .)


state 194

    (79) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 79 (contenido -> sinRetorno .)


state 195

    (43) bloque -> asignacion .

    LLAVE_DER       reduce using rule 43 (bloque -> asignacion .)


state 196

    (44) bloque -> salida .

    LLAVE_DER       reduce using rule 44 (bloque -> salida .)


state 197

    (45) bloque -> retorno .

    LLAVE_DER       reduce using rule 45 (bloque -> retorno .)


state 198

    (46) bloque -> prueba .

    LLAVE_DER       reduce using rule 46 (bloque -> prueba .)


state 199

    (77) retorno -> RETURN . SIGNO_DOLAR CADENA

    SIGNO_DOLAR     shift and go to state 210


state 200

    (85) valoresflecha -> valor FLECHA valor repite_valores_f .

    PAREN_DER       reduce using rule 85 (valoresflecha -> valor FLECHA valor repite_valores_f .)


state 201

    (86) repite_valores_f -> COMA . valor FLECHA valor
    (87) repite_valores_f -> COMA . valor FLECHA valor repite_valores
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 211
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 202

    (83) repite_valores -> COMA valor repite_valores .

    PAREN_DER       reduce using rule 83 (repite_valores -> COMA valor repite_valores .)


state 203

    (72) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    INCREMENTO      reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    DECREMENTO      reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 72 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 204

    (49) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    INCREMENTO      reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    DECREMENTO      reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PUNTO_COMA      reduce using rule 49 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 205

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 212


state 206

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 213


state 207

    (89) sinRetorno -> FUNCTION CADENA . PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 214


state 208

    (16) asignacion -> SIGNO_DOLAR CADENA . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 215


state 209

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    INCREMENTO      reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    DECREMENTO      reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PUNTO_COMA      reduce using rule 89 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 210

    (77) retorno -> RETURN SIGNO_DOLAR . CADENA

    CADENA          shift and go to state 216


state 211

    (86) repite_valores_f -> COMA valor . FLECHA valor
    (87) repite_valores_f -> COMA valor . FLECHA valor repite_valores

    FLECHA          shift and go to state 217


state 212

    (80) whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    INCREMENTO      reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    DECREMENTO      reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PUNTO_COMA      reduce using rule 80 (whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 213

    (76) funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    INCREMENTO      reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    DECREMENTO      reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PUNTO_COMA      reduce using rule 76 (funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 214

    (89) sinRetorno -> FUNCTION CADENA PAREN_IZQ . SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    SIGNO_DOLAR     shift and go to state 124


state 215

    (16) asignacion -> SIGNO_DOLAR CADENA IGUAL . valor PUNTO_COMA
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 103
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 216

    (77) retorno -> RETURN SIGNO_DOLAR CADENA .

    LLAVE_DER       reduce using rule 77 (retorno -> RETURN SIGNO_DOLAR CADENA .)


state 217

    (86) repite_valores_f -> COMA valor FLECHA . valor
    (87) repite_valores_f -> COMA valor FLECHA . valor repite_valores
    (17) valor -> . datos
    (18) valor -> . pila
    (19) valor -> . cola
    (20) datos -> . ENTERO
    (21) datos -> . FLOTANTE
    (22) datos -> . STRING
    (23) datos -> . BOOLEANO
    (70) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (47) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER

    ENTERO          shift and go to state 149
    FLOTANTE        shift and go to state 108
    STRING          shift and go to state 109
    BOOLEANO        shift and go to state 110
    NEW             shift and go to state 37

    valor                          shift and go to state 218
    datos                          shift and go to state 17
    pila                           shift and go to state 106
    cola                           shift and go to state 107

state 218

    (86) repite_valores_f -> COMA valor FLECHA valor .
    (87) repite_valores_f -> COMA valor FLECHA valor . repite_valores
    (82) repite_valores -> . COMA valor
    (83) repite_valores -> . COMA valor repite_valores

    PAREN_DER       reduce using rule 86 (repite_valores_f -> COMA valor FLECHA valor .)
    COMA            shift and go to state 166

    repite_valores                 shift and go to state 219

state 219

    (87) repite_valores_f -> COMA valor FLECHA valor repite_valores .

    PAREN_DER       reduce using rule 87 (repite_valores_f -> COMA valor FLECHA valor repite_valores .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 19 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 23 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 23 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for PUNTO_COMA in state 104 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 187 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 187 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 187 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 187 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 187 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 187 resolved as shift
WARNING: shift/reduce conflict for STRING in state 187 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 187 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 187 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 187 resolved as shift
WARNING: shift/reduce conflict for NEW in state 187 resolved as shift
WARNING: shift/reduce conflict for FOR in state 187 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 187 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 187 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for IF in state 187 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 19
WARNING: reduce/reduce conflict in state 32 resolved using rule (datos -> BOOLEANO)
WARNING: rejected rule (op_logica -> BOOLEANO) in state 32
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
