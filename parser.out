Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    NAMESPACE
    OR
    OR_SYMB
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> valor
Rule 2     instrucciones -> asignacion
Rule 3     instrucciones -> concatenacion
Rule 4     instrucciones -> salida
Rule 5     instrucciones -> estructuras_control
Rule 6     instrucciones -> estructuras_datos
Rule 7     instrucciones -> funciones
Rule 8     instrucciones -> op_pila
Rule 9     instrucciones -> valorc
Rule 10    instrucciones -> multiples
Rule 11    instrucciones -> LLAVE_DER
Rule 12    instrucciones -> llamadaFuncion
Rule 13    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 14    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 15    valor -> datos
Rule 16    valor -> pila
Rule 17    valor -> cola
Rule 18    valor -> arreglo
Rule 19    datos -> ENTERO
Rule 20    datos -> FLOTANTE
Rule 21    datos -> STRING
Rule 22    datos -> BOOLEANO
Rule 23    salidas_pos -> datos
Rule 24    salidas_pos -> decl_variable
Rule 25    salidas_pos -> conca_string
Rule 26    multiples -> salidas_pos
Rule 27    multiples -> salidas_pos multiples
Rule 28    salida -> ECHO salidas_pos PUNTO_COMA
Rule 29    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 30    salida -> PRINT salidas_pos PUNTO_COMA
Rule 31    estructuras_control -> if_else
Rule 32    estructuras_control -> for
Rule 33    estructuras_control -> whileDeclaracion
Rule 34    estructuras_datos -> pila
Rule 35    estructuras_datos -> cola
Rule 36    estructuras_datos -> arreglo
Rule 37    funciones -> funcion_variable
Rule 38    funciones -> sinRetorno
Rule 39    funciones -> functConPar
Rule 40    operad_log -> IDENTICO
Rule 41    operad_log -> DIFERENTE
Rule 42    operad_log -> MAYOR_QUE
Rule 43    operad_log -> MAYOR_IGUAL
Rule 44    operad_log -> MENOR_QUE
Rule 45    operad_log -> MENOR_IGUAL
Rule 46    operad_arit -> SUMA
Rule 47    operad_arit -> RESTA
Rule 48    operad_arit -> MULTIPL
Rule 49    operad_arit -> DIVISION
Rule 50    operad_arit -> DIVISION_ENT
Rule 51    operad_arit -> POTENCIA
Rule 52    operad_arit -> MODULO
Rule 53    bloque -> asignacion
Rule 54    bloque -> salida
Rule 55    bloque -> retorno
Rule 56    bloque -> estructuras_control
Rule 57    bloque -> asignacion bloque
Rule 58    bloque -> salida bloque
Rule 59    bloque -> retorno bloque
Rule 60    bloque -> estructuras_control bloque
Rule 61    bloque -> multiples
Rule 62    bloque -> multiples bloque
Rule 63    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 64    sinRetorno -> cola LLAVE_DER
Rule 65    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 66    for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 67    for -> cola LLAVE_DER
Rule 68    sentenciasAnidadas -> instrucciones
Rule 69    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 70    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 71    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 72    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 73    valorc -> menor
Rule 74    valorc -> mayor
Rule 75    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 76    crecimiento -> INCREMENTO
Rule 77    crecimiento -> DECREMENTO
Rule 78    if_else -> if_else_inicio if_else_fin
Rule 79    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 80    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 81    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 82    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 83    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 84    op_logica -> ENTERO operad_log ENTERO
Rule 85    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 86    op_logica -> STRING operad_log STRING
Rule 87    op_logica -> BOOLEANO
Rule 88    op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
Rule 89    op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO
Rule 90    op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE
Rule 91    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 92    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 93    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 94    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 95    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 96    operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 97    funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 98    retorno -> RETURN salidas_pos PUNTO_COMA
Rule 99    concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA
Rule 100   conca_string -> STRING PUNTO STRING
Rule 101   salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 102   salidas_pos_obj -> valor
Rule 103   salidas_pos_obj -> decl_variable
Rule 104   salidas_pos_obj -> conca_string
Rule 105   contenido -> bloque
Rule 106   contenido -> sinRetorno
Rule 107   whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 108   valores -> datos repite_valores
Rule 109   repite_valores -> COMA datos
Rule 110   repite_valores -> COMA datos repite_valores
Rule 111   arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 112   valoresflecha -> datos FLECHA datos repite_valores_f
Rule 113   repite_valores_f -> COMA datos FLECHA datos
Rule 114   repite_valores_f -> COMA datos FLECHA datos repite_valores
Rule 115   arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 116   parametros -> datos
Rule 117   parametros -> SIGNO_DOLAR VARIABLE
Rule 118   parametrosR -> parametros
Rule 119   parametrosR -> parametros repite_parametros
Rule 120   repite_parametros -> COMA parametros
Rule 121   repite_parametros -> COMA parametros repite_parametros
Rule 122   functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 123   llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 111 115
AS                   : 
ASIG_CONCA           : 99
ASIG_OBJ             : 92
ASIG_REFER           : 
BOOLEANO             : 22 87
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 109 110 113 114 120 121
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 95
CURRENT              : 96
DECLARE              : 
DECREMENTO           : 77
DEFAULT              : 
DIFERENTE            : 41
DIVISION             : 49
DIVISION_ENT         : 50
DO                   : 
ECHO                 : 28
ELSE                 : 83
ELSEIF               : 81 82
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 19 71 72 84 84 89
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 112 113 114
FLOTANTE             : 20 85 85 90
FN                   : 
FOR                  : 66
FOREACH              : 
FUNCTION             : 63 97 122
GLOBAL               : 
IDENTICO             : 40
IF                   : 80
IGUAL                : 14 115
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 76
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 11 64 67 80 81 82 83 97 107 122
LLAVE_IZQ            : 63 66 80 81 82 83 97 107 122
MACHT                : 
MAYOR_IGUAL          : 43 72
MAYOR_QUE            : 42
MENOR_IGUAL          : 45 71
MENOR_QUE            : 44
MODULO               : 52
MULTIPL              : 48
NAMESPACE            : 
NEW                  : 65 91
OR                   : 
OR_SYMB              : 
PAREN_DER            : 29 63 65 66 80 81 82 91 93 94 95 96 97 101 107 111 115 122 123
PAREN_IZQ            : 29 63 65 66 80 81 82 91 93 94 95 96 97 101 107 111 115 122 123
POP                  : 94
POTENCIA             : 51
PRINT                : 29 30
PRINT_R              : 101
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 100
PUNTODOBLE           : 
PUNTO_COMA           : 14 28 29 30 71 72 93 94 95 96 98 99 101 115 123
PUSH                 : 93
QUEUE                : 65
REQUIERE             : 
RESTA                : 47
RETURN               : 98
SALTO_LINEA          : 
SIGNO_DOLAR          : 13 63 70 75 88 88 89 90 117
STACK                : 91
STATIC               : 
STRING               : 21 86 86 100 100
STRREV               : 
SUMA                 : 46
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 97
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 13 63 63 70 75 88 88 89 90 97 117 122 123
WHILE                : 107
error                : 

Nonterminals, with rules where they appear

arreglo              : 18 36
asignacion           : 2 53 57 66
bloque               : 57 58 59 60 62 80 81 82 83 97 105 122
cola                 : 17 35 64 67
conca_string         : 25 104
concatenacion        : 3
contenido            : 107
crecimiento          : 75
datos                : 15 23 93 99 108 109 110 112 112 113 113 114 114 116
decl_variable        : 14 24 92 97 99 103 107 115
declaracion_s        : 66
declaracionp         : 66
estructuras_control  : 5 56 60
estructuras_datos    : 6
for                  : 32
funcion_variable     : 37
funciones            : 7
functConPar          : 39
if_else              : 31
if_else_cuerpo       : 79 82
if_else_fin          : 78 79
if_else_inicio       : 78 79
instrucciones        : 68 69 0
llamadaFuncion       : 12
mayor                : 74
menor                : 73
multiples            : 10 27 61 62
op_logica            : 80 81 82
op_pila              : 8
operad_arit          : 
operad_log           : 84 85 86 88 89 90 107
operad_pila          : 92
parametros           : 118 119 120 121
parametrosR          : 122 123
pila                 : 16 34
repite_parametros    : 119 121
repite_valores       : 108 110 114
repite_valores_f     : 112
retorno              : 55 59
salida               : 4 54 58
salidas_pos          : 26 27 28 29 30 98
salidas_pos_obj      : 
sentenciasAnidadas   : 63 66 69
sinRetorno           : 38 106
valor                : 1 14 101 102 107
valorc               : 9 70
valores              : 111
valoresflecha        : 115
whileDeclaracion     : 33

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (99) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (34) estructuras_datos -> . pila
    (35) estructuras_datos -> . cola
    (36) estructuras_datos -> . arreglo
    (37) funciones -> . funcion_variable
    (38) funciones -> . sinRetorno
    (39) funciones -> . functConPar
    (92) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (73) valorc -> . menor
    (74) valorc -> . mayor
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (123) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (97) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (64) sinRetorno -> . cola LLAVE_DER
    (122) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (71) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (72) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    VARIABLE        shift and go to state 31
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    FUNCTION        shift and go to state 42
    MENOR_IGUAL     shift and go to state 43
    MAYOR_IGUAL     shift and go to state 44
    IF              shift and go to state 46

    instrucciones                  shift and go to state 1
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    decl_variable                  shift and go to state 18
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    funcion_variable               shift and go to state 26
    sinRetorno                     shift and go to state 27
    functConPar                    shift and go to state 28
    menor                          shift and go to state 29
    mayor                          shift and go to state 30
    if_else_inicio                 shift and go to state 39
    conca_string                   shift and go to state 45

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> valor .

    $end            reduce using rule 1 (instrucciones -> valor .)
    LLAVE_DER       reduce using rule 1 (instrucciones -> valor .)
    ECHO            reduce using rule 1 (instrucciones -> valor .)
    PRINT           reduce using rule 1 (instrucciones -> valor .)
    PRINT_R         reduce using rule 1 (instrucciones -> valor .)
    VARIABLE        reduce using rule 1 (instrucciones -> valor .)
    ENTERO          reduce using rule 1 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 1 (instrucciones -> valor .)
    STRING          reduce using rule 1 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 1 (instrucciones -> valor .)
    NEW             reduce using rule 1 (instrucciones -> valor .)
    ARRAY           reduce using rule 1 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 1 (instrucciones -> valor .)
    FOR             reduce using rule 1 (instrucciones -> valor .)
    WHILE           reduce using rule 1 (instrucciones -> valor .)
    FUNCTION        reduce using rule 1 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 1 (instrucciones -> valor .)
    IF              reduce using rule 1 (instrucciones -> valor .)
    RETURN          reduce using rule 1 (instrucciones -> valor .)


state 3

    (2) instrucciones -> asignacion .

    $end            reduce using rule 2 (instrucciones -> asignacion .)
    LLAVE_DER       reduce using rule 2 (instrucciones -> asignacion .)
    ECHO            reduce using rule 2 (instrucciones -> asignacion .)
    PRINT           reduce using rule 2 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 2 (instrucciones -> asignacion .)
    VARIABLE        reduce using rule 2 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 2 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> asignacion .)
    STRING          reduce using rule 2 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 2 (instrucciones -> asignacion .)
    NEW             reduce using rule 2 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 2 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 2 (instrucciones -> asignacion .)
    FOR             reduce using rule 2 (instrucciones -> asignacion .)
    WHILE           reduce using rule 2 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 2 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 2 (instrucciones -> asignacion .)
    IF              reduce using rule 2 (instrucciones -> asignacion .)
    RETURN          reduce using rule 2 (instrucciones -> asignacion .)


state 4

    (3) instrucciones -> concatenacion .

    $end            reduce using rule 3 (instrucciones -> concatenacion .)
    LLAVE_DER       reduce using rule 3 (instrucciones -> concatenacion .)
    ECHO            reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT           reduce using rule 3 (instrucciones -> concatenacion .)
    PRINT_R         reduce using rule 3 (instrucciones -> concatenacion .)
    VARIABLE        reduce using rule 3 (instrucciones -> concatenacion .)
    ENTERO          reduce using rule 3 (instrucciones -> concatenacion .)
    FLOTANTE        reduce using rule 3 (instrucciones -> concatenacion .)
    STRING          reduce using rule 3 (instrucciones -> concatenacion .)
    BOOLEANO        reduce using rule 3 (instrucciones -> concatenacion .)
    NEW             reduce using rule 3 (instrucciones -> concatenacion .)
    ARRAY           reduce using rule 3 (instrucciones -> concatenacion .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> concatenacion .)
    FOR             reduce using rule 3 (instrucciones -> concatenacion .)
    WHILE           reduce using rule 3 (instrucciones -> concatenacion .)
    FUNCTION        reduce using rule 3 (instrucciones -> concatenacion .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> concatenacion .)
    IF              reduce using rule 3 (instrucciones -> concatenacion .)
    RETURN          reduce using rule 3 (instrucciones -> concatenacion .)


state 5

    (4) instrucciones -> salida .

    $end            reduce using rule 4 (instrucciones -> salida .)
    LLAVE_DER       reduce using rule 4 (instrucciones -> salida .)
    ECHO            reduce using rule 4 (instrucciones -> salida .)
    PRINT           reduce using rule 4 (instrucciones -> salida .)
    PRINT_R         reduce using rule 4 (instrucciones -> salida .)
    VARIABLE        reduce using rule 4 (instrucciones -> salida .)
    ENTERO          reduce using rule 4 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 4 (instrucciones -> salida .)
    STRING          reduce using rule 4 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 4 (instrucciones -> salida .)
    NEW             reduce using rule 4 (instrucciones -> salida .)
    ARRAY           reduce using rule 4 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> salida .)
    FOR             reduce using rule 4 (instrucciones -> salida .)
    WHILE           reduce using rule 4 (instrucciones -> salida .)
    FUNCTION        reduce using rule 4 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> salida .)
    IF              reduce using rule 4 (instrucciones -> salida .)
    RETURN          reduce using rule 4 (instrucciones -> salida .)


state 6

    (5) instrucciones -> estructuras_control .

    $end            reduce using rule 5 (instrucciones -> estructuras_control .)
    LLAVE_DER       reduce using rule 5 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 5 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 5 (instrucciones -> estructuras_control .)
    VARIABLE        reduce using rule 5 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 5 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 5 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 5 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 5 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 5 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 5 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 5 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 5 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 5 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> estructuras_control .)
    IF              reduce using rule 5 (instrucciones -> estructuras_control .)
    RETURN          reduce using rule 5 (instrucciones -> estructuras_control .)


state 7

    (6) instrucciones -> estructuras_datos .

    $end            reduce using rule 6 (instrucciones -> estructuras_datos .)
    LLAVE_DER       reduce using rule 6 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 6 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 6 (instrucciones -> estructuras_datos .)
    VARIABLE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 6 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 6 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 6 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 6 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 6 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 6 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 6 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 6 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 6 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 6 (instrucciones -> estructuras_datos .)
    RETURN          reduce using rule 6 (instrucciones -> estructuras_datos .)


state 8

    (7) instrucciones -> funciones .

    $end            reduce using rule 7 (instrucciones -> funciones .)
    LLAVE_DER       reduce using rule 7 (instrucciones -> funciones .)
    ECHO            reduce using rule 7 (instrucciones -> funciones .)
    PRINT           reduce using rule 7 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 7 (instrucciones -> funciones .)
    VARIABLE        reduce using rule 7 (instrucciones -> funciones .)
    ENTERO          reduce using rule 7 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 7 (instrucciones -> funciones .)
    STRING          reduce using rule 7 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 7 (instrucciones -> funciones .)
    NEW             reduce using rule 7 (instrucciones -> funciones .)
    ARRAY           reduce using rule 7 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> funciones .)
    FOR             reduce using rule 7 (instrucciones -> funciones .)
    WHILE           reduce using rule 7 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 7 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> funciones .)
    IF              reduce using rule 7 (instrucciones -> funciones .)
    RETURN          reduce using rule 7 (instrucciones -> funciones .)


state 9

    (8) instrucciones -> op_pila .

    $end            reduce using rule 8 (instrucciones -> op_pila .)
    LLAVE_DER       reduce using rule 8 (instrucciones -> op_pila .)
    ECHO            reduce using rule 8 (instrucciones -> op_pila .)
    PRINT           reduce using rule 8 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 8 (instrucciones -> op_pila .)
    VARIABLE        reduce using rule 8 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 8 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 8 (instrucciones -> op_pila .)
    STRING          reduce using rule 8 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 8 (instrucciones -> op_pila .)
    NEW             reduce using rule 8 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 8 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> op_pila .)
    FOR             reduce using rule 8 (instrucciones -> op_pila .)
    WHILE           reduce using rule 8 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 8 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> op_pila .)
    IF              reduce using rule 8 (instrucciones -> op_pila .)
    RETURN          reduce using rule 8 (instrucciones -> op_pila .)


state 10

    (9) instrucciones -> valorc .

    $end            reduce using rule 9 (instrucciones -> valorc .)
    LLAVE_DER       reduce using rule 9 (instrucciones -> valorc .)
    ECHO            reduce using rule 9 (instrucciones -> valorc .)
    PRINT           reduce using rule 9 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 9 (instrucciones -> valorc .)
    VARIABLE        reduce using rule 9 (instrucciones -> valorc .)
    ENTERO          reduce using rule 9 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 9 (instrucciones -> valorc .)
    STRING          reduce using rule 9 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 9 (instrucciones -> valorc .)
    NEW             reduce using rule 9 (instrucciones -> valorc .)
    ARRAY           reduce using rule 9 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> valorc .)
    FOR             reduce using rule 9 (instrucciones -> valorc .)
    WHILE           reduce using rule 9 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 9 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> valorc .)
    IF              reduce using rule 9 (instrucciones -> valorc .)
    RETURN          reduce using rule 9 (instrucciones -> valorc .)


state 11

    (10) instrucciones -> multiples .

    $end            reduce using rule 10 (instrucciones -> multiples .)
    LLAVE_DER       reduce using rule 10 (instrucciones -> multiples .)
    ECHO            reduce using rule 10 (instrucciones -> multiples .)
    PRINT           reduce using rule 10 (instrucciones -> multiples .)
    PRINT_R         reduce using rule 10 (instrucciones -> multiples .)
    VARIABLE        reduce using rule 10 (instrucciones -> multiples .)
    ENTERO          reduce using rule 10 (instrucciones -> multiples .)
    FLOTANTE        reduce using rule 10 (instrucciones -> multiples .)
    STRING          reduce using rule 10 (instrucciones -> multiples .)
    BOOLEANO        reduce using rule 10 (instrucciones -> multiples .)
    NEW             reduce using rule 10 (instrucciones -> multiples .)
    ARRAY           reduce using rule 10 (instrucciones -> multiples .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> multiples .)
    FOR             reduce using rule 10 (instrucciones -> multiples .)
    WHILE           reduce using rule 10 (instrucciones -> multiples .)
    FUNCTION        reduce using rule 10 (instrucciones -> multiples .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> multiples .)
    IF              reduce using rule 10 (instrucciones -> multiples .)
    RETURN          reduce using rule 10 (instrucciones -> multiples .)


state 12

    (11) instrucciones -> LLAVE_DER .

    $end            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    LLAVE_DER       reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    PRINT_R         reduce using rule 11 (instrucciones -> LLAVE_DER .)
    VARIABLE        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 11 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    ARRAY           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 11 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 11 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 11 (instrucciones -> LLAVE_DER .)
    RETURN          reduce using rule 11 (instrucciones -> LLAVE_DER .)


state 13

    (12) instrucciones -> llamadaFuncion .

    $end            reduce using rule 12 (instrucciones -> llamadaFuncion .)
    LLAVE_DER       reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ECHO            reduce using rule 12 (instrucciones -> llamadaFuncion .)
    PRINT           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    PRINT_R         reduce using rule 12 (instrucciones -> llamadaFuncion .)
    VARIABLE        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ENTERO          reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FLOTANTE        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    STRING          reduce using rule 12 (instrucciones -> llamadaFuncion .)
    BOOLEANO        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    NEW             reduce using rule 12 (instrucciones -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    SIGNO_DOLAR     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FOR             reduce using rule 12 (instrucciones -> llamadaFuncion .)
    WHILE           reduce using rule 12 (instrucciones -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (instrucciones -> llamadaFuncion .)
    MENOR_IGUAL     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    MAYOR_IGUAL     reduce using rule 12 (instrucciones -> llamadaFuncion .)
    IF              reduce using rule 12 (instrucciones -> llamadaFuncion .)
    RETURN          reduce using rule 12 (instrucciones -> llamadaFuncion .)


state 14

    (15) valor -> datos .
    (23) salidas_pos -> datos .

  ! reduce/reduce conflict for ENTERO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for $end resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for ECHO resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for PRINT resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for ARRAY resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for IF resolved using rule 15 (valor -> datos .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (valor -> datos .)
    $end            reduce using rule 15 (valor -> datos .)
    LLAVE_DER       reduce using rule 15 (valor -> datos .)
    ECHO            reduce using rule 15 (valor -> datos .)
    PRINT           reduce using rule 15 (valor -> datos .)
    PRINT_R         reduce using rule 15 (valor -> datos .)
    VARIABLE        reduce using rule 15 (valor -> datos .)
    ENTERO          reduce using rule 15 (valor -> datos .)
    FLOTANTE        reduce using rule 15 (valor -> datos .)
    STRING          reduce using rule 15 (valor -> datos .)
    BOOLEANO        reduce using rule 15 (valor -> datos .)
    NEW             reduce using rule 15 (valor -> datos .)
    ARRAY           reduce using rule 15 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 15 (valor -> datos .)
    FOR             reduce using rule 15 (valor -> datos .)
    WHILE           reduce using rule 15 (valor -> datos .)
    FUNCTION        reduce using rule 15 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 15 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 15 (valor -> datos .)
    IF              reduce using rule 15 (valor -> datos .)
    RETURN          reduce using rule 15 (valor -> datos .)

  ! ENTERO          [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! FLOTANTE        [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! STRING          [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! BOOLEANO        [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! SIGNO_DOLAR     [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! $end            [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! LLAVE_DER       [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! ECHO            [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! PRINT           [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! PRINT_R         [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! VARIABLE        [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! NEW             [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! ARRAY           [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! FOR             [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! WHILE           [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! FUNCTION        [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! MENOR_IGUAL     [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! MAYOR_IGUAL     [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! IF              [ reduce using rule 23 (salidas_pos -> datos .) ]
  ! RETURN          [ reduce using rule 23 (salidas_pos -> datos .) ]


state 15

    (16) valor -> pila .
    (34) estructuras_datos -> pila .

  ! reduce/reduce conflict for $end resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 16 (valor -> pila .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (valor -> pila .)
    $end            reduce using rule 16 (valor -> pila .)
    LLAVE_DER       reduce using rule 16 (valor -> pila .)
    ECHO            reduce using rule 16 (valor -> pila .)
    PRINT           reduce using rule 16 (valor -> pila .)
    PRINT_R         reduce using rule 16 (valor -> pila .)
    VARIABLE        reduce using rule 16 (valor -> pila .)
    ENTERO          reduce using rule 16 (valor -> pila .)
    FLOTANTE        reduce using rule 16 (valor -> pila .)
    STRING          reduce using rule 16 (valor -> pila .)
    BOOLEANO        reduce using rule 16 (valor -> pila .)
    NEW             reduce using rule 16 (valor -> pila .)
    ARRAY           reduce using rule 16 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 16 (valor -> pila .)
    FOR             reduce using rule 16 (valor -> pila .)
    WHILE           reduce using rule 16 (valor -> pila .)
    FUNCTION        reduce using rule 16 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 16 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 16 (valor -> pila .)
    IF              reduce using rule 16 (valor -> pila .)
    RETURN          reduce using rule 16 (valor -> pila .)

  ! $end            [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! LLAVE_DER       [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! VARIABLE        [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 34 (estructuras_datos -> pila .) ]
  ! RETURN          [ reduce using rule 34 (estructuras_datos -> pila .) ]


state 16

    (17) valor -> cola .
    (35) estructuras_datos -> cola .
    (67) for -> cola . LLAVE_DER
    (64) sinRetorno -> cola . LLAVE_DER

  ! reduce/reduce conflict for $end resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 17 (valor -> cola .)
  ! reduce/reduce conflict for RETURN resolved using rule 17 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    $end            reduce using rule 17 (valor -> cola .)
    ECHO            reduce using rule 17 (valor -> cola .)
    PRINT           reduce using rule 17 (valor -> cola .)
    PRINT_R         reduce using rule 17 (valor -> cola .)
    VARIABLE        reduce using rule 17 (valor -> cola .)
    ENTERO          reduce using rule 17 (valor -> cola .)
    FLOTANTE        reduce using rule 17 (valor -> cola .)
    STRING          reduce using rule 17 (valor -> cola .)
    BOOLEANO        reduce using rule 17 (valor -> cola .)
    NEW             reduce using rule 17 (valor -> cola .)
    ARRAY           reduce using rule 17 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 17 (valor -> cola .)
    FOR             reduce using rule 17 (valor -> cola .)
    WHILE           reduce using rule 17 (valor -> cola .)
    FUNCTION        reduce using rule 17 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 17 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 17 (valor -> cola .)
    IF              reduce using rule 17 (valor -> cola .)
    RETURN          reduce using rule 17 (valor -> cola .)
    LLAVE_DER       shift and go to state 47

  ! LLAVE_DER       [ reduce using rule 17 (valor -> cola .) ]
  ! $end            [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! VARIABLE        [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 35 (estructuras_datos -> cola .) ]
  ! RETURN          [ reduce using rule 35 (estructuras_datos -> cola .) ]


state 17

    (18) valor -> arreglo .
    (36) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for $end resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 18 (valor -> arreglo .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (valor -> arreglo .)
    $end            reduce using rule 18 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 18 (valor -> arreglo .)
    ECHO            reduce using rule 18 (valor -> arreglo .)
    PRINT           reduce using rule 18 (valor -> arreglo .)
    PRINT_R         reduce using rule 18 (valor -> arreglo .)
    VARIABLE        reduce using rule 18 (valor -> arreglo .)
    ENTERO          reduce using rule 18 (valor -> arreglo .)
    FLOTANTE        reduce using rule 18 (valor -> arreglo .)
    STRING          reduce using rule 18 (valor -> arreglo .)
    BOOLEANO        reduce using rule 18 (valor -> arreglo .)
    NEW             reduce using rule 18 (valor -> arreglo .)
    ARRAY           reduce using rule 18 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 18 (valor -> arreglo .)
    FOR             reduce using rule 18 (valor -> arreglo .)
    WHILE           reduce using rule 18 (valor -> arreglo .)
    FUNCTION        reduce using rule 18 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 18 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 18 (valor -> arreglo .)
    IF              reduce using rule 18 (valor -> arreglo .)
    RETURN          reduce using rule 18 (valor -> arreglo .)

  ! $end            [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! LLAVE_DER       [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! VARIABLE        [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 36 (estructuras_datos -> arreglo .) ]
  ! RETURN          [ reduce using rule 36 (estructuras_datos -> arreglo .) ]


state 18

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (99) concatenacion -> decl_variable . ASIG_CONCA datos PUNTO_COMA
    (92) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (115) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (24) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 48
    ASIG_CONCA      shift and go to state 49
    ASIG_OBJ        shift and go to state 50
    ENTERO          reduce using rule 24 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 24 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 24 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 24 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 24 (salidas_pos -> decl_variable .)
    $end            reduce using rule 24 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 24 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 24 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 24 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 24 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 24 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 24 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 24 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 24 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 24 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 24 (salidas_pos -> decl_variable .)
    IF              reduce using rule 24 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 24 (salidas_pos -> decl_variable .)


state 19

    (28) salida -> ECHO . salidas_pos PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (100) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    SIGNO_DOLAR     shift and go to state 38

    salidas_pos                    shift and go to state 51
    datos                          shift and go to state 52
    decl_variable                  shift and go to state 53
    conca_string                   shift and go to state 45

state 20

    (26) multiples -> salidas_pos .
    (27) multiples -> salidas_pos . multiples
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (100) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
    $end            reduce using rule 26 (multiples -> salidas_pos .)
    ECHO            reduce using rule 26 (multiples -> salidas_pos .)
    PRINT           reduce using rule 26 (multiples -> salidas_pos .)
    PRINT_R         reduce using rule 26 (multiples -> salidas_pos .)
    RETURN          reduce using rule 26 (multiples -> salidas_pos .)
    FOR             reduce using rule 26 (multiples -> salidas_pos .)
    WHILE           reduce using rule 26 (multiples -> salidas_pos .)
    IF              reduce using rule 26 (multiples -> salidas_pos .)
    NEW             reduce using rule 26 (multiples -> salidas_pos .)
    LLAVE_DER       reduce using rule 26 (multiples -> salidas_pos .)
    VARIABLE        reduce using rule 26 (multiples -> salidas_pos .)
    ARRAY           reduce using rule 26 (multiples -> salidas_pos .)
    FUNCTION        reduce using rule 26 (multiples -> salidas_pos .)
    MENOR_IGUAL     reduce using rule 26 (multiples -> salidas_pos .)
    MAYOR_IGUAL     reduce using rule 26 (multiples -> salidas_pos .)
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    SIGNO_DOLAR     shift and go to state 38

  ! SIGNO_DOLAR     [ reduce using rule 26 (multiples -> salidas_pos .) ]
  ! ENTERO          [ reduce using rule 26 (multiples -> salidas_pos .) ]
  ! FLOTANTE        [ reduce using rule 26 (multiples -> salidas_pos .) ]
  ! STRING          [ reduce using rule 26 (multiples -> salidas_pos .) ]
  ! BOOLEANO        [ reduce using rule 26 (multiples -> salidas_pos .) ]

    salidas_pos                    shift and go to state 20
    multiples                      shift and go to state 54
    datos                          shift and go to state 52
    decl_variable                  shift and go to state 53
    conca_string                   shift and go to state 45

state 21

    (29) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> PRINT . salidas_pos PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (100) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 55
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    SIGNO_DOLAR     shift and go to state 38

    salidas_pos                    shift and go to state 56
    datos                          shift and go to state 52
    decl_variable                  shift and go to state 53
    conca_string                   shift and go to state 45

state 22

    (101) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 57


state 23

    (31) estructuras_control -> if_else .

    $end            reduce using rule 31 (estructuras_control -> if_else .)
    ECHO            reduce using rule 31 (estructuras_control -> if_else .)
    PRINT           reduce using rule 31 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 31 (estructuras_control -> if_else .)
    RETURN          reduce using rule 31 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 31 (estructuras_control -> if_else .)
    FOR             reduce using rule 31 (estructuras_control -> if_else .)
    WHILE           reduce using rule 31 (estructuras_control -> if_else .)
    IF              reduce using rule 31 (estructuras_control -> if_else .)
    NEW             reduce using rule 31 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 31 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 31 (estructuras_control -> if_else .)
    STRING          reduce using rule 31 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 31 (estructuras_control -> if_else .)
    LLAVE_DER       reduce using rule 31 (estructuras_control -> if_else .)
    VARIABLE        reduce using rule 31 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 31 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 31 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 31 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 31 (estructuras_control -> if_else .)


state 24

    (32) estructuras_control -> for .

    $end            reduce using rule 32 (estructuras_control -> for .)
    ECHO            reduce using rule 32 (estructuras_control -> for .)
    PRINT           reduce using rule 32 (estructuras_control -> for .)
    PRINT_R         reduce using rule 32 (estructuras_control -> for .)
    RETURN          reduce using rule 32 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 32 (estructuras_control -> for .)
    FOR             reduce using rule 32 (estructuras_control -> for .)
    WHILE           reduce using rule 32 (estructuras_control -> for .)
    IF              reduce using rule 32 (estructuras_control -> for .)
    NEW             reduce using rule 32 (estructuras_control -> for .)
    ENTERO          reduce using rule 32 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 32 (estructuras_control -> for .)
    STRING          reduce using rule 32 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 32 (estructuras_control -> for .)
    LLAVE_DER       reduce using rule 32 (estructuras_control -> for .)
    VARIABLE        reduce using rule 32 (estructuras_control -> for .)
    ARRAY           reduce using rule 32 (estructuras_control -> for .)
    FUNCTION        reduce using rule 32 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 32 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 32 (estructuras_control -> for .)


state 25

    (33) estructuras_control -> whileDeclaracion .

    $end            reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    RETURN          reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    LLAVE_DER       reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    VARIABLE        reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 33 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 33 (estructuras_control -> whileDeclaracion .)


state 26

    (37) funciones -> funcion_variable .

    $end            reduce using rule 37 (funciones -> funcion_variable .)
    LLAVE_DER       reduce using rule 37 (funciones -> funcion_variable .)
    ECHO            reduce using rule 37 (funciones -> funcion_variable .)
    PRINT           reduce using rule 37 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 37 (funciones -> funcion_variable .)
    VARIABLE        reduce using rule 37 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 37 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 37 (funciones -> funcion_variable .)
    STRING          reduce using rule 37 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 37 (funciones -> funcion_variable .)
    NEW             reduce using rule 37 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 37 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 37 (funciones -> funcion_variable .)
    FOR             reduce using rule 37 (funciones -> funcion_variable .)
    WHILE           reduce using rule 37 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 37 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 37 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 37 (funciones -> funcion_variable .)
    IF              reduce using rule 37 (funciones -> funcion_variable .)
    RETURN          reduce using rule 37 (funciones -> funcion_variable .)


state 27

    (38) funciones -> sinRetorno .

    $end            reduce using rule 38 (funciones -> sinRetorno .)
    LLAVE_DER       reduce using rule 38 (funciones -> sinRetorno .)
    ECHO            reduce using rule 38 (funciones -> sinRetorno .)
    PRINT           reduce using rule 38 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 38 (funciones -> sinRetorno .)
    VARIABLE        reduce using rule 38 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 38 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 38 (funciones -> sinRetorno .)
    STRING          reduce using rule 38 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 38 (funciones -> sinRetorno .)
    NEW             reduce using rule 38 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 38 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 38 (funciones -> sinRetorno .)
    FOR             reduce using rule 38 (funciones -> sinRetorno .)
    WHILE           reduce using rule 38 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 38 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 38 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 38 (funciones -> sinRetorno .)
    IF              reduce using rule 38 (funciones -> sinRetorno .)
    RETURN          reduce using rule 38 (funciones -> sinRetorno .)


state 28

    (39) funciones -> functConPar .

    $end            reduce using rule 39 (funciones -> functConPar .)
    LLAVE_DER       reduce using rule 39 (funciones -> functConPar .)
    ECHO            reduce using rule 39 (funciones -> functConPar .)
    PRINT           reduce using rule 39 (funciones -> functConPar .)
    PRINT_R         reduce using rule 39 (funciones -> functConPar .)
    VARIABLE        reduce using rule 39 (funciones -> functConPar .)
    ENTERO          reduce using rule 39 (funciones -> functConPar .)
    FLOTANTE        reduce using rule 39 (funciones -> functConPar .)
    STRING          reduce using rule 39 (funciones -> functConPar .)
    BOOLEANO        reduce using rule 39 (funciones -> functConPar .)
    NEW             reduce using rule 39 (funciones -> functConPar .)
    ARRAY           reduce using rule 39 (funciones -> functConPar .)
    SIGNO_DOLAR     reduce using rule 39 (funciones -> functConPar .)
    FOR             reduce using rule 39 (funciones -> functConPar .)
    WHILE           reduce using rule 39 (funciones -> functConPar .)
    FUNCTION        reduce using rule 39 (funciones -> functConPar .)
    MENOR_IGUAL     reduce using rule 39 (funciones -> functConPar .)
    MAYOR_IGUAL     reduce using rule 39 (funciones -> functConPar .)
    IF              reduce using rule 39 (funciones -> functConPar .)
    RETURN          reduce using rule 39 (funciones -> functConPar .)


state 29

    (73) valorc -> menor .

    $end            reduce using rule 73 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 73 (valorc -> menor .)
    LLAVE_DER       reduce using rule 73 (valorc -> menor .)
    ECHO            reduce using rule 73 (valorc -> menor .)
    PRINT           reduce using rule 73 (valorc -> menor .)
    PRINT_R         reduce using rule 73 (valorc -> menor .)
    VARIABLE        reduce using rule 73 (valorc -> menor .)
    ENTERO          reduce using rule 73 (valorc -> menor .)
    FLOTANTE        reduce using rule 73 (valorc -> menor .)
    STRING          reduce using rule 73 (valorc -> menor .)
    BOOLEANO        reduce using rule 73 (valorc -> menor .)
    NEW             reduce using rule 73 (valorc -> menor .)
    ARRAY           reduce using rule 73 (valorc -> menor .)
    FOR             reduce using rule 73 (valorc -> menor .)
    WHILE           reduce using rule 73 (valorc -> menor .)
    FUNCTION        reduce using rule 73 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 73 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 73 (valorc -> menor .)
    IF              reduce using rule 73 (valorc -> menor .)
    RETURN          reduce using rule 73 (valorc -> menor .)


state 30

    (74) valorc -> mayor .

    $end            reduce using rule 74 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 74 (valorc -> mayor .)
    LLAVE_DER       reduce using rule 74 (valorc -> mayor .)
    ECHO            reduce using rule 74 (valorc -> mayor .)
    PRINT           reduce using rule 74 (valorc -> mayor .)
    PRINT_R         reduce using rule 74 (valorc -> mayor .)
    VARIABLE        reduce using rule 74 (valorc -> mayor .)
    ENTERO          reduce using rule 74 (valorc -> mayor .)
    FLOTANTE        reduce using rule 74 (valorc -> mayor .)
    STRING          reduce using rule 74 (valorc -> mayor .)
    BOOLEANO        reduce using rule 74 (valorc -> mayor .)
    NEW             reduce using rule 74 (valorc -> mayor .)
    ARRAY           reduce using rule 74 (valorc -> mayor .)
    FOR             reduce using rule 74 (valorc -> mayor .)
    WHILE           reduce using rule 74 (valorc -> mayor .)
    FUNCTION        reduce using rule 74 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 74 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 74 (valorc -> mayor .)
    IF              reduce using rule 74 (valorc -> mayor .)
    RETURN          reduce using rule 74 (valorc -> mayor .)


state 31

    (123) llamadaFuncion -> VARIABLE . PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 58


state 32

    (19) datos -> ENTERO .

    $end            reduce using rule 19 (datos -> ENTERO .)
    ENTERO          reduce using rule 19 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 19 (datos -> ENTERO .)
    STRING          reduce using rule 19 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 19 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 19 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 19 (datos -> ENTERO .)
    ECHO            reduce using rule 19 (datos -> ENTERO .)
    PRINT           reduce using rule 19 (datos -> ENTERO .)
    PRINT_R         reduce using rule 19 (datos -> ENTERO .)
    RETURN          reduce using rule 19 (datos -> ENTERO .)
    FOR             reduce using rule 19 (datos -> ENTERO .)
    WHILE           reduce using rule 19 (datos -> ENTERO .)
    IF              reduce using rule 19 (datos -> ENTERO .)
    NEW             reduce using rule 19 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 19 (datos -> ENTERO .)
    VARIABLE        reduce using rule 19 (datos -> ENTERO .)
    ARRAY           reduce using rule 19 (datos -> ENTERO .)
    FUNCTION        reduce using rule 19 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 19 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 19 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 19 (datos -> ENTERO .)
    COMA            reduce using rule 19 (datos -> ENTERO .)
    FLECHA          reduce using rule 19 (datos -> ENTERO .)


state 33

    (20) datos -> FLOTANTE .

    $end            reduce using rule 20 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 20 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 20 (datos -> FLOTANTE .)
    STRING          reduce using rule 20 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 20 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 20 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 20 (datos -> FLOTANTE .)
    ECHO            reduce using rule 20 (datos -> FLOTANTE .)
    PRINT           reduce using rule 20 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 20 (datos -> FLOTANTE .)
    RETURN          reduce using rule 20 (datos -> FLOTANTE .)
    FOR             reduce using rule 20 (datos -> FLOTANTE .)
    WHILE           reduce using rule 20 (datos -> FLOTANTE .)
    IF              reduce using rule 20 (datos -> FLOTANTE .)
    NEW             reduce using rule 20 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 20 (datos -> FLOTANTE .)
    VARIABLE        reduce using rule 20 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 20 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 20 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 20 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 20 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 20 (datos -> FLOTANTE .)
    COMA            reduce using rule 20 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 20 (datos -> FLOTANTE .)


state 34

    (21) datos -> STRING .
    (100) conca_string -> STRING . PUNTO STRING

    $end            reduce using rule 21 (datos -> STRING .)
    ENTERO          reduce using rule 21 (datos -> STRING .)
    FLOTANTE        reduce using rule 21 (datos -> STRING .)
    STRING          reduce using rule 21 (datos -> STRING .)
    BOOLEANO        reduce using rule 21 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 21 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 21 (datos -> STRING .)
    ECHO            reduce using rule 21 (datos -> STRING .)
    PRINT           reduce using rule 21 (datos -> STRING .)
    PRINT_R         reduce using rule 21 (datos -> STRING .)
    RETURN          reduce using rule 21 (datos -> STRING .)
    FOR             reduce using rule 21 (datos -> STRING .)
    WHILE           reduce using rule 21 (datos -> STRING .)
    IF              reduce using rule 21 (datos -> STRING .)
    NEW             reduce using rule 21 (datos -> STRING .)
    LLAVE_DER       reduce using rule 21 (datos -> STRING .)
    VARIABLE        reduce using rule 21 (datos -> STRING .)
    ARRAY           reduce using rule 21 (datos -> STRING .)
    FUNCTION        reduce using rule 21 (datos -> STRING .)
    MENOR_IGUAL     reduce using rule 21 (datos -> STRING .)
    MAYOR_IGUAL     reduce using rule 21 (datos -> STRING .)
    PAREN_DER       reduce using rule 21 (datos -> STRING .)
    PUNTO           shift and go to state 59


state 35

    (22) datos -> BOOLEANO .

    $end            reduce using rule 22 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 22 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 22 (datos -> BOOLEANO .)
    STRING          reduce using rule 22 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 22 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 22 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 22 (datos -> BOOLEANO .)
    ECHO            reduce using rule 22 (datos -> BOOLEANO .)
    PRINT           reduce using rule 22 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 22 (datos -> BOOLEANO .)
    RETURN          reduce using rule 22 (datos -> BOOLEANO .)
    FOR             reduce using rule 22 (datos -> BOOLEANO .)
    WHILE           reduce using rule 22 (datos -> BOOLEANO .)
    IF              reduce using rule 22 (datos -> BOOLEANO .)
    NEW             reduce using rule 22 (datos -> BOOLEANO .)
    LLAVE_DER       reduce using rule 22 (datos -> BOOLEANO .)
    VARIABLE        reduce using rule 22 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 22 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 22 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 22 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 22 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 22 (datos -> BOOLEANO .)
    COMA            reduce using rule 22 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 22 (datos -> BOOLEANO .)


state 36

    (91) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (65) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 60
    QUEUE           shift and go to state 61


state 37

    (111) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 62


state 38

    (13) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 63


state 39

    (78) if_else -> if_else_inicio . if_else_fin
    (79) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (83) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (81) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 66
    ELSEIF          shift and go to state 67

    if_else_fin                    shift and go to state 64
    if_else_cuerpo                 shift and go to state 65

state 40

    (66) for -> FOR . PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 68


state 41

    (107) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 69


state 42

    (97) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (122) functConPar -> FUNCTION . VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    VARIABLE        shift and go to state 70


state 43

    (71) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 71


state 44

    (72) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 72


state 45

    (25) salidas_pos -> conca_string .

    ENTERO          reduce using rule 25 (salidas_pos -> conca_string .)
    FLOTANTE        reduce using rule 25 (salidas_pos -> conca_string .)
    STRING          reduce using rule 25 (salidas_pos -> conca_string .)
    BOOLEANO        reduce using rule 25 (salidas_pos -> conca_string .)
    SIGNO_DOLAR     reduce using rule 25 (salidas_pos -> conca_string .)
    $end            reduce using rule 25 (salidas_pos -> conca_string .)
    PUNTO_COMA      reduce using rule 25 (salidas_pos -> conca_string .)
    ECHO            reduce using rule 25 (salidas_pos -> conca_string .)
    PRINT           reduce using rule 25 (salidas_pos -> conca_string .)
    PRINT_R         reduce using rule 25 (salidas_pos -> conca_string .)
    RETURN          reduce using rule 25 (salidas_pos -> conca_string .)
    FOR             reduce using rule 25 (salidas_pos -> conca_string .)
    WHILE           reduce using rule 25 (salidas_pos -> conca_string .)
    IF              reduce using rule 25 (salidas_pos -> conca_string .)
    NEW             reduce using rule 25 (salidas_pos -> conca_string .)
    LLAVE_DER       reduce using rule 25 (salidas_pos -> conca_string .)
    VARIABLE        reduce using rule 25 (salidas_pos -> conca_string .)
    ARRAY           reduce using rule 25 (salidas_pos -> conca_string .)
    FUNCTION        reduce using rule 25 (salidas_pos -> conca_string .)
    MENOR_IGUAL     reduce using rule 25 (salidas_pos -> conca_string .)
    MAYOR_IGUAL     reduce using rule 25 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 25 (salidas_pos -> conca_string .)


state 46

    (80) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 73


state 47

    (67) for -> cola LLAVE_DER .
    (64) sinRetorno -> cola LLAVE_DER .

  ! reduce/reduce conflict for $end resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ECHO resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for STRING resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for NEW resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ARRAY resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for IF resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
    $end            reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    PRINT           reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    VARIABLE        reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    ENTERO          reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    STRING          reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    NEW             reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    ARRAY           reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    FOR             reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    WHILE           reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    IF              reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    RETURN          reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)

  ! $end            [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! LLAVE_DER       [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! ECHO            [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! PRINT           [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! PRINT_R         [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! VARIABLE        [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! ENTERO          [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! FLOTANTE        [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! STRING          [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! BOOLEANO        [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! NEW             [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! ARRAY           [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! SIGNO_DOLAR     [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! FOR             [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! WHILE           [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! FUNCTION        [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! MENOR_IGUAL     [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! MAYOR_IGUAL     [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! IF              [ reduce using rule 67 (for -> cola LLAVE_DER .) ]
  ! RETURN          [ reduce using rule 67 (for -> cola LLAVE_DER .) ]


state 48

    (14) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (115) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    ARRAY           shift and go to state 76
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    SIGNO_DOLAR     shift and go to state 38

    decl_variable                  shift and go to state 74
    valor                          shift and go to state 75
    datos                          shift and go to state 77
    pila                           shift and go to state 78
    cola                           shift and go to state 79
    arreglo                        shift and go to state 80

state 49

    (99) concatenacion -> decl_variable ASIG_CONCA . datos PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 82

state 50

    (92) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (93) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (94) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (95) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (96) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 84
    POP             shift and go to state 85
    COUNT           shift and go to state 86
    CURRENT         shift and go to state 87

    operad_pila                    shift and go to state 83

state 51

    (28) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 88


state 52

    (23) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 23 (salidas_pos -> datos .)
    ENTERO          reduce using rule 23 (salidas_pos -> datos .)
    FLOTANTE        reduce using rule 23 (salidas_pos -> datos .)
    STRING          reduce using rule 23 (salidas_pos -> datos .)
    BOOLEANO        reduce using rule 23 (salidas_pos -> datos .)
    SIGNO_DOLAR     reduce using rule 23 (salidas_pos -> datos .)
    $end            reduce using rule 23 (salidas_pos -> datos .)
    ECHO            reduce using rule 23 (salidas_pos -> datos .)
    PRINT           reduce using rule 23 (salidas_pos -> datos .)
    PRINT_R         reduce using rule 23 (salidas_pos -> datos .)
    RETURN          reduce using rule 23 (salidas_pos -> datos .)
    FOR             reduce using rule 23 (salidas_pos -> datos .)
    WHILE           reduce using rule 23 (salidas_pos -> datos .)
    IF              reduce using rule 23 (salidas_pos -> datos .)
    NEW             reduce using rule 23 (salidas_pos -> datos .)
    LLAVE_DER       reduce using rule 23 (salidas_pos -> datos .)
    VARIABLE        reduce using rule 23 (salidas_pos -> datos .)
    ARRAY           reduce using rule 23 (salidas_pos -> datos .)
    FUNCTION        reduce using rule 23 (salidas_pos -> datos .)
    MENOR_IGUAL     reduce using rule 23 (salidas_pos -> datos .)
    MAYOR_IGUAL     reduce using rule 23 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 23 (salidas_pos -> datos .)


state 53

    (24) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 24 (salidas_pos -> decl_variable .)
    ENTERO          reduce using rule 24 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 24 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 24 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 24 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 24 (salidas_pos -> decl_variable .)
    $end            reduce using rule 24 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 24 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 24 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 24 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 24 (salidas_pos -> decl_variable .)
    IF              reduce using rule 24 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 24 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 24 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 24 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 24 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 24 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 24 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 24 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 24 (salidas_pos -> decl_variable .)


state 54

    (27) multiples -> salidas_pos multiples .

    $end            reduce using rule 27 (multiples -> salidas_pos multiples .)
    ECHO            reduce using rule 27 (multiples -> salidas_pos multiples .)
    PRINT           reduce using rule 27 (multiples -> salidas_pos multiples .)
    PRINT_R         reduce using rule 27 (multiples -> salidas_pos multiples .)
    RETURN          reduce using rule 27 (multiples -> salidas_pos multiples .)
    SIGNO_DOLAR     reduce using rule 27 (multiples -> salidas_pos multiples .)
    FOR             reduce using rule 27 (multiples -> salidas_pos multiples .)
    WHILE           reduce using rule 27 (multiples -> salidas_pos multiples .)
    IF              reduce using rule 27 (multiples -> salidas_pos multiples .)
    NEW             reduce using rule 27 (multiples -> salidas_pos multiples .)
    ENTERO          reduce using rule 27 (multiples -> salidas_pos multiples .)
    FLOTANTE        reduce using rule 27 (multiples -> salidas_pos multiples .)
    STRING          reduce using rule 27 (multiples -> salidas_pos multiples .)
    BOOLEANO        reduce using rule 27 (multiples -> salidas_pos multiples .)
    LLAVE_DER       reduce using rule 27 (multiples -> salidas_pos multiples .)
    VARIABLE        reduce using rule 27 (multiples -> salidas_pos multiples .)
    ARRAY           reduce using rule 27 (multiples -> salidas_pos multiples .)
    FUNCTION        reduce using rule 27 (multiples -> salidas_pos multiples .)
    MENOR_IGUAL     reduce using rule 27 (multiples -> salidas_pos multiples .)
    MAYOR_IGUAL     reduce using rule 27 (multiples -> salidas_pos multiples .)


state 55

    (29) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (100) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    SIGNO_DOLAR     shift and go to state 38

    salidas_pos                    shift and go to state 89
    datos                          shift and go to state 52
    decl_variable                  shift and go to state 53
    conca_string                   shift and go to state 45

state 56

    (30) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 90


state 57

    (101) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38

    valor                          shift and go to state 91
    datos                          shift and go to state 77
    pila                           shift and go to state 78
    cola                           shift and go to state 79
    arreglo                        shift and go to state 80
    decl_variable                  shift and go to state 74

state 58

    (123) llamadaFuncion -> VARIABLE PAREN_IZQ . parametrosR PAREN_DER PUNTO_COMA
    (118) parametrosR -> . parametros
    (119) parametrosR -> . parametros repite_parametros
    (116) parametros -> . datos
    (117) parametros -> . SIGNO_DOLAR VARIABLE
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 95
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    parametrosR                    shift and go to state 92
    parametros                     shift and go to state 93
    datos                          shift and go to state 94

state 59

    (100) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 96


state 60

    (91) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 97


state 61

    (65) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 98


state 62

    (111) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (108) valores -> . datos repite_valores
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    valores                        shift and go to state 99
    datos                          shift and go to state 100

state 63

    (13) decl_variable -> SIGNO_DOLAR VARIABLE .

    IGUAL           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_CONCA      reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_OBJ        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PUNTO_COMA      reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 13 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 64

    (78) if_else -> if_else_inicio if_else_fin .

    $end            reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    RETURN          reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    LLAVE_DER       reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    VARIABLE        reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 78 (if_else -> if_else_inicio if_else_fin .)


state 65

    (79) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (83) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 66

    if_else_fin                    shift and go to state 101

state 66

    (83) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 102


state 67

    (81) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 103


state 68

    (66) for -> FOR PAREN_IZQ . asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 38

    asignacion                     shift and go to state 104
    decl_variable                  shift and go to state 105

state 69

    (107) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 38

    decl_variable                  shift and go to state 106

state 70

    (97) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (122) functConPar -> FUNCTION VARIABLE . PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 107


state 71

    (71) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 108


state 72

    (72) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 109


state 73

    (80) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (84) op_logica -> . ENTERO operad_log ENTERO
    (85) op_logica -> . FLOTANTE operad_log FLOTANTE
    (86) op_logica -> . STRING operad_log STRING
    (87) op_logica -> . BOOLEANO
    (88) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (89) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (90) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 111
    FLOTANTE        shift and go to state 112
    STRING          shift and go to state 113
    BOOLEANO        shift and go to state 114
    SIGNO_DOLAR     shift and go to state 115

    op_logica                      shift and go to state 110

state 74

    (115) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 116


state 75

    (14) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 117


state 76

    (115) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (111) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 118


state 77

    (15) valor -> datos .

    PUNTO_COMA      reduce using rule 15 (valor -> datos .)
    PAREN_DER       reduce using rule 15 (valor -> datos .)


state 78

    (16) valor -> pila .

    PUNTO_COMA      reduce using rule 16 (valor -> pila .)
    PAREN_DER       reduce using rule 16 (valor -> pila .)


state 79

    (17) valor -> cola .

    PUNTO_COMA      reduce using rule 17 (valor -> cola .)
    PAREN_DER       reduce using rule 17 (valor -> cola .)


state 80

    (18) valor -> arreglo .

    PUNTO_COMA      reduce using rule 18 (valor -> arreglo .)
    PAREN_DER       reduce using rule 18 (valor -> arreglo .)


state 81

    (21) datos -> STRING .

    PUNTO_COMA      reduce using rule 21 (datos -> STRING .)
    PAREN_DER       reduce using rule 21 (datos -> STRING .)
    COMA            reduce using rule 21 (datos -> STRING .)
    FLECHA          reduce using rule 21 (datos -> STRING .)


state 82

    (99) concatenacion -> decl_variable ASIG_CONCA datos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 119


state 83

    (92) op_pila -> decl_variable ASIG_OBJ operad_pila .

    $end            reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    LLAVE_DER       reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    VARIABLE        reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    RETURN          reduce using rule 92 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 84

    (93) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 120


state 85

    (94) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 121


state 86

    (95) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 122


state 87

    (96) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 123


state 88

    (28) salida -> ECHO salidas_pos PUNTO_COMA .

    $end            reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 28 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 89

    (29) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 124


state 90

    (30) salida -> PRINT salidas_pos PUNTO_COMA .

    $end            reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 30 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 91

    (101) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 125


state 92

    (123) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 126


state 93

    (118) parametrosR -> parametros .
    (119) parametrosR -> parametros . repite_parametros
    (120) repite_parametros -> . COMA parametros
    (121) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 118 (parametrosR -> parametros .)
    COMA            shift and go to state 128

    repite_parametros              shift and go to state 127

state 94

    (116) parametros -> datos .

    COMA            reduce using rule 116 (parametros -> datos .)
    PAREN_DER       reduce using rule 116 (parametros -> datos .)


state 95

    (117) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 129


state 96

    (100) conca_string -> STRING PUNTO STRING .

    ENTERO          reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    FLOTANTE        reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    STRING          reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    BOOLEANO        reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    SIGNO_DOLAR     reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    $end            reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    PUNTO_COMA      reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    ECHO            reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    PRINT           reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    PRINT_R         reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    RETURN          reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    FOR             reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    WHILE           reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    IF              reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    NEW             reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    LLAVE_DER       reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    VARIABLE        reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    ARRAY           reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    FUNCTION        reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    MENOR_IGUAL     reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    MAYOR_IGUAL     reduce using rule 100 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 100 (conca_string -> STRING PUNTO STRING .)


state 97

    (91) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 130


state 98

    (65) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 131


state 99

    (111) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 132


state 100

    (108) valores -> datos . repite_valores
    (109) repite_valores -> . COMA datos
    (110) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 134

    repite_valores                 shift and go to state 133

state 101

    (79) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    $end            reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    RETURN          reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    LLAVE_DER       reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    VARIABLE        reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 79 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 102

    (83) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    bloque                         shift and go to state 135
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 103

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (84) op_logica -> . ENTERO operad_log ENTERO
    (85) op_logica -> . FLOTANTE operad_log FLOTANTE
    (86) op_logica -> . STRING operad_log STRING
    (87) op_logica -> . BOOLEANO
    (88) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (89) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (90) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 111
    FLOTANTE        shift and go to state 112
    STRING          shift and go to state 113
    BOOLEANO        shift and go to state 114
    SIGNO_DOLAR     shift and go to state 115

    op_logica                      shift and go to state 145

state 104

    (66) for -> FOR PAREN_IZQ asignacion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (70) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 147

    declaracionp                   shift and go to state 146

state 105

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 148


state 106

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 150
    DIFERENTE       shift and go to state 151
    MAYOR_QUE       shift and go to state 152
    MAYOR_IGUAL     shift and go to state 153
    MENOR_QUE       shift and go to state 154
    MENOR_IGUAL     shift and go to state 155

    operad_log                     shift and go to state 149

state 107

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ . parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (118) parametrosR -> . parametros
    (119) parametrosR -> . parametros repite_parametros
    (116) parametros -> . datos
    (117) parametros -> . SIGNO_DOLAR VARIABLE
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    TRES_PUNTOS     shift and go to state 156
    SIGNO_DOLAR     shift and go to state 157
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    parametrosR                    shift and go to state 158
    parametros                     shift and go to state 93
    datos                          shift and go to state 94

state 108

    (71) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 71 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 109

    (72) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    $end            reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    LLAVE_DER       reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 72 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 110

    (80) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 159


state 111

    (84) op_logica -> ENTERO . operad_log ENTERO
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 150
    DIFERENTE       shift and go to state 151
    MAYOR_QUE       shift and go to state 152
    MAYOR_IGUAL     shift and go to state 153
    MENOR_QUE       shift and go to state 154
    MENOR_IGUAL     shift and go to state 155

    operad_log                     shift and go to state 160

state 112

    (85) op_logica -> FLOTANTE . operad_log FLOTANTE
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 150
    DIFERENTE       shift and go to state 151
    MAYOR_QUE       shift and go to state 152
    MAYOR_IGUAL     shift and go to state 153
    MENOR_QUE       shift and go to state 154
    MENOR_IGUAL     shift and go to state 155

    operad_log                     shift and go to state 161

state 113

    (86) op_logica -> STRING . operad_log STRING
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 150
    DIFERENTE       shift and go to state 151
    MAYOR_QUE       shift and go to state 152
    MAYOR_IGUAL     shift and go to state 153
    MENOR_QUE       shift and go to state 154
    MENOR_IGUAL     shift and go to state 155

    operad_log                     shift and go to state 162

state 114

    (87) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 87 (op_logica -> BOOLEANO .)


state 115

    (88) op_logica -> SIGNO_DOLAR . VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (89) op_logica -> SIGNO_DOLAR . VARIABLE operad_log ENTERO
    (90) op_logica -> SIGNO_DOLAR . VARIABLE operad_log FLOTANTE

    VARIABLE        shift and go to state 163


state 116

    (115) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 164


state 117

    (14) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    $end            reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    RETURN          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    LLAVE_DER       reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    VARIABLE        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 14 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 118

    (115) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (111) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (112) valoresflecha -> . datos FLECHA datos repite_valores_f
    (108) valores -> . datos repite_valores
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    valoresflecha                  shift and go to state 165
    valores                        shift and go to state 99
    datos                          shift and go to state 166

state 119

    (99) concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .

    $end            reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ECHO            reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT           reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT_R         reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    VARIABLE        reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ENTERO          reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FLOTANTE        reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    STRING          reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    BOOLEANO        reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    NEW             reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ARRAY           reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FOR             reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    WHILE           reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FUNCTION        reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    IF              reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    RETURN          reduce using rule 99 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)


state 120

    (93) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 167

state 121

    (94) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 168


state 122

    (95) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 169


state 123

    (96) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 170


state 124

    (29) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 171


state 125

    (101) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 172


state 126

    (123) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 173


state 127

    (119) parametrosR -> parametros repite_parametros .

    PAREN_DER       reduce using rule 119 (parametrosR -> parametros repite_parametros .)


state 128

    (120) repite_parametros -> COMA . parametros
    (121) repite_parametros -> COMA . parametros repite_parametros
    (116) parametros -> . datos
    (117) parametros -> . SIGNO_DOLAR VARIABLE
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 95
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    parametros                     shift and go to state 174
    datos                          shift and go to state 94

state 129

    (117) parametros -> SIGNO_DOLAR VARIABLE .

    COMA            reduce using rule 117 (parametros -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 117 (parametros -> SIGNO_DOLAR VARIABLE .)


state 130

    (91) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    $end            reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    LLAVE_DER       reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 91 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 131

    (65) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 65 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 132

    (111) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    $end            reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    LLAVE_DER       reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    VARIABLE        reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    RETURN          reduce using rule 111 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 133

    (108) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 108 (valores -> datos repite_valores .)


state 134

    (109) repite_valores -> COMA . datos
    (110) repite_valores -> COMA . datos repite_valores
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 175

state 135

    (83) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 176


state 136

    (53) bloque -> asignacion .
    (57) bloque -> asignacion . bloque
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 53 (bloque -> asignacion .)
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    asignacion                     shift and go to state 136
    bloque                         shift and go to state 177
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 137

    (54) bloque -> salida .
    (58) bloque -> salida . bloque
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 54 (bloque -> salida .)
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    salida                         shift and go to state 137
    bloque                         shift and go to state 178
    asignacion                     shift and go to state 136
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 138

    (55) bloque -> retorno .
    (59) bloque -> retorno . bloque
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 55 (bloque -> retorno .)
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    retorno                        shift and go to state 138
    bloque                         shift and go to state 179
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 139

    (56) bloque -> estructuras_control .
    (60) bloque -> estructuras_control . bloque
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 56 (bloque -> estructuras_control .)
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    estructuras_control            shift and go to state 139
    bloque                         shift and go to state 180
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 140

    (61) bloque -> multiples .
    (62) bloque -> multiples . bloque
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 61 (bloque -> multiples .)
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    multiples                      shift and go to state 140
    bloque                         shift and go to state 181
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 141

    (14) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (24) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 148
    ENTERO          reduce using rule 24 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 24 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 24 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 24 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 24 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 24 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 24 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 24 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 24 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 24 (salidas_pos -> decl_variable .)
    IF              reduce using rule 24 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 24 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 24 (salidas_pos -> decl_variable .)


state 142

    (98) retorno -> RETURN . salidas_pos PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (100) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    SIGNO_DOLAR     shift and go to state 38

    salidas_pos                    shift and go to state 182
    datos                          shift and go to state 52
    decl_variable                  shift and go to state 53
    conca_string                   shift and go to state 45

state 143

    (67) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 183


state 144

    (65) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 61


state 145

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 184


state 146

    (66) for -> FOR PAREN_IZQ asignacion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (75) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 186

    declaracion_s                  shift and go to state 185

state 147

    (70) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 187


state 148

    (14) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38

    decl_variable                  shift and go to state 74
    valor                          shift and go to state 75
    datos                          shift and go to state 77
    pila                           shift and go to state 78
    cola                           shift and go to state 79
    arreglo                        shift and go to state 80

state 149

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38

    decl_variable                  shift and go to state 74
    valor                          shift and go to state 188
    datos                          shift and go to state 77
    pila                           shift and go to state 78
    cola                           shift and go to state 79
    arreglo                        shift and go to state 80

state 150

    (40) operad_log -> IDENTICO .

    ENTERO          reduce using rule 40 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 40 (operad_log -> IDENTICO .)
    STRING          reduce using rule 40 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 40 (operad_log -> IDENTICO .)
    NEW             reduce using rule 40 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 40 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 40 (operad_log -> IDENTICO .)


state 151

    (41) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 41 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 41 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 41 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 41 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 41 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 41 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 41 (operad_log -> DIFERENTE .)


state 152

    (42) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 42 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 42 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 42 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 42 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 42 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 42 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 42 (operad_log -> MAYOR_QUE .)


state 153

    (43) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 43 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 43 (operad_log -> MAYOR_IGUAL .)


state 154

    (44) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 44 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 44 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 44 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 44 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 44 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 44 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 44 (operad_log -> MENOR_QUE .)


state 155

    (45) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 45 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 45 (operad_log -> MENOR_IGUAL .)


state 156

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 38

    decl_variable                  shift and go to state 189

state 157

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (117) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 190


state 158

    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 191


state 159

    (80) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 192


state 160

    (84) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 193


state 161

    (85) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 194


state 162

    (86) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 195


state 163

    (88) op_logica -> SIGNO_DOLAR VARIABLE . operad_log SIGNO_DOLAR VARIABLE
    (89) op_logica -> SIGNO_DOLAR VARIABLE . operad_log ENTERO
    (90) op_logica -> SIGNO_DOLAR VARIABLE . operad_log FLOTANTE
    (40) operad_log -> . IDENTICO
    (41) operad_log -> . DIFERENTE
    (42) operad_log -> . MAYOR_QUE
    (43) operad_log -> . MAYOR_IGUAL
    (44) operad_log -> . MENOR_QUE
    (45) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 150
    DIFERENTE       shift and go to state 151
    MAYOR_QUE       shift and go to state 152
    MAYOR_IGUAL     shift and go to state 153
    MENOR_QUE       shift and go to state 154
    MENOR_IGUAL     shift and go to state 155

    operad_log                     shift and go to state 196

state 164

    (115) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 197


state 165

    (115) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 198


state 166

    (112) valoresflecha -> datos . FLECHA datos repite_valores_f
    (108) valores -> datos . repite_valores
    (109) repite_valores -> . COMA datos
    (110) repite_valores -> . COMA datos repite_valores

    FLECHA          shift and go to state 199
    COMA            shift and go to state 134

    repite_valores                 shift and go to state 133

state 167

    (93) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 200


state 168

    (94) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 201


state 169

    (95) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 202


state 170

    (96) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 203


state 171

    (29) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 29 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 172

    (101) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    $end            reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 101 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 173

    (123) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .

    $end            reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 123 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)


state 174

    (120) repite_parametros -> COMA parametros .
    (121) repite_parametros -> COMA parametros . repite_parametros
    (120) repite_parametros -> . COMA parametros
    (121) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 120 (repite_parametros -> COMA parametros .)
    COMA            shift and go to state 128

    repite_parametros              shift and go to state 204

state 175

    (109) repite_valores -> COMA datos .
    (110) repite_valores -> COMA datos . repite_valores
    (109) repite_valores -> . COMA datos
    (110) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 109 (repite_valores -> COMA datos .)
    COMA            shift and go to state 134

    repite_valores                 shift and go to state 205

state 176

    (83) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 83 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 177

    (57) bloque -> asignacion bloque .

    LLAVE_DER       reduce using rule 57 (bloque -> asignacion bloque .)


state 178

    (58) bloque -> salida bloque .

    LLAVE_DER       reduce using rule 58 (bloque -> salida bloque .)


state 179

    (59) bloque -> retorno bloque .

    LLAVE_DER       reduce using rule 59 (bloque -> retorno bloque .)


state 180

    (60) bloque -> estructuras_control bloque .

    LLAVE_DER       reduce using rule 60 (bloque -> estructuras_control bloque .)


state 181

    (62) bloque -> multiples bloque .

    LLAVE_DER       reduce using rule 62 (bloque -> multiples bloque .)


state 182

    (98) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 206


state 183

    (67) for -> cola LLAVE_DER .

    ECHO            reduce using rule 67 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 67 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 67 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 67 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 67 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 67 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 67 (for -> cola LLAVE_DER .)
    IF              reduce using rule 67 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 67 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 67 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 67 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 67 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 67 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 67 (for -> cola LLAVE_DER .)


state 184

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 207


state 185

    (66) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 208


state 186

    (75) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 209


state 187

    (70) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (73) valorc -> . menor
    (74) valorc -> . mayor
    (71) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (72) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 43
    MAYOR_IGUAL     shift and go to state 44

    valorc                         shift and go to state 210
    menor                          shift and go to state 29
    mayor                          shift and go to state 30

state 188

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 211


state 189

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 212


state 190

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (117) parametros -> SIGNO_DOLAR VARIABLE .

  ! shift/reduce conflict for PAREN_DER resolved as shift
    PAREN_DER       shift and go to state 213
    COMA            reduce using rule 117 (parametros -> SIGNO_DOLAR VARIABLE .)

  ! PAREN_DER       [ reduce using rule 117 (parametros -> SIGNO_DOLAR VARIABLE .) ]


state 191

    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 214


state 192

    (80) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    bloque                         shift and go to state 215
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 193

    (84) op_logica -> ENTERO operad_log ENTERO .

    PAREN_DER       reduce using rule 84 (op_logica -> ENTERO operad_log ENTERO .)


state 194

    (85) op_logica -> FLOTANTE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 85 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 195

    (86) op_logica -> STRING operad_log STRING .

    PAREN_DER       reduce using rule 86 (op_logica -> STRING operad_log STRING .)


state 196

    (88) op_logica -> SIGNO_DOLAR VARIABLE operad_log . SIGNO_DOLAR VARIABLE
    (89) op_logica -> SIGNO_DOLAR VARIABLE operad_log . ENTERO
    (90) op_logica -> SIGNO_DOLAR VARIABLE operad_log . FLOTANTE

    SIGNO_DOLAR     shift and go to state 216
    ENTERO          shift and go to state 217
    FLOTANTE        shift and go to state 218


state 197

    (115) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (112) valoresflecha -> . datos FLECHA datos repite_valores_f
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    valoresflecha                  shift and go to state 165
    datos                          shift and go to state 219

state 198

    (115) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 220


state 199

    (112) valoresflecha -> datos FLECHA . datos repite_valores_f
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 221

state 200

    (93) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 222


state 201

    (94) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 94 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 202

    (95) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 95 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 203

    (96) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    $end            reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 96 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 204

    (121) repite_parametros -> COMA parametros repite_parametros .

    PAREN_DER       reduce using rule 121 (repite_parametros -> COMA parametros repite_parametros .)


state 205

    (110) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 110 (repite_valores -> COMA datos repite_valores .)


state 206

    (98) retorno -> RETURN salidas_pos PUNTO_COMA .

    ECHO            reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    IF              reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 98 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 207

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    bloque                         shift and go to state 223
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 208

    (66) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 224


state 209

    (75) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (76) crecimiento -> . INCREMENTO
    (77) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 226
    DECREMENTO      shift and go to state 227

    crecimiento                    shift and go to state 225

state 210

    (70) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    SIGNO_DOLAR     reduce using rule 70 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 211

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 228


state 212

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 229


state 213

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 230


state 214

    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    bloque                         shift and go to state 231
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    decl_variable                  shift and go to state 141
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 215

    (80) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 232


state 216

    (88) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 233


state 217

    (89) op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .

    PAREN_DER       reduce using rule 89 (op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .)


state 218

    (90) op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 90 (op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .)


state 219

    (112) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 199


state 220

    (115) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    $end            reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 115 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 221

    (112) valoresflecha -> datos FLECHA datos . repite_valores_f
    (113) repite_valores_f -> . COMA datos FLECHA datos
    (114) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 235

    repite_valores_f               shift and go to state 234

state 222

    (93) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    $end            reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 93 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 223

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 236


state 224

    (66) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (68) sentenciasAnidadas -> . instrucciones
    (69) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (99) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (34) estructuras_datos -> . pila
    (35) estructuras_datos -> . cola
    (36) estructuras_datos -> . arreglo
    (37) funciones -> . funcion_variable
    (38) funciones -> . sinRetorno
    (39) funciones -> . functConPar
    (92) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (73) valorc -> . menor
    (74) valorc -> . mayor
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (123) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (97) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (64) sinRetorno -> . cola LLAVE_DER
    (122) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (71) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (72) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    VARIABLE        shift and go to state 31
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    FUNCTION        shift and go to state 42
    MENOR_IGUAL     shift and go to state 43
    MAYOR_IGUAL     shift and go to state 44
    IF              shift and go to state 46

    asignacion                     shift and go to state 3
    sentenciasAnidadas             shift and go to state 237
    instrucciones                  shift and go to state 238
    valor                          shift and go to state 2
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    decl_variable                  shift and go to state 18
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    funcion_variable               shift and go to state 26
    sinRetorno                     shift and go to state 27
    functConPar                    shift and go to state 28
    menor                          shift and go to state 29
    mayor                          shift and go to state 30
    if_else_inicio                 shift and go to state 39
    conca_string                   shift and go to state 45

state 225

    (75) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    PAREN_DER       reduce using rule 75 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 226

    (76) crecimiento -> INCREMENTO .

    PAREN_DER       reduce using rule 76 (crecimiento -> INCREMENTO .)


state 227

    (77) crecimiento -> DECREMENTO .

    PAREN_DER       reduce using rule 77 (crecimiento -> DECREMENTO .)


state 228

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (105) contenido -> . bloque
    (106) contenido -> . sinRetorno
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (63) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (64) sinRetorno -> . cola LLAVE_DER
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    FUNCTION        shift and go to state 242
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    NEW             shift and go to state 144
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    decl_variable                  shift and go to state 141
    contenido                      shift and go to state 239
    bloque                         shift and go to state 240
    sinRetorno                     shift and go to state 241
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    cola                           shift and go to state 243
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 229

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (53) bloque -> . asignacion
    (54) bloque -> . salida
    (55) bloque -> . retorno
    (56) bloque -> . estructuras_control
    (57) bloque -> . asignacion bloque
    (58) bloque -> . salida bloque
    (59) bloque -> . retorno bloque
    (60) bloque -> . estructuras_control bloque
    (61) bloque -> . multiples
    (62) bloque -> . multiples bloque
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (98) retorno -> . RETURN salidas_pos PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (100) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    RETURN          shift and go to state 142
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    IF              shift and go to state 46
    NEW             shift and go to state 144
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35

    decl_variable                  shift and go to state 141
    bloque                         shift and go to state 244
    asignacion                     shift and go to state 136
    salida                         shift and go to state 137
    retorno                        shift and go to state 138
    estructuras_control            shift and go to state 139
    multiples                      shift and go to state 140
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    if_else_inicio                 shift and go to state 39
    cola                           shift and go to state 143
    datos                          shift and go to state 52
    conca_string                   shift and go to state 45

state 230

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (68) sentenciasAnidadas -> . instrucciones
    (69) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (99) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (34) estructuras_datos -> . pila
    (35) estructuras_datos -> . cola
    (36) estructuras_datos -> . arreglo
    (37) funciones -> . funcion_variable
    (38) funciones -> . sinRetorno
    (39) funciones -> . functConPar
    (92) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (73) valorc -> . menor
    (74) valorc -> . mayor
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (123) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (97) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (64) sinRetorno -> . cola LLAVE_DER
    (122) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (71) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (72) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (100) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    VARIABLE        shift and go to state 31
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    FUNCTION        shift and go to state 42
    MENOR_IGUAL     shift and go to state 43
    MAYOR_IGUAL     shift and go to state 44
    IF              shift and go to state 46

    sentenciasAnidadas             shift and go to state 245
    instrucciones                  shift and go to state 238
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    decl_variable                  shift and go to state 18
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    funcion_variable               shift and go to state 26
    sinRetorno                     shift and go to state 27
    functConPar                    shift and go to state 28
    menor                          shift and go to state 29
    mayor                          shift and go to state 30
    if_else_inicio                 shift and go to state 39
    conca_string                   shift and go to state 45

state 231

    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 246


state 232

    (80) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 80 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 80 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 233

    (88) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .

    PAREN_DER       reduce using rule 88 (op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .)


state 234

    (112) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 112 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 235

    (113) repite_valores_f -> COMA . datos FLECHA datos
    (114) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 247

state 236

    (81) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (81) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (82) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 81 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 67

    if_else_cuerpo                 shift and go to state 248

state 237

    (66) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 66 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 238

    (68) sentenciasAnidadas -> instrucciones .
    (69) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (68) sentenciasAnidadas -> . instrucciones
    (69) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (1) instrucciones -> . valor
    (2) instrucciones -> . asignacion
    (3) instrucciones -> . concatenacion
    (4) instrucciones -> . salida
    (5) instrucciones -> . estructuras_control
    (6) instrucciones -> . estructuras_datos
    (7) instrucciones -> . funciones
    (8) instrucciones -> . op_pila
    (9) instrucciones -> . valorc
    (10) instrucciones -> . multiples
    (11) instrucciones -> . LLAVE_DER
    (12) instrucciones -> . llamadaFuncion
    (15) valor -> . datos
    (16) valor -> . pila
    (17) valor -> . cola
    (18) valor -> . arreglo
    (14) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (99) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (28) salida -> . ECHO salidas_pos PUNTO_COMA
    (29) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (30) salida -> . PRINT salidas_pos PUNTO_COMA
    (101) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (31) estructuras_control -> . if_else
    (32) estructuras_control -> . for
    (33) estructuras_control -> . whileDeclaracion
    (34) estructuras_datos -> . pila
    (35) estructuras_datos -> . cola
    (36) estructuras_datos -> . arreglo
    (37) funciones -> . funcion_variable
    (38) funciones -> . sinRetorno
    (39) funciones -> . functConPar
    (92) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (73) valorc -> . menor
    (74) valorc -> . mayor
    (26) multiples -> . salidas_pos
    (27) multiples -> . salidas_pos multiples
    (123) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO
    (91) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (65) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (111) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (115) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (13) decl_variable -> . SIGNO_DOLAR VARIABLE
    (78) if_else -> . if_else_inicio if_else_fin
    (79) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (66) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (67) for -> . cola LLAVE_DER
    (107) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (97) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (63) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (64) sinRetorno -> . cola LLAVE_DER
    (122) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (71) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (72) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (23) salidas_pos -> . datos
    (24) salidas_pos -> . decl_variable
    (25) salidas_pos -> . conca_string
    (80) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (100) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 68 (sentenciasAnidadas -> instrucciones .)
    RETURN          reduce using rule 68 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 12
    ECHO            shift and go to state 19
    PRINT           shift and go to state 21
    PRINT_R         shift and go to state 22
    VARIABLE        shift and go to state 31
    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 34
    BOOLEANO        shift and go to state 35
    NEW             shift and go to state 36
    ARRAY           shift and go to state 37
    SIGNO_DOLAR     shift and go to state 38
    FOR             shift and go to state 40
    WHILE           shift and go to state 41
    FUNCTION        shift and go to state 42
    MENOR_IGUAL     shift and go to state 43
    MAYOR_IGUAL     shift and go to state 44
    IF              shift and go to state 46

  ! LLAVE_DER       [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! VARIABLE        [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 68 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 238
    sentenciasAnidadas             shift and go to state 249
    valor                          shift and go to state 2
    asignacion                     shift and go to state 3
    concatenacion                  shift and go to state 4
    salida                         shift and go to state 5
    estructuras_control            shift and go to state 6
    estructuras_datos              shift and go to state 7
    funciones                      shift and go to state 8
    op_pila                        shift and go to state 9
    valorc                         shift and go to state 10
    multiples                      shift and go to state 11
    llamadaFuncion                 shift and go to state 13
    datos                          shift and go to state 14
    pila                           shift and go to state 15
    cola                           shift and go to state 16
    arreglo                        shift and go to state 17
    decl_variable                  shift and go to state 18
    salidas_pos                    shift and go to state 20
    if_else                        shift and go to state 23
    for                            shift and go to state 24
    whileDeclaracion               shift and go to state 25
    funcion_variable               shift and go to state 26
    sinRetorno                     shift and go to state 27
    functConPar                    shift and go to state 28
    menor                          shift and go to state 29
    mayor                          shift and go to state 30
    if_else_inicio                 shift and go to state 39
    conca_string                   shift and go to state 45

state 239

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 250


state 240

    (105) contenido -> bloque .

    LLAVE_DER       reduce using rule 105 (contenido -> bloque .)


state 241

    (106) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 106 (contenido -> sinRetorno .)


state 242

    (63) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 251


state 243

    (64) sinRetorno -> cola . LLAVE_DER
    (67) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 252


state 244

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 253


state 245

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    $end            reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    LLAVE_DER       reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 63 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 246

    (122) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 122 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 247

    (113) repite_valores_f -> COMA datos . FLECHA datos
    (114) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 254


state 248

    (82) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 82 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 249

    (69) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    VARIABLE        reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    RETURN          reduce using rule 69 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 250

    (107) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    $end            reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    RETURN          reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    LLAVE_DER       reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    VARIABLE        reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 107 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 251

    (63) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 255


state 252

    (64) sinRetorno -> cola LLAVE_DER .
    (67) for -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 64 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 64 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 67 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 67 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 67 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 67 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 67 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 67 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 67 (for -> cola LLAVE_DER .)
    IF              reduce using rule 67 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 67 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 67 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 67 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 67 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 67 (for -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 67 (for -> cola LLAVE_DER .) ]


state 253

    (97) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    $end            reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    LLAVE_DER       reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 97 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 254

    (113) repite_valores_f -> COMA datos FLECHA . datos
    (114) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (19) datos -> . ENTERO
    (20) datos -> . FLOTANTE
    (21) datos -> . STRING
    (22) datos -> . BOOLEANO

    ENTERO          shift and go to state 32
    FLOTANTE        shift and go to state 33
    STRING          shift and go to state 81
    BOOLEANO        shift and go to state 35

    datos                          shift and go to state 256

state 255

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    SIGNO_DOLAR     shift and go to state 257


state 256

    (113) repite_valores_f -> COMA datos FLECHA datos .
    (114) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (109) repite_valores -> . COMA datos
    (110) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 113 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 134

    repite_valores                 shift and go to state 258

state 257

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 259


state 258

    (114) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 114 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)


state 259

    (63) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 213

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 16 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 20 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 20 resolved as shift
WARNING: shift/reduce conflict for STRING in state 20 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 20 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 20 resolved as shift
WARNING: shift/reduce conflict for PAREN_DER in state 190 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 238 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 238 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 238 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 238 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 238 resolved as shift
WARNING: shift/reduce conflict for STRING in state 238 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 238 resolved as shift
WARNING: shift/reduce conflict for NEW in state 238 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 238 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 238 resolved as shift
WARNING: shift/reduce conflict for FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 238 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 238 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (valor -> datos)
WARNING: rejected rule (salidas_pos -> datos) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 15
WARNING: reduce/reduce conflict in state 16 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 16
WARNING: reduce/reduce conflict in state 17 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 17
WARNING: reduce/reduce conflict in state 47 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 47
WARNING: reduce/reduce conflict in state 252 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 252
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
