Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    AS
    ASIG_REFER
    BREAK
    CALLABLE
    CASE
    CATH
    CLASS
    CLONE
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    DECLARE
    DEFAULT
    DO
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FN
    FOREACH
    GLOBAL
    IMPLEMENTS
    INCLUDE
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    NAMESPACE
    OR
    OR_SYMB
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTODOBLE
    REQUIERE
    SALTO_LINEA
    STATIC
    STRREV
    SWITCH
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR

Grammar

Rule 0     S' -> variaslineas
Rule 1     variaslineas -> instrucciones
Rule 2     variaslineas -> instrucciones variaslineas
Rule 3     instrucciones -> valor
Rule 4     instrucciones -> asignacion
Rule 5     instrucciones -> concatenacion
Rule 6     instrucciones -> salida
Rule 7     instrucciones -> estructuras_control
Rule 8     instrucciones -> estructuras_datos
Rule 9     instrucciones -> funciones
Rule 10    instrucciones -> op_pila
Rule 11    instrucciones -> valorc
Rule 12    instrucciones -> multiples
Rule 13    instrucciones -> LLAVE_DER
Rule 14    instrucciones -> llamadaFuncion
Rule 15    instrucciones -> asignacionFunc
Rule 16    decl_variable -> SIGNO_DOLAR VARIABLE
Rule 17    asignacion -> decl_variable IGUAL valor PUNTO_COMA
Rule 18    valor -> datos
Rule 19    valor -> pila
Rule 20    valor -> cola
Rule 21    valor -> arreglo
Rule 22    valor -> opAritVar
Rule 23    datos -> ENTERO
Rule 24    datos -> FLOTANTE
Rule 25    datos -> STRING
Rule 26    datos -> BOOLEANO
Rule 27    salidas_pos -> datos
Rule 28    salidas_pos -> decl_variable
Rule 29    salidas_pos -> conca_string
Rule 30    multiples -> salidas_pos
Rule 31    multiples -> salidas_pos multiples
Rule 32    salida -> ECHO salidas_pos PUNTO_COMA
Rule 33    salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
Rule 34    salida -> PRINT salidas_pos PUNTO_COMA
Rule 35    estructuras_control -> if_else
Rule 36    estructuras_control -> for
Rule 37    estructuras_control -> whileDeclaracion
Rule 38    estructuras_datos -> pila
Rule 39    estructuras_datos -> cola
Rule 40    estructuras_datos -> arreglo
Rule 41    funciones -> funcion_variable
Rule 42    funciones -> sinRetorno
Rule 43    funciones -> functConPar
Rule 44    operad_log -> IDENTICO
Rule 45    operad_log -> DIFERENTE
Rule 46    operad_log -> MAYOR_QUE
Rule 47    operad_log -> MAYOR_IGUAL
Rule 48    operad_log -> MENOR_QUE
Rule 49    operad_log -> MENOR_IGUAL
Rule 50    operad_arit -> SUMA
Rule 51    operad_arit -> RESTA
Rule 52    operad_arit -> MULTIPL
Rule 53    operad_arit -> DIVISION
Rule 54    operad_arit -> DIVISION_ENT
Rule 55    operad_arit -> POTENCIA
Rule 56    operad_arit -> MODULO
Rule 57    bloque -> asignacion
Rule 58    bloque -> salida
Rule 59    bloque -> retorno
Rule 60    bloque -> estructuras_control
Rule 61    bloque -> asignacion bloque
Rule 62    bloque -> salida bloque
Rule 63    bloque -> retorno bloque
Rule 64    bloque -> estructuras_control bloque
Rule 65    bloque -> multiples
Rule 66    bloque -> multiples bloque
Rule 67    sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 68    sinRetorno -> cola LLAVE_DER
Rule 69    cola -> NEW QUEUE PAREN_IZQ PAREN_DER
Rule 70    for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
Rule 71    for -> cola LLAVE_DER
Rule 72    sentenciasAnidadas -> instrucciones
Rule 73    sentenciasAnidadas -> instrucciones sentenciasAnidadas
Rule 74    declaracionp -> SIGNO_DOLAR VARIABLE valorc
Rule 75    menor -> MENOR_IGUAL ENTERO PUNTO_COMA
Rule 76    mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA
Rule 77    valorc -> menor
Rule 78    valorc -> mayor
Rule 79    declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento
Rule 80    crecimiento -> INCREMENTO
Rule 81    crecimiento -> DECREMENTO
Rule 82    if_else -> if_else_inicio if_else_fin
Rule 83    if_else -> if_else_inicio if_else_cuerpo if_else_fin
Rule 84    if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 85    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 86    if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
Rule 87    if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER
Rule 88    op_logica -> ENTERO operad_log ENTERO
Rule 89    op_logica -> FLOTANTE operad_log FLOTANTE
Rule 90    op_logica -> STRING operad_log STRING
Rule 91    op_logica -> BOOLEANO
Rule 92    op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
Rule 93    op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO
Rule 94    op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE
Rule 95    pila -> NEW STACK PAREN_IZQ PAREN_DER
Rule 96    op_pila -> decl_variable ASIG_OBJ operad_pila
Rule 97    operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
Rule 98    operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 99    operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 100   operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA
Rule 101   funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 102   retorno -> RETURN salidas_pos PUNTO_COMA
Rule 103   concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA
Rule 104   conca_string -> STRING PUNTO STRING
Rule 105   salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
Rule 106   salidas_pos_obj -> valor
Rule 107   salidas_pos_obj -> decl_variable
Rule 108   salidas_pos_obj -> conca_string
Rule 109   contenido -> bloque
Rule 110   contenido -> sinRetorno
Rule 111   whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
Rule 112   valores -> datos repite_valores
Rule 113   repite_valores -> COMA datos
Rule 114   repite_valores -> COMA datos repite_valores
Rule 115   arreglo -> ARRAY PAREN_IZQ valores PAREN_DER
Rule 116   valoresflecha -> datos FLECHA datos repite_valores_f
Rule 117   repite_valores_f -> COMA datos FLECHA datos
Rule 118   repite_valores_f -> COMA datos FLECHA datos repite_valores
Rule 119   arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
Rule 120   parametros -> datos
Rule 121   parametros -> SIGNO_DOLAR VARIABLE
Rule 122   parametrosR -> parametros
Rule 123   parametrosR -> parametros repite_parametros
Rule 124   repite_parametros -> COMA parametros
Rule 125   repite_parametros -> COMA parametros repite_parametros
Rule 126   functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
Rule 127   llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
Rule 128   asignacionFunc -> decl_variable IGUAL llamadaFuncion
Rule 129   paraCalculos -> ENTERO
Rule 130   paraCalculos -> FLOTANTE
Rule 131   paraCalculos -> SIGNO_DOLAR VARIABLE
Rule 132   combinarOp -> operad_arit paraCalculos
Rule 133   combinarOp -> operad_arit paraCalculos combinarOp
Rule 134   opAritVar -> paraCalculos combinarOp

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 115 119
AS                   : 
ASIG_CONCA           : 103
ASIG_OBJ             : 96
ASIG_REFER           : 
BOOLEANO             : 26 91
BREAK                : 
CALLABLE             : 
CASE                 : 
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 113 114 117 118 124 125
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 99
CURRENT              : 100
DECLARE              : 
DECREMENTO           : 81
DEFAULT              : 
DIFERENTE            : 45
DIVISION             : 53
DIVISION_ENT         : 54
DO                   : 
ECHO                 : 32
ELSE                 : 87
ELSEIF               : 85 86
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 23 75 76 88 88 93 129
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLECHA               : 116 117 118
FLOTANTE             : 24 89 89 94 130
FN                   : 
FOR                  : 70
FOREACH              : 
FUNCTION             : 67 101 126
GLOBAL               : 
IDENTICO             : 44
IF                   : 84
IGUAL                : 17 119 128
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 80
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 13 68 71 84 85 86 87 101 111 126
LLAVE_IZQ            : 67 70 84 85 86 87 101 111 126
MACHT                : 
MAYOR_IGUAL          : 47 76
MAYOR_QUE            : 46
MENOR_IGUAL          : 49 75
MENOR_QUE            : 48
MODULO               : 56
MULTIPL              : 52
NAMESPACE            : 
NEW                  : 69 95
OR                   : 
OR_SYMB              : 
PAREN_DER            : 33 67 69 70 84 85 86 95 97 98 99 100 101 105 111 115 119 126 127
PAREN_IZQ            : 33 67 69 70 84 85 86 95 97 98 99 100 101 105 111 115 119 126 127
POP                  : 98
POTENCIA             : 55
PRINT                : 33 34
PRINT_R              : 105
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 104
PUNTODOBLE           : 
PUNTO_COMA           : 17 32 33 34 75 76 97 98 99 100 102 103 105 119 127
PUSH                 : 97
QUEUE                : 69
REQUIERE             : 
RESTA                : 51
RETURN               : 102
SALTO_LINEA          : 
SIGNO_DOLAR          : 16 67 74 79 92 92 93 94 121 131
STACK                : 95
STATIC               : 
STRING               : 25 90 90 104 104
STRREV               : 
SUMA                 : 50
SWITCH               : 
TABULACION           : 
THROW                : 
TRAIT                : 
TRES_PUNTOS          : 101
TRY                  : 
USE                  : 
VAR                  : 
VARIABLE             : 16 67 67 74 79 92 92 93 94 101 121 126 127 131
WHILE                : 111
error                : 

Nonterminals, with rules where they appear

arreglo              : 21 40
asignacion           : 4 57 61 70
asignacionFunc       : 15
bloque               : 61 62 63 64 66 84 85 86 87 101 109 126
cola                 : 20 39 68 71
combinarOp           : 133 134
conca_string         : 29 108
concatenacion        : 5
contenido            : 111
crecimiento          : 79
datos                : 18 27 97 103 112 113 114 116 116 117 117 118 118 120
decl_variable        : 17 28 96 101 103 107 111 119 128
declaracion_s        : 70
declaracionp         : 70
estructuras_control  : 7 60 64
estructuras_datos    : 8
for                  : 36
funcion_variable     : 41
funciones            : 9
functConPar          : 43
if_else              : 35
if_else_cuerpo       : 83 86
if_else_fin          : 82 83
if_else_inicio       : 82 83
instrucciones        : 1 2 72 73
llamadaFuncion       : 14 128
mayor                : 78
menor                : 77
multiples            : 12 31 65 66
opAritVar            : 22
op_logica            : 84 85 86
op_pila              : 10
operad_arit          : 132 133
operad_log           : 88 89 90 92 93 94 111
operad_pila          : 96
paraCalculos         : 132 133 134
parametros           : 122 123 124 125
parametrosR          : 126 127
pila                 : 19 38
repite_parametros    : 123 125
repite_valores       : 112 114 118
repite_valores_f     : 116
retorno              : 59 63
salida               : 6 58 62
salidas_pos          : 30 31 32 33 34 102
salidas_pos_obj      : 
sentenciasAnidadas   : 67 70 73
sinRetorno           : 42 110
valor                : 3 17 105 106 111
valorc               : 11 74
valores              : 115
valoresflecha        : 119
variaslineas         : 2 0
whileDeclaracion     : 37

Parsing method: LALR

state 0

    (0) S' -> . variaslineas
    (1) variaslineas -> . instrucciones
    (2) variaslineas -> . instrucciones variaslineas
    (3) instrucciones -> . valor
    (4) instrucciones -> . asignacion
    (5) instrucciones -> . concatenacion
    (6) instrucciones -> . salida
    (7) instrucciones -> . estructuras_control
    (8) instrucciones -> . estructuras_datos
    (9) instrucciones -> . funciones
    (10) instrucciones -> . op_pila
    (11) instrucciones -> . valorc
    (12) instrucciones -> . multiples
    (13) instrucciones -> . LLAVE_DER
    (14) instrucciones -> . llamadaFuncion
    (15) instrucciones -> . asignacionFunc
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (103) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (38) estructuras_datos -> . pila
    (39) estructuras_datos -> . cola
    (40) estructuras_datos -> . arreglo
    (41) funciones -> . funcion_variable
    (42) funciones -> . sinRetorno
    (43) funciones -> . functConPar
    (96) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (128) asignacionFunc -> . decl_variable IGUAL llamadaFuncion
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (101) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (126) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 13
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    FUNCTION        shift and go to state 46
    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48
    IF              shift and go to state 50

    variaslineas                   shift and go to state 1
    instrucciones                  shift and go to state 2
    valor                          shift and go to state 3
    asignacion                     shift and go to state 4
    concatenacion                  shift and go to state 5
    salida                         shift and go to state 6
    estructuras_control            shift and go to state 7
    estructuras_datos              shift and go to state 8
    funciones                      shift and go to state 9
    op_pila                        shift and go to state 10
    valorc                         shift and go to state 11
    multiples                      shift and go to state 12
    llamadaFuncion                 shift and go to state 14
    asignacionFunc                 shift and go to state 15
    datos                          shift and go to state 16
    pila                           shift and go to state 17
    cola                           shift and go to state 18
    arreglo                        shift and go to state 19
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 21
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    funcion_variable               shift and go to state 29
    sinRetorno                     shift and go to state 30
    functConPar                    shift and go to state 31
    menor                          shift and go to state 32
    mayor                          shift and go to state 33
    paraCalculos                   shift and go to state 41
    if_else_inicio                 shift and go to state 43
    conca_string                   shift and go to state 49

state 1

    (0) S' -> variaslineas .



state 2

    (1) variaslineas -> instrucciones .
    (2) variaslineas -> instrucciones . variaslineas
    (1) variaslineas -> . instrucciones
    (2) variaslineas -> . instrucciones variaslineas
    (3) instrucciones -> . valor
    (4) instrucciones -> . asignacion
    (5) instrucciones -> . concatenacion
    (6) instrucciones -> . salida
    (7) instrucciones -> . estructuras_control
    (8) instrucciones -> . estructuras_datos
    (9) instrucciones -> . funciones
    (10) instrucciones -> . op_pila
    (11) instrucciones -> . valorc
    (12) instrucciones -> . multiples
    (13) instrucciones -> . LLAVE_DER
    (14) instrucciones -> . llamadaFuncion
    (15) instrucciones -> . asignacionFunc
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (103) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (38) estructuras_datos -> . pila
    (39) estructuras_datos -> . cola
    (40) estructuras_datos -> . arreglo
    (41) funciones -> . funcion_variable
    (42) funciones -> . sinRetorno
    (43) funciones -> . functConPar
    (96) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (128) asignacionFunc -> . decl_variable IGUAL llamadaFuncion
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (101) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (126) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (104) conca_string -> . STRING PUNTO STRING

    $end            reduce using rule 1 (variaslineas -> instrucciones .)
    LLAVE_DER       shift and go to state 13
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    FUNCTION        shift and go to state 46
    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48
    IF              shift and go to state 50

    instrucciones                  shift and go to state 2
    variaslineas                   shift and go to state 51
    valor                          shift and go to state 3
    asignacion                     shift and go to state 4
    concatenacion                  shift and go to state 5
    salida                         shift and go to state 6
    estructuras_control            shift and go to state 7
    estructuras_datos              shift and go to state 8
    funciones                      shift and go to state 9
    op_pila                        shift and go to state 10
    valorc                         shift and go to state 11
    multiples                      shift and go to state 12
    llamadaFuncion                 shift and go to state 14
    asignacionFunc                 shift and go to state 15
    datos                          shift and go to state 16
    pila                           shift and go to state 17
    cola                           shift and go to state 18
    arreglo                        shift and go to state 19
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 21
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    funcion_variable               shift and go to state 29
    sinRetorno                     shift and go to state 30
    functConPar                    shift and go to state 31
    menor                          shift and go to state 32
    mayor                          shift and go to state 33
    paraCalculos                   shift and go to state 41
    if_else_inicio                 shift and go to state 43
    conca_string                   shift and go to state 49

state 3

    (3) instrucciones -> valor .

    LLAVE_DER       reduce using rule 3 (instrucciones -> valor .)
    ECHO            reduce using rule 3 (instrucciones -> valor .)
    PRINT           reduce using rule 3 (instrucciones -> valor .)
    PRINT_R         reduce using rule 3 (instrucciones -> valor .)
    VARIABLE        reduce using rule 3 (instrucciones -> valor .)
    ENTERO          reduce using rule 3 (instrucciones -> valor .)
    FLOTANTE        reduce using rule 3 (instrucciones -> valor .)
    STRING          reduce using rule 3 (instrucciones -> valor .)
    BOOLEANO        reduce using rule 3 (instrucciones -> valor .)
    NEW             reduce using rule 3 (instrucciones -> valor .)
    ARRAY           reduce using rule 3 (instrucciones -> valor .)
    SIGNO_DOLAR     reduce using rule 3 (instrucciones -> valor .)
    FOR             reduce using rule 3 (instrucciones -> valor .)
    WHILE           reduce using rule 3 (instrucciones -> valor .)
    FUNCTION        reduce using rule 3 (instrucciones -> valor .)
    MENOR_IGUAL     reduce using rule 3 (instrucciones -> valor .)
    MAYOR_IGUAL     reduce using rule 3 (instrucciones -> valor .)
    IF              reduce using rule 3 (instrucciones -> valor .)
    $end            reduce using rule 3 (instrucciones -> valor .)
    RETURN          reduce using rule 3 (instrucciones -> valor .)


state 4

    (4) instrucciones -> asignacion .

    LLAVE_DER       reduce using rule 4 (instrucciones -> asignacion .)
    ECHO            reduce using rule 4 (instrucciones -> asignacion .)
    PRINT           reduce using rule 4 (instrucciones -> asignacion .)
    PRINT_R         reduce using rule 4 (instrucciones -> asignacion .)
    VARIABLE        reduce using rule 4 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 4 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 4 (instrucciones -> asignacion .)
    STRING          reduce using rule 4 (instrucciones -> asignacion .)
    BOOLEANO        reduce using rule 4 (instrucciones -> asignacion .)
    NEW             reduce using rule 4 (instrucciones -> asignacion .)
    ARRAY           reduce using rule 4 (instrucciones -> asignacion .)
    SIGNO_DOLAR     reduce using rule 4 (instrucciones -> asignacion .)
    FOR             reduce using rule 4 (instrucciones -> asignacion .)
    WHILE           reduce using rule 4 (instrucciones -> asignacion .)
    FUNCTION        reduce using rule 4 (instrucciones -> asignacion .)
    MENOR_IGUAL     reduce using rule 4 (instrucciones -> asignacion .)
    MAYOR_IGUAL     reduce using rule 4 (instrucciones -> asignacion .)
    IF              reduce using rule 4 (instrucciones -> asignacion .)
    $end            reduce using rule 4 (instrucciones -> asignacion .)
    RETURN          reduce using rule 4 (instrucciones -> asignacion .)


state 5

    (5) instrucciones -> concatenacion .

    LLAVE_DER       reduce using rule 5 (instrucciones -> concatenacion .)
    ECHO            reduce using rule 5 (instrucciones -> concatenacion .)
    PRINT           reduce using rule 5 (instrucciones -> concatenacion .)
    PRINT_R         reduce using rule 5 (instrucciones -> concatenacion .)
    VARIABLE        reduce using rule 5 (instrucciones -> concatenacion .)
    ENTERO          reduce using rule 5 (instrucciones -> concatenacion .)
    FLOTANTE        reduce using rule 5 (instrucciones -> concatenacion .)
    STRING          reduce using rule 5 (instrucciones -> concatenacion .)
    BOOLEANO        reduce using rule 5 (instrucciones -> concatenacion .)
    NEW             reduce using rule 5 (instrucciones -> concatenacion .)
    ARRAY           reduce using rule 5 (instrucciones -> concatenacion .)
    SIGNO_DOLAR     reduce using rule 5 (instrucciones -> concatenacion .)
    FOR             reduce using rule 5 (instrucciones -> concatenacion .)
    WHILE           reduce using rule 5 (instrucciones -> concatenacion .)
    FUNCTION        reduce using rule 5 (instrucciones -> concatenacion .)
    MENOR_IGUAL     reduce using rule 5 (instrucciones -> concatenacion .)
    MAYOR_IGUAL     reduce using rule 5 (instrucciones -> concatenacion .)
    IF              reduce using rule 5 (instrucciones -> concatenacion .)
    $end            reduce using rule 5 (instrucciones -> concatenacion .)
    RETURN          reduce using rule 5 (instrucciones -> concatenacion .)


state 6

    (6) instrucciones -> salida .

    LLAVE_DER       reduce using rule 6 (instrucciones -> salida .)
    ECHO            reduce using rule 6 (instrucciones -> salida .)
    PRINT           reduce using rule 6 (instrucciones -> salida .)
    PRINT_R         reduce using rule 6 (instrucciones -> salida .)
    VARIABLE        reduce using rule 6 (instrucciones -> salida .)
    ENTERO          reduce using rule 6 (instrucciones -> salida .)
    FLOTANTE        reduce using rule 6 (instrucciones -> salida .)
    STRING          reduce using rule 6 (instrucciones -> salida .)
    BOOLEANO        reduce using rule 6 (instrucciones -> salida .)
    NEW             reduce using rule 6 (instrucciones -> salida .)
    ARRAY           reduce using rule 6 (instrucciones -> salida .)
    SIGNO_DOLAR     reduce using rule 6 (instrucciones -> salida .)
    FOR             reduce using rule 6 (instrucciones -> salida .)
    WHILE           reduce using rule 6 (instrucciones -> salida .)
    FUNCTION        reduce using rule 6 (instrucciones -> salida .)
    MENOR_IGUAL     reduce using rule 6 (instrucciones -> salida .)
    MAYOR_IGUAL     reduce using rule 6 (instrucciones -> salida .)
    IF              reduce using rule 6 (instrucciones -> salida .)
    $end            reduce using rule 6 (instrucciones -> salida .)
    RETURN          reduce using rule 6 (instrucciones -> salida .)


state 7

    (7) instrucciones -> estructuras_control .

    LLAVE_DER       reduce using rule 7 (instrucciones -> estructuras_control .)
    ECHO            reduce using rule 7 (instrucciones -> estructuras_control .)
    PRINT           reduce using rule 7 (instrucciones -> estructuras_control .)
    PRINT_R         reduce using rule 7 (instrucciones -> estructuras_control .)
    VARIABLE        reduce using rule 7 (instrucciones -> estructuras_control .)
    ENTERO          reduce using rule 7 (instrucciones -> estructuras_control .)
    FLOTANTE        reduce using rule 7 (instrucciones -> estructuras_control .)
    STRING          reduce using rule 7 (instrucciones -> estructuras_control .)
    BOOLEANO        reduce using rule 7 (instrucciones -> estructuras_control .)
    NEW             reduce using rule 7 (instrucciones -> estructuras_control .)
    ARRAY           reduce using rule 7 (instrucciones -> estructuras_control .)
    SIGNO_DOLAR     reduce using rule 7 (instrucciones -> estructuras_control .)
    FOR             reduce using rule 7 (instrucciones -> estructuras_control .)
    WHILE           reduce using rule 7 (instrucciones -> estructuras_control .)
    FUNCTION        reduce using rule 7 (instrucciones -> estructuras_control .)
    MENOR_IGUAL     reduce using rule 7 (instrucciones -> estructuras_control .)
    MAYOR_IGUAL     reduce using rule 7 (instrucciones -> estructuras_control .)
    IF              reduce using rule 7 (instrucciones -> estructuras_control .)
    $end            reduce using rule 7 (instrucciones -> estructuras_control .)
    RETURN          reduce using rule 7 (instrucciones -> estructuras_control .)


state 8

    (8) instrucciones -> estructuras_datos .

    LLAVE_DER       reduce using rule 8 (instrucciones -> estructuras_datos .)
    ECHO            reduce using rule 8 (instrucciones -> estructuras_datos .)
    PRINT           reduce using rule 8 (instrucciones -> estructuras_datos .)
    PRINT_R         reduce using rule 8 (instrucciones -> estructuras_datos .)
    VARIABLE        reduce using rule 8 (instrucciones -> estructuras_datos .)
    ENTERO          reduce using rule 8 (instrucciones -> estructuras_datos .)
    FLOTANTE        reduce using rule 8 (instrucciones -> estructuras_datos .)
    STRING          reduce using rule 8 (instrucciones -> estructuras_datos .)
    BOOLEANO        reduce using rule 8 (instrucciones -> estructuras_datos .)
    NEW             reduce using rule 8 (instrucciones -> estructuras_datos .)
    ARRAY           reduce using rule 8 (instrucciones -> estructuras_datos .)
    SIGNO_DOLAR     reduce using rule 8 (instrucciones -> estructuras_datos .)
    FOR             reduce using rule 8 (instrucciones -> estructuras_datos .)
    WHILE           reduce using rule 8 (instrucciones -> estructuras_datos .)
    FUNCTION        reduce using rule 8 (instrucciones -> estructuras_datos .)
    MENOR_IGUAL     reduce using rule 8 (instrucciones -> estructuras_datos .)
    MAYOR_IGUAL     reduce using rule 8 (instrucciones -> estructuras_datos .)
    IF              reduce using rule 8 (instrucciones -> estructuras_datos .)
    $end            reduce using rule 8 (instrucciones -> estructuras_datos .)
    RETURN          reduce using rule 8 (instrucciones -> estructuras_datos .)


state 9

    (9) instrucciones -> funciones .

    LLAVE_DER       reduce using rule 9 (instrucciones -> funciones .)
    ECHO            reduce using rule 9 (instrucciones -> funciones .)
    PRINT           reduce using rule 9 (instrucciones -> funciones .)
    PRINT_R         reduce using rule 9 (instrucciones -> funciones .)
    VARIABLE        reduce using rule 9 (instrucciones -> funciones .)
    ENTERO          reduce using rule 9 (instrucciones -> funciones .)
    FLOTANTE        reduce using rule 9 (instrucciones -> funciones .)
    STRING          reduce using rule 9 (instrucciones -> funciones .)
    BOOLEANO        reduce using rule 9 (instrucciones -> funciones .)
    NEW             reduce using rule 9 (instrucciones -> funciones .)
    ARRAY           reduce using rule 9 (instrucciones -> funciones .)
    SIGNO_DOLAR     reduce using rule 9 (instrucciones -> funciones .)
    FOR             reduce using rule 9 (instrucciones -> funciones .)
    WHILE           reduce using rule 9 (instrucciones -> funciones .)
    FUNCTION        reduce using rule 9 (instrucciones -> funciones .)
    MENOR_IGUAL     reduce using rule 9 (instrucciones -> funciones .)
    MAYOR_IGUAL     reduce using rule 9 (instrucciones -> funciones .)
    IF              reduce using rule 9 (instrucciones -> funciones .)
    $end            reduce using rule 9 (instrucciones -> funciones .)
    RETURN          reduce using rule 9 (instrucciones -> funciones .)


state 10

    (10) instrucciones -> op_pila .

    LLAVE_DER       reduce using rule 10 (instrucciones -> op_pila .)
    ECHO            reduce using rule 10 (instrucciones -> op_pila .)
    PRINT           reduce using rule 10 (instrucciones -> op_pila .)
    PRINT_R         reduce using rule 10 (instrucciones -> op_pila .)
    VARIABLE        reduce using rule 10 (instrucciones -> op_pila .)
    ENTERO          reduce using rule 10 (instrucciones -> op_pila .)
    FLOTANTE        reduce using rule 10 (instrucciones -> op_pila .)
    STRING          reduce using rule 10 (instrucciones -> op_pila .)
    BOOLEANO        reduce using rule 10 (instrucciones -> op_pila .)
    NEW             reduce using rule 10 (instrucciones -> op_pila .)
    ARRAY           reduce using rule 10 (instrucciones -> op_pila .)
    SIGNO_DOLAR     reduce using rule 10 (instrucciones -> op_pila .)
    FOR             reduce using rule 10 (instrucciones -> op_pila .)
    WHILE           reduce using rule 10 (instrucciones -> op_pila .)
    FUNCTION        reduce using rule 10 (instrucciones -> op_pila .)
    MENOR_IGUAL     reduce using rule 10 (instrucciones -> op_pila .)
    MAYOR_IGUAL     reduce using rule 10 (instrucciones -> op_pila .)
    IF              reduce using rule 10 (instrucciones -> op_pila .)
    $end            reduce using rule 10 (instrucciones -> op_pila .)
    RETURN          reduce using rule 10 (instrucciones -> op_pila .)


state 11

    (11) instrucciones -> valorc .

    LLAVE_DER       reduce using rule 11 (instrucciones -> valorc .)
    ECHO            reduce using rule 11 (instrucciones -> valorc .)
    PRINT           reduce using rule 11 (instrucciones -> valorc .)
    PRINT_R         reduce using rule 11 (instrucciones -> valorc .)
    VARIABLE        reduce using rule 11 (instrucciones -> valorc .)
    ENTERO          reduce using rule 11 (instrucciones -> valorc .)
    FLOTANTE        reduce using rule 11 (instrucciones -> valorc .)
    STRING          reduce using rule 11 (instrucciones -> valorc .)
    BOOLEANO        reduce using rule 11 (instrucciones -> valorc .)
    NEW             reduce using rule 11 (instrucciones -> valorc .)
    ARRAY           reduce using rule 11 (instrucciones -> valorc .)
    SIGNO_DOLAR     reduce using rule 11 (instrucciones -> valorc .)
    FOR             reduce using rule 11 (instrucciones -> valorc .)
    WHILE           reduce using rule 11 (instrucciones -> valorc .)
    FUNCTION        reduce using rule 11 (instrucciones -> valorc .)
    MENOR_IGUAL     reduce using rule 11 (instrucciones -> valorc .)
    MAYOR_IGUAL     reduce using rule 11 (instrucciones -> valorc .)
    IF              reduce using rule 11 (instrucciones -> valorc .)
    $end            reduce using rule 11 (instrucciones -> valorc .)
    RETURN          reduce using rule 11 (instrucciones -> valorc .)


state 12

    (12) instrucciones -> multiples .

    LLAVE_DER       reduce using rule 12 (instrucciones -> multiples .)
    ECHO            reduce using rule 12 (instrucciones -> multiples .)
    PRINT           reduce using rule 12 (instrucciones -> multiples .)
    PRINT_R         reduce using rule 12 (instrucciones -> multiples .)
    VARIABLE        reduce using rule 12 (instrucciones -> multiples .)
    ENTERO          reduce using rule 12 (instrucciones -> multiples .)
    FLOTANTE        reduce using rule 12 (instrucciones -> multiples .)
    STRING          reduce using rule 12 (instrucciones -> multiples .)
    BOOLEANO        reduce using rule 12 (instrucciones -> multiples .)
    NEW             reduce using rule 12 (instrucciones -> multiples .)
    ARRAY           reduce using rule 12 (instrucciones -> multiples .)
    SIGNO_DOLAR     reduce using rule 12 (instrucciones -> multiples .)
    FOR             reduce using rule 12 (instrucciones -> multiples .)
    WHILE           reduce using rule 12 (instrucciones -> multiples .)
    FUNCTION        reduce using rule 12 (instrucciones -> multiples .)
    MENOR_IGUAL     reduce using rule 12 (instrucciones -> multiples .)
    MAYOR_IGUAL     reduce using rule 12 (instrucciones -> multiples .)
    IF              reduce using rule 12 (instrucciones -> multiples .)
    $end            reduce using rule 12 (instrucciones -> multiples .)
    RETURN          reduce using rule 12 (instrucciones -> multiples .)


state 13

    (13) instrucciones -> LLAVE_DER .

    LLAVE_DER       reduce using rule 13 (instrucciones -> LLAVE_DER .)
    ECHO            reduce using rule 13 (instrucciones -> LLAVE_DER .)
    PRINT           reduce using rule 13 (instrucciones -> LLAVE_DER .)
    PRINT_R         reduce using rule 13 (instrucciones -> LLAVE_DER .)
    VARIABLE        reduce using rule 13 (instrucciones -> LLAVE_DER .)
    ENTERO          reduce using rule 13 (instrucciones -> LLAVE_DER .)
    FLOTANTE        reduce using rule 13 (instrucciones -> LLAVE_DER .)
    STRING          reduce using rule 13 (instrucciones -> LLAVE_DER .)
    BOOLEANO        reduce using rule 13 (instrucciones -> LLAVE_DER .)
    NEW             reduce using rule 13 (instrucciones -> LLAVE_DER .)
    ARRAY           reduce using rule 13 (instrucciones -> LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 13 (instrucciones -> LLAVE_DER .)
    FOR             reduce using rule 13 (instrucciones -> LLAVE_DER .)
    WHILE           reduce using rule 13 (instrucciones -> LLAVE_DER .)
    FUNCTION        reduce using rule 13 (instrucciones -> LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 13 (instrucciones -> LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 13 (instrucciones -> LLAVE_DER .)
    IF              reduce using rule 13 (instrucciones -> LLAVE_DER .)
    $end            reduce using rule 13 (instrucciones -> LLAVE_DER .)
    RETURN          reduce using rule 13 (instrucciones -> LLAVE_DER .)


state 14

    (14) instrucciones -> llamadaFuncion .

    LLAVE_DER       reduce using rule 14 (instrucciones -> llamadaFuncion .)
    ECHO            reduce using rule 14 (instrucciones -> llamadaFuncion .)
    PRINT           reduce using rule 14 (instrucciones -> llamadaFuncion .)
    PRINT_R         reduce using rule 14 (instrucciones -> llamadaFuncion .)
    VARIABLE        reduce using rule 14 (instrucciones -> llamadaFuncion .)
    ENTERO          reduce using rule 14 (instrucciones -> llamadaFuncion .)
    FLOTANTE        reduce using rule 14 (instrucciones -> llamadaFuncion .)
    STRING          reduce using rule 14 (instrucciones -> llamadaFuncion .)
    BOOLEANO        reduce using rule 14 (instrucciones -> llamadaFuncion .)
    NEW             reduce using rule 14 (instrucciones -> llamadaFuncion .)
    ARRAY           reduce using rule 14 (instrucciones -> llamadaFuncion .)
    SIGNO_DOLAR     reduce using rule 14 (instrucciones -> llamadaFuncion .)
    FOR             reduce using rule 14 (instrucciones -> llamadaFuncion .)
    WHILE           reduce using rule 14 (instrucciones -> llamadaFuncion .)
    FUNCTION        reduce using rule 14 (instrucciones -> llamadaFuncion .)
    MENOR_IGUAL     reduce using rule 14 (instrucciones -> llamadaFuncion .)
    MAYOR_IGUAL     reduce using rule 14 (instrucciones -> llamadaFuncion .)
    IF              reduce using rule 14 (instrucciones -> llamadaFuncion .)
    $end            reduce using rule 14 (instrucciones -> llamadaFuncion .)
    RETURN          reduce using rule 14 (instrucciones -> llamadaFuncion .)


state 15

    (15) instrucciones -> asignacionFunc .

    LLAVE_DER       reduce using rule 15 (instrucciones -> asignacionFunc .)
    ECHO            reduce using rule 15 (instrucciones -> asignacionFunc .)
    PRINT           reduce using rule 15 (instrucciones -> asignacionFunc .)
    PRINT_R         reduce using rule 15 (instrucciones -> asignacionFunc .)
    VARIABLE        reduce using rule 15 (instrucciones -> asignacionFunc .)
    ENTERO          reduce using rule 15 (instrucciones -> asignacionFunc .)
    FLOTANTE        reduce using rule 15 (instrucciones -> asignacionFunc .)
    STRING          reduce using rule 15 (instrucciones -> asignacionFunc .)
    BOOLEANO        reduce using rule 15 (instrucciones -> asignacionFunc .)
    NEW             reduce using rule 15 (instrucciones -> asignacionFunc .)
    ARRAY           reduce using rule 15 (instrucciones -> asignacionFunc .)
    SIGNO_DOLAR     reduce using rule 15 (instrucciones -> asignacionFunc .)
    FOR             reduce using rule 15 (instrucciones -> asignacionFunc .)
    WHILE           reduce using rule 15 (instrucciones -> asignacionFunc .)
    FUNCTION        reduce using rule 15 (instrucciones -> asignacionFunc .)
    MENOR_IGUAL     reduce using rule 15 (instrucciones -> asignacionFunc .)
    MAYOR_IGUAL     reduce using rule 15 (instrucciones -> asignacionFunc .)
    IF              reduce using rule 15 (instrucciones -> asignacionFunc .)
    $end            reduce using rule 15 (instrucciones -> asignacionFunc .)
    RETURN          reduce using rule 15 (instrucciones -> asignacionFunc .)


state 16

    (18) valor -> datos .
    (27) salidas_pos -> datos .

  ! reduce/reduce conflict for ENTERO resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for STRING resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for ECHO resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for PRINT resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for ARRAY resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for IF resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for $end resolved using rule 18 (valor -> datos .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (valor -> datos .)
    LLAVE_DER       reduce using rule 18 (valor -> datos .)
    ECHO            reduce using rule 18 (valor -> datos .)
    PRINT           reduce using rule 18 (valor -> datos .)
    PRINT_R         reduce using rule 18 (valor -> datos .)
    VARIABLE        reduce using rule 18 (valor -> datos .)
    ENTERO          reduce using rule 18 (valor -> datos .)
    FLOTANTE        reduce using rule 18 (valor -> datos .)
    STRING          reduce using rule 18 (valor -> datos .)
    BOOLEANO        reduce using rule 18 (valor -> datos .)
    NEW             reduce using rule 18 (valor -> datos .)
    ARRAY           reduce using rule 18 (valor -> datos .)
    SIGNO_DOLAR     reduce using rule 18 (valor -> datos .)
    FOR             reduce using rule 18 (valor -> datos .)
    WHILE           reduce using rule 18 (valor -> datos .)
    FUNCTION        reduce using rule 18 (valor -> datos .)
    MENOR_IGUAL     reduce using rule 18 (valor -> datos .)
    MAYOR_IGUAL     reduce using rule 18 (valor -> datos .)
    IF              reduce using rule 18 (valor -> datos .)
    $end            reduce using rule 18 (valor -> datos .)
    RETURN          reduce using rule 18 (valor -> datos .)

  ! ENTERO          [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! FLOTANTE        [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! STRING          [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! BOOLEANO        [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! SIGNO_DOLAR     [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! LLAVE_DER       [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! ECHO            [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! PRINT           [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! PRINT_R         [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! VARIABLE        [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! NEW             [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! ARRAY           [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! FOR             [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! WHILE           [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! FUNCTION        [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! MENOR_IGUAL     [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! MAYOR_IGUAL     [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! IF              [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! $end            [ reduce using rule 27 (salidas_pos -> datos .) ]
  ! RETURN          [ reduce using rule 27 (salidas_pos -> datos .) ]


state 17

    (19) valor -> pila .
    (38) estructuras_datos -> pila .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ECHO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for PRINT resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ENTERO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for STRING resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for ARRAY resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for IF resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for $end resolved using rule 19 (valor -> pila .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (valor -> pila .)
    LLAVE_DER       reduce using rule 19 (valor -> pila .)
    ECHO            reduce using rule 19 (valor -> pila .)
    PRINT           reduce using rule 19 (valor -> pila .)
    PRINT_R         reduce using rule 19 (valor -> pila .)
    VARIABLE        reduce using rule 19 (valor -> pila .)
    ENTERO          reduce using rule 19 (valor -> pila .)
    FLOTANTE        reduce using rule 19 (valor -> pila .)
    STRING          reduce using rule 19 (valor -> pila .)
    BOOLEANO        reduce using rule 19 (valor -> pila .)
    NEW             reduce using rule 19 (valor -> pila .)
    ARRAY           reduce using rule 19 (valor -> pila .)
    SIGNO_DOLAR     reduce using rule 19 (valor -> pila .)
    FOR             reduce using rule 19 (valor -> pila .)
    WHILE           reduce using rule 19 (valor -> pila .)
    FUNCTION        reduce using rule 19 (valor -> pila .)
    MENOR_IGUAL     reduce using rule 19 (valor -> pila .)
    MAYOR_IGUAL     reduce using rule 19 (valor -> pila .)
    IF              reduce using rule 19 (valor -> pila .)
    $end            reduce using rule 19 (valor -> pila .)
    RETURN          reduce using rule 19 (valor -> pila .)

  ! LLAVE_DER       [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! ECHO            [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! PRINT           [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! PRINT_R         [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! VARIABLE        [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! ENTERO          [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! FLOTANTE        [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! STRING          [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! BOOLEANO        [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! NEW             [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! ARRAY           [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! SIGNO_DOLAR     [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! FOR             [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! WHILE           [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! FUNCTION        [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! MENOR_IGUAL     [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! MAYOR_IGUAL     [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! IF              [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! $end            [ reduce using rule 38 (estructuras_datos -> pila .) ]
  ! RETURN          [ reduce using rule 38 (estructuras_datos -> pila .) ]


state 18

    (20) valor -> cola .
    (39) estructuras_datos -> cola .
    (71) for -> cola . LLAVE_DER
    (68) sinRetorno -> cola . LLAVE_DER

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ECHO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ENTERO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for STRING resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for NEW resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for ARRAY resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for IF resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for $end resolved using rule 20 (valor -> cola .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (valor -> cola .)
  ! shift/reduce conflict for LLAVE_DER resolved as shift
    ECHO            reduce using rule 20 (valor -> cola .)
    PRINT           reduce using rule 20 (valor -> cola .)
    PRINT_R         reduce using rule 20 (valor -> cola .)
    VARIABLE        reduce using rule 20 (valor -> cola .)
    ENTERO          reduce using rule 20 (valor -> cola .)
    FLOTANTE        reduce using rule 20 (valor -> cola .)
    STRING          reduce using rule 20 (valor -> cola .)
    BOOLEANO        reduce using rule 20 (valor -> cola .)
    NEW             reduce using rule 20 (valor -> cola .)
    ARRAY           reduce using rule 20 (valor -> cola .)
    SIGNO_DOLAR     reduce using rule 20 (valor -> cola .)
    FOR             reduce using rule 20 (valor -> cola .)
    WHILE           reduce using rule 20 (valor -> cola .)
    FUNCTION        reduce using rule 20 (valor -> cola .)
    MENOR_IGUAL     reduce using rule 20 (valor -> cola .)
    MAYOR_IGUAL     reduce using rule 20 (valor -> cola .)
    IF              reduce using rule 20 (valor -> cola .)
    $end            reduce using rule 20 (valor -> cola .)
    RETURN          reduce using rule 20 (valor -> cola .)
    LLAVE_DER       shift and go to state 52

  ! LLAVE_DER       [ reduce using rule 20 (valor -> cola .) ]
  ! LLAVE_DER       [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! ECHO            [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! PRINT           [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! PRINT_R         [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! VARIABLE        [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! ENTERO          [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! FLOTANTE        [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! STRING          [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! BOOLEANO        [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! NEW             [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! ARRAY           [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! SIGNO_DOLAR     [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! FOR             [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! WHILE           [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! FUNCTION        [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! MENOR_IGUAL     [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! MAYOR_IGUAL     [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! IF              [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! $end            [ reduce using rule 39 (estructuras_datos -> cola .) ]
  ! RETURN          [ reduce using rule 39 (estructuras_datos -> cola .) ]


state 19

    (21) valor -> arreglo .
    (40) estructuras_datos -> arreglo .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ECHO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ENTERO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for STRING resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for NEW resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for ARRAY resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for IF resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for $end resolved using rule 21 (valor -> arreglo .)
  ! reduce/reduce conflict for RETURN resolved using rule 21 (valor -> arreglo .)
    LLAVE_DER       reduce using rule 21 (valor -> arreglo .)
    ECHO            reduce using rule 21 (valor -> arreglo .)
    PRINT           reduce using rule 21 (valor -> arreglo .)
    PRINT_R         reduce using rule 21 (valor -> arreglo .)
    VARIABLE        reduce using rule 21 (valor -> arreglo .)
    ENTERO          reduce using rule 21 (valor -> arreglo .)
    FLOTANTE        reduce using rule 21 (valor -> arreglo .)
    STRING          reduce using rule 21 (valor -> arreglo .)
    BOOLEANO        reduce using rule 21 (valor -> arreglo .)
    NEW             reduce using rule 21 (valor -> arreglo .)
    ARRAY           reduce using rule 21 (valor -> arreglo .)
    SIGNO_DOLAR     reduce using rule 21 (valor -> arreglo .)
    FOR             reduce using rule 21 (valor -> arreglo .)
    WHILE           reduce using rule 21 (valor -> arreglo .)
    FUNCTION        reduce using rule 21 (valor -> arreglo .)
    MENOR_IGUAL     reduce using rule 21 (valor -> arreglo .)
    MAYOR_IGUAL     reduce using rule 21 (valor -> arreglo .)
    IF              reduce using rule 21 (valor -> arreglo .)
    $end            reduce using rule 21 (valor -> arreglo .)
    RETURN          reduce using rule 21 (valor -> arreglo .)

  ! LLAVE_DER       [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! ECHO            [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! PRINT           [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! PRINT_R         [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! VARIABLE        [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! ENTERO          [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! FLOTANTE        [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! STRING          [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! BOOLEANO        [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! NEW             [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! ARRAY           [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! SIGNO_DOLAR     [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! FOR             [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! WHILE           [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! FUNCTION        [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! MENOR_IGUAL     [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! MAYOR_IGUAL     [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! IF              [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! $end            [ reduce using rule 40 (estructuras_datos -> arreglo .) ]
  ! RETURN          [ reduce using rule 40 (estructuras_datos -> arreglo .) ]


state 20

    (22) valor -> opAritVar .

    LLAVE_DER       reduce using rule 22 (valor -> opAritVar .)
    ECHO            reduce using rule 22 (valor -> opAritVar .)
    PRINT           reduce using rule 22 (valor -> opAritVar .)
    PRINT_R         reduce using rule 22 (valor -> opAritVar .)
    VARIABLE        reduce using rule 22 (valor -> opAritVar .)
    ENTERO          reduce using rule 22 (valor -> opAritVar .)
    FLOTANTE        reduce using rule 22 (valor -> opAritVar .)
    STRING          reduce using rule 22 (valor -> opAritVar .)
    BOOLEANO        reduce using rule 22 (valor -> opAritVar .)
    NEW             reduce using rule 22 (valor -> opAritVar .)
    ARRAY           reduce using rule 22 (valor -> opAritVar .)
    SIGNO_DOLAR     reduce using rule 22 (valor -> opAritVar .)
    FOR             reduce using rule 22 (valor -> opAritVar .)
    WHILE           reduce using rule 22 (valor -> opAritVar .)
    FUNCTION        reduce using rule 22 (valor -> opAritVar .)
    MENOR_IGUAL     reduce using rule 22 (valor -> opAritVar .)
    MAYOR_IGUAL     reduce using rule 22 (valor -> opAritVar .)
    IF              reduce using rule 22 (valor -> opAritVar .)
    $end            reduce using rule 22 (valor -> opAritVar .)
    PUNTO_COMA      reduce using rule 22 (valor -> opAritVar .)
    PAREN_DER       reduce using rule 22 (valor -> opAritVar .)
    RETURN          reduce using rule 22 (valor -> opAritVar .)


state 21

    (17) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (103) concatenacion -> decl_variable . ASIG_CONCA datos PUNTO_COMA
    (96) op_pila -> decl_variable . ASIG_OBJ operad_pila
    (128) asignacionFunc -> decl_variable . IGUAL llamadaFuncion
    (119) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (28) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 53
    ASIG_CONCA      shift and go to state 54
    ASIG_OBJ        shift and go to state 55
    ENTERO          reduce using rule 28 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 28 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 28 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 28 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 28 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 28 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 28 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 28 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 28 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 28 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 28 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 28 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 28 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 28 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 28 (salidas_pos -> decl_variable .)
    IF              reduce using rule 28 (salidas_pos -> decl_variable .)
    $end            reduce using rule 28 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 28 (salidas_pos -> decl_variable .)


state 22

    (32) salida -> ECHO . salidas_pos PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (104) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    SIGNO_DOLAR     shift and go to state 61

    salidas_pos                    shift and go to state 56
    datos                          shift and go to state 57
    decl_variable                  shift and go to state 58
    conca_string                   shift and go to state 49

state 23

    (30) multiples -> salidas_pos .
    (31) multiples -> salidas_pos . multiples
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (104) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
    LLAVE_DER       reduce using rule 30 (multiples -> salidas_pos .)
    ECHO            reduce using rule 30 (multiples -> salidas_pos .)
    PRINT           reduce using rule 30 (multiples -> salidas_pos .)
    PRINT_R         reduce using rule 30 (multiples -> salidas_pos .)
    VARIABLE        reduce using rule 30 (multiples -> salidas_pos .)
    NEW             reduce using rule 30 (multiples -> salidas_pos .)
    ARRAY           reduce using rule 30 (multiples -> salidas_pos .)
    FOR             reduce using rule 30 (multiples -> salidas_pos .)
    WHILE           reduce using rule 30 (multiples -> salidas_pos .)
    FUNCTION        reduce using rule 30 (multiples -> salidas_pos .)
    MENOR_IGUAL     reduce using rule 30 (multiples -> salidas_pos .)
    MAYOR_IGUAL     reduce using rule 30 (multiples -> salidas_pos .)
    IF              reduce using rule 30 (multiples -> salidas_pos .)
    $end            reduce using rule 30 (multiples -> salidas_pos .)
    RETURN          reduce using rule 30 (multiples -> salidas_pos .)
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    SIGNO_DOLAR     shift and go to state 61

  ! ENTERO          [ reduce using rule 30 (multiples -> salidas_pos .) ]
  ! FLOTANTE        [ reduce using rule 30 (multiples -> salidas_pos .) ]
  ! STRING          [ reduce using rule 30 (multiples -> salidas_pos .) ]
  ! BOOLEANO        [ reduce using rule 30 (multiples -> salidas_pos .) ]
  ! SIGNO_DOLAR     [ reduce using rule 30 (multiples -> salidas_pos .) ]

    salidas_pos                    shift and go to state 23
    multiples                      shift and go to state 62
    datos                          shift and go to state 57
    decl_variable                  shift and go to state 58
    conca_string                   shift and go to state 49

state 24

    (33) salida -> PRINT . PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> PRINT . salidas_pos PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (104) conca_string -> . STRING PUNTO STRING

    PAREN_IZQ       shift and go to state 63
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    SIGNO_DOLAR     shift and go to state 61

    salidas_pos                    shift and go to state 64
    datos                          shift and go to state 57
    decl_variable                  shift and go to state 58
    conca_string                   shift and go to state 49

state 25

    (105) salida -> PRINT_R . PAREN_IZQ valor PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 65


state 26

    (35) estructuras_control -> if_else .

    LLAVE_DER       reduce using rule 35 (estructuras_control -> if_else .)
    ECHO            reduce using rule 35 (estructuras_control -> if_else .)
    PRINT           reduce using rule 35 (estructuras_control -> if_else .)
    PRINT_R         reduce using rule 35 (estructuras_control -> if_else .)
    VARIABLE        reduce using rule 35 (estructuras_control -> if_else .)
    ENTERO          reduce using rule 35 (estructuras_control -> if_else .)
    FLOTANTE        reduce using rule 35 (estructuras_control -> if_else .)
    STRING          reduce using rule 35 (estructuras_control -> if_else .)
    BOOLEANO        reduce using rule 35 (estructuras_control -> if_else .)
    NEW             reduce using rule 35 (estructuras_control -> if_else .)
    ARRAY           reduce using rule 35 (estructuras_control -> if_else .)
    SIGNO_DOLAR     reduce using rule 35 (estructuras_control -> if_else .)
    FOR             reduce using rule 35 (estructuras_control -> if_else .)
    WHILE           reduce using rule 35 (estructuras_control -> if_else .)
    FUNCTION        reduce using rule 35 (estructuras_control -> if_else .)
    MENOR_IGUAL     reduce using rule 35 (estructuras_control -> if_else .)
    MAYOR_IGUAL     reduce using rule 35 (estructuras_control -> if_else .)
    IF              reduce using rule 35 (estructuras_control -> if_else .)
    $end            reduce using rule 35 (estructuras_control -> if_else .)
    RETURN          reduce using rule 35 (estructuras_control -> if_else .)


state 27

    (36) estructuras_control -> for .

    LLAVE_DER       reduce using rule 36 (estructuras_control -> for .)
    ECHO            reduce using rule 36 (estructuras_control -> for .)
    PRINT           reduce using rule 36 (estructuras_control -> for .)
    PRINT_R         reduce using rule 36 (estructuras_control -> for .)
    VARIABLE        reduce using rule 36 (estructuras_control -> for .)
    ENTERO          reduce using rule 36 (estructuras_control -> for .)
    FLOTANTE        reduce using rule 36 (estructuras_control -> for .)
    STRING          reduce using rule 36 (estructuras_control -> for .)
    BOOLEANO        reduce using rule 36 (estructuras_control -> for .)
    NEW             reduce using rule 36 (estructuras_control -> for .)
    ARRAY           reduce using rule 36 (estructuras_control -> for .)
    SIGNO_DOLAR     reduce using rule 36 (estructuras_control -> for .)
    FOR             reduce using rule 36 (estructuras_control -> for .)
    WHILE           reduce using rule 36 (estructuras_control -> for .)
    FUNCTION        reduce using rule 36 (estructuras_control -> for .)
    MENOR_IGUAL     reduce using rule 36 (estructuras_control -> for .)
    MAYOR_IGUAL     reduce using rule 36 (estructuras_control -> for .)
    IF              reduce using rule 36 (estructuras_control -> for .)
    $end            reduce using rule 36 (estructuras_control -> for .)
    RETURN          reduce using rule 36 (estructuras_control -> for .)


state 28

    (37) estructuras_control -> whileDeclaracion .

    LLAVE_DER       reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    ECHO            reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    PRINT           reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    PRINT_R         reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    VARIABLE        reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    ENTERO          reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    FLOTANTE        reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    STRING          reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    BOOLEANO        reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    NEW             reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    ARRAY           reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    SIGNO_DOLAR     reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    FOR             reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    WHILE           reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    FUNCTION        reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    MENOR_IGUAL     reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    MAYOR_IGUAL     reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    IF              reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    $end            reduce using rule 37 (estructuras_control -> whileDeclaracion .)
    RETURN          reduce using rule 37 (estructuras_control -> whileDeclaracion .)


state 29

    (41) funciones -> funcion_variable .

    LLAVE_DER       reduce using rule 41 (funciones -> funcion_variable .)
    ECHO            reduce using rule 41 (funciones -> funcion_variable .)
    PRINT           reduce using rule 41 (funciones -> funcion_variable .)
    PRINT_R         reduce using rule 41 (funciones -> funcion_variable .)
    VARIABLE        reduce using rule 41 (funciones -> funcion_variable .)
    ENTERO          reduce using rule 41 (funciones -> funcion_variable .)
    FLOTANTE        reduce using rule 41 (funciones -> funcion_variable .)
    STRING          reduce using rule 41 (funciones -> funcion_variable .)
    BOOLEANO        reduce using rule 41 (funciones -> funcion_variable .)
    NEW             reduce using rule 41 (funciones -> funcion_variable .)
    ARRAY           reduce using rule 41 (funciones -> funcion_variable .)
    SIGNO_DOLAR     reduce using rule 41 (funciones -> funcion_variable .)
    FOR             reduce using rule 41 (funciones -> funcion_variable .)
    WHILE           reduce using rule 41 (funciones -> funcion_variable .)
    FUNCTION        reduce using rule 41 (funciones -> funcion_variable .)
    MENOR_IGUAL     reduce using rule 41 (funciones -> funcion_variable .)
    MAYOR_IGUAL     reduce using rule 41 (funciones -> funcion_variable .)
    IF              reduce using rule 41 (funciones -> funcion_variable .)
    $end            reduce using rule 41 (funciones -> funcion_variable .)
    RETURN          reduce using rule 41 (funciones -> funcion_variable .)


state 30

    (42) funciones -> sinRetorno .

    LLAVE_DER       reduce using rule 42 (funciones -> sinRetorno .)
    ECHO            reduce using rule 42 (funciones -> sinRetorno .)
    PRINT           reduce using rule 42 (funciones -> sinRetorno .)
    PRINT_R         reduce using rule 42 (funciones -> sinRetorno .)
    VARIABLE        reduce using rule 42 (funciones -> sinRetorno .)
    ENTERO          reduce using rule 42 (funciones -> sinRetorno .)
    FLOTANTE        reduce using rule 42 (funciones -> sinRetorno .)
    STRING          reduce using rule 42 (funciones -> sinRetorno .)
    BOOLEANO        reduce using rule 42 (funciones -> sinRetorno .)
    NEW             reduce using rule 42 (funciones -> sinRetorno .)
    ARRAY           reduce using rule 42 (funciones -> sinRetorno .)
    SIGNO_DOLAR     reduce using rule 42 (funciones -> sinRetorno .)
    FOR             reduce using rule 42 (funciones -> sinRetorno .)
    WHILE           reduce using rule 42 (funciones -> sinRetorno .)
    FUNCTION        reduce using rule 42 (funciones -> sinRetorno .)
    MENOR_IGUAL     reduce using rule 42 (funciones -> sinRetorno .)
    MAYOR_IGUAL     reduce using rule 42 (funciones -> sinRetorno .)
    IF              reduce using rule 42 (funciones -> sinRetorno .)
    $end            reduce using rule 42 (funciones -> sinRetorno .)
    RETURN          reduce using rule 42 (funciones -> sinRetorno .)


state 31

    (43) funciones -> functConPar .

    LLAVE_DER       reduce using rule 43 (funciones -> functConPar .)
    ECHO            reduce using rule 43 (funciones -> functConPar .)
    PRINT           reduce using rule 43 (funciones -> functConPar .)
    PRINT_R         reduce using rule 43 (funciones -> functConPar .)
    VARIABLE        reduce using rule 43 (funciones -> functConPar .)
    ENTERO          reduce using rule 43 (funciones -> functConPar .)
    FLOTANTE        reduce using rule 43 (funciones -> functConPar .)
    STRING          reduce using rule 43 (funciones -> functConPar .)
    BOOLEANO        reduce using rule 43 (funciones -> functConPar .)
    NEW             reduce using rule 43 (funciones -> functConPar .)
    ARRAY           reduce using rule 43 (funciones -> functConPar .)
    SIGNO_DOLAR     reduce using rule 43 (funciones -> functConPar .)
    FOR             reduce using rule 43 (funciones -> functConPar .)
    WHILE           reduce using rule 43 (funciones -> functConPar .)
    FUNCTION        reduce using rule 43 (funciones -> functConPar .)
    MENOR_IGUAL     reduce using rule 43 (funciones -> functConPar .)
    MAYOR_IGUAL     reduce using rule 43 (funciones -> functConPar .)
    IF              reduce using rule 43 (funciones -> functConPar .)
    $end            reduce using rule 43 (funciones -> functConPar .)
    RETURN          reduce using rule 43 (funciones -> functConPar .)


state 32

    (77) valorc -> menor .

    LLAVE_DER       reduce using rule 77 (valorc -> menor .)
    ECHO            reduce using rule 77 (valorc -> menor .)
    PRINT           reduce using rule 77 (valorc -> menor .)
    PRINT_R         reduce using rule 77 (valorc -> menor .)
    VARIABLE        reduce using rule 77 (valorc -> menor .)
    ENTERO          reduce using rule 77 (valorc -> menor .)
    FLOTANTE        reduce using rule 77 (valorc -> menor .)
    STRING          reduce using rule 77 (valorc -> menor .)
    BOOLEANO        reduce using rule 77 (valorc -> menor .)
    NEW             reduce using rule 77 (valorc -> menor .)
    ARRAY           reduce using rule 77 (valorc -> menor .)
    SIGNO_DOLAR     reduce using rule 77 (valorc -> menor .)
    FOR             reduce using rule 77 (valorc -> menor .)
    WHILE           reduce using rule 77 (valorc -> menor .)
    FUNCTION        reduce using rule 77 (valorc -> menor .)
    MENOR_IGUAL     reduce using rule 77 (valorc -> menor .)
    MAYOR_IGUAL     reduce using rule 77 (valorc -> menor .)
    IF              reduce using rule 77 (valorc -> menor .)
    $end            reduce using rule 77 (valorc -> menor .)
    RETURN          reduce using rule 77 (valorc -> menor .)


state 33

    (78) valorc -> mayor .

    LLAVE_DER       reduce using rule 78 (valorc -> mayor .)
    ECHO            reduce using rule 78 (valorc -> mayor .)
    PRINT           reduce using rule 78 (valorc -> mayor .)
    PRINT_R         reduce using rule 78 (valorc -> mayor .)
    VARIABLE        reduce using rule 78 (valorc -> mayor .)
    ENTERO          reduce using rule 78 (valorc -> mayor .)
    FLOTANTE        reduce using rule 78 (valorc -> mayor .)
    STRING          reduce using rule 78 (valorc -> mayor .)
    BOOLEANO        reduce using rule 78 (valorc -> mayor .)
    NEW             reduce using rule 78 (valorc -> mayor .)
    ARRAY           reduce using rule 78 (valorc -> mayor .)
    SIGNO_DOLAR     reduce using rule 78 (valorc -> mayor .)
    FOR             reduce using rule 78 (valorc -> mayor .)
    WHILE           reduce using rule 78 (valorc -> mayor .)
    FUNCTION        reduce using rule 78 (valorc -> mayor .)
    MENOR_IGUAL     reduce using rule 78 (valorc -> mayor .)
    MAYOR_IGUAL     reduce using rule 78 (valorc -> mayor .)
    IF              reduce using rule 78 (valorc -> mayor .)
    $end            reduce using rule 78 (valorc -> mayor .)
    RETURN          reduce using rule 78 (valorc -> mayor .)


state 34

    (127) llamadaFuncion -> VARIABLE . PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 66


state 35

    (23) datos -> ENTERO .
    (129) paraCalculos -> ENTERO .

    LLAVE_DER       reduce using rule 23 (datos -> ENTERO .)
    ECHO            reduce using rule 23 (datos -> ENTERO .)
    PRINT           reduce using rule 23 (datos -> ENTERO .)
    PRINT_R         reduce using rule 23 (datos -> ENTERO .)
    VARIABLE        reduce using rule 23 (datos -> ENTERO .)
    ENTERO          reduce using rule 23 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 23 (datos -> ENTERO .)
    STRING          reduce using rule 23 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 23 (datos -> ENTERO .)
    NEW             reduce using rule 23 (datos -> ENTERO .)
    ARRAY           reduce using rule 23 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 23 (datos -> ENTERO .)
    FOR             reduce using rule 23 (datos -> ENTERO .)
    WHILE           reduce using rule 23 (datos -> ENTERO .)
    FUNCTION        reduce using rule 23 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 23 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 23 (datos -> ENTERO .)
    IF              reduce using rule 23 (datos -> ENTERO .)
    $end            reduce using rule 23 (datos -> ENTERO .)
    PUNTO_COMA      reduce using rule 23 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 23 (datos -> ENTERO .)
    RETURN          reduce using rule 23 (datos -> ENTERO .)
    SUMA            reduce using rule 129 (paraCalculos -> ENTERO .)
    RESTA           reduce using rule 129 (paraCalculos -> ENTERO .)
    MULTIPL         reduce using rule 129 (paraCalculos -> ENTERO .)
    DIVISION        reduce using rule 129 (paraCalculos -> ENTERO .)
    DIVISION_ENT    reduce using rule 129 (paraCalculos -> ENTERO .)
    POTENCIA        reduce using rule 129 (paraCalculos -> ENTERO .)
    MODULO          reduce using rule 129 (paraCalculos -> ENTERO .)


state 36

    (24) datos -> FLOTANTE .
    (130) paraCalculos -> FLOTANTE .

    LLAVE_DER       reduce using rule 24 (datos -> FLOTANTE .)
    ECHO            reduce using rule 24 (datos -> FLOTANTE .)
    PRINT           reduce using rule 24 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 24 (datos -> FLOTANTE .)
    VARIABLE        reduce using rule 24 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 24 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 24 (datos -> FLOTANTE .)
    STRING          reduce using rule 24 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 24 (datos -> FLOTANTE .)
    NEW             reduce using rule 24 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 24 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 24 (datos -> FLOTANTE .)
    FOR             reduce using rule 24 (datos -> FLOTANTE .)
    WHILE           reduce using rule 24 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 24 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 24 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 24 (datos -> FLOTANTE .)
    IF              reduce using rule 24 (datos -> FLOTANTE .)
    $end            reduce using rule 24 (datos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 24 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 24 (datos -> FLOTANTE .)
    RETURN          reduce using rule 24 (datos -> FLOTANTE .)
    SUMA            reduce using rule 130 (paraCalculos -> FLOTANTE .)
    RESTA           reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MULTIPL         reduce using rule 130 (paraCalculos -> FLOTANTE .)
    DIVISION        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    DIVISION_ENT    reduce using rule 130 (paraCalculos -> FLOTANTE .)
    POTENCIA        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MODULO          reduce using rule 130 (paraCalculos -> FLOTANTE .)


state 37

    (25) datos -> STRING .
    (104) conca_string -> STRING . PUNTO STRING

    LLAVE_DER       reduce using rule 25 (datos -> STRING .)
    ECHO            reduce using rule 25 (datos -> STRING .)
    PRINT           reduce using rule 25 (datos -> STRING .)
    PRINT_R         reduce using rule 25 (datos -> STRING .)
    VARIABLE        reduce using rule 25 (datos -> STRING .)
    ENTERO          reduce using rule 25 (datos -> STRING .)
    FLOTANTE        reduce using rule 25 (datos -> STRING .)
    STRING          reduce using rule 25 (datos -> STRING .)
    BOOLEANO        reduce using rule 25 (datos -> STRING .)
    NEW             reduce using rule 25 (datos -> STRING .)
    ARRAY           reduce using rule 25 (datos -> STRING .)
    SIGNO_DOLAR     reduce using rule 25 (datos -> STRING .)
    FOR             reduce using rule 25 (datos -> STRING .)
    WHILE           reduce using rule 25 (datos -> STRING .)
    FUNCTION        reduce using rule 25 (datos -> STRING .)
    MENOR_IGUAL     reduce using rule 25 (datos -> STRING .)
    MAYOR_IGUAL     reduce using rule 25 (datos -> STRING .)
    IF              reduce using rule 25 (datos -> STRING .)
    $end            reduce using rule 25 (datos -> STRING .)
    PUNTO_COMA      reduce using rule 25 (datos -> STRING .)
    RETURN          reduce using rule 25 (datos -> STRING .)
    PAREN_DER       reduce using rule 25 (datos -> STRING .)
    PUNTO           shift and go to state 67


state 38

    (26) datos -> BOOLEANO .

    LLAVE_DER       reduce using rule 26 (datos -> BOOLEANO .)
    ECHO            reduce using rule 26 (datos -> BOOLEANO .)
    PRINT           reduce using rule 26 (datos -> BOOLEANO .)
    PRINT_R         reduce using rule 26 (datos -> BOOLEANO .)
    VARIABLE        reduce using rule 26 (datos -> BOOLEANO .)
    ENTERO          reduce using rule 26 (datos -> BOOLEANO .)
    FLOTANTE        reduce using rule 26 (datos -> BOOLEANO .)
    STRING          reduce using rule 26 (datos -> BOOLEANO .)
    BOOLEANO        reduce using rule 26 (datos -> BOOLEANO .)
    NEW             reduce using rule 26 (datos -> BOOLEANO .)
    ARRAY           reduce using rule 26 (datos -> BOOLEANO .)
    SIGNO_DOLAR     reduce using rule 26 (datos -> BOOLEANO .)
    FOR             reduce using rule 26 (datos -> BOOLEANO .)
    WHILE           reduce using rule 26 (datos -> BOOLEANO .)
    FUNCTION        reduce using rule 26 (datos -> BOOLEANO .)
    MENOR_IGUAL     reduce using rule 26 (datos -> BOOLEANO .)
    MAYOR_IGUAL     reduce using rule 26 (datos -> BOOLEANO .)
    IF              reduce using rule 26 (datos -> BOOLEANO .)
    $end            reduce using rule 26 (datos -> BOOLEANO .)
    PUNTO_COMA      reduce using rule 26 (datos -> BOOLEANO .)
    RETURN          reduce using rule 26 (datos -> BOOLEANO .)
    PAREN_DER       reduce using rule 26 (datos -> BOOLEANO .)
    COMA            reduce using rule 26 (datos -> BOOLEANO .)
    FLECHA          reduce using rule 26 (datos -> BOOLEANO .)


state 39

    (95) pila -> NEW . STACK PAREN_IZQ PAREN_DER
    (69) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    STACK           shift and go to state 68
    QUEUE           shift and go to state 69


state 40

    (115) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 70


state 41

    (134) opAritVar -> paraCalculos . combinarOp
    (132) combinarOp -> . operad_arit paraCalculos
    (133) combinarOp -> . operad_arit paraCalculos combinarOp
    (50) operad_arit -> . SUMA
    (51) operad_arit -> . RESTA
    (52) operad_arit -> . MULTIPL
    (53) operad_arit -> . DIVISION
    (54) operad_arit -> . DIVISION_ENT
    (55) operad_arit -> . POTENCIA
    (56) operad_arit -> . MODULO

    SUMA            shift and go to state 73
    RESTA           shift and go to state 74
    MULTIPL         shift and go to state 75
    DIVISION        shift and go to state 76
    DIVISION_ENT    shift and go to state 77
    POTENCIA        shift and go to state 78
    MODULO          shift and go to state 79

    combinarOp                     shift and go to state 71
    operad_arit                    shift and go to state 72

state 42

    (16) decl_variable -> SIGNO_DOLAR . VARIABLE
    (131) paraCalculos -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 80


state 43

    (82) if_else -> if_else_inicio . if_else_fin
    (83) if_else -> if_else_inicio . if_else_cuerpo if_else_fin
    (87) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER
    (85) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            shift and go to state 83
    ELSEIF          shift and go to state 84

    if_else_fin                    shift and go to state 81
    if_else_cuerpo                 shift and go to state 82

state 44

    (70) for -> FOR . PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 85


state 45

    (111) whileDeclaracion -> WHILE . PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_IZQ       shift and go to state 86


state 46

    (101) funcion_variable -> FUNCTION . VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (126) functConPar -> FUNCTION . VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    VARIABLE        shift and go to state 87


state 47

    (75) menor -> MENOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 88


state 48

    (76) mayor -> MAYOR_IGUAL . ENTERO PUNTO_COMA

    ENTERO          shift and go to state 89


state 49

    (29) salidas_pos -> conca_string .

    ENTERO          reduce using rule 29 (salidas_pos -> conca_string .)
    FLOTANTE        reduce using rule 29 (salidas_pos -> conca_string .)
    STRING          reduce using rule 29 (salidas_pos -> conca_string .)
    BOOLEANO        reduce using rule 29 (salidas_pos -> conca_string .)
    SIGNO_DOLAR     reduce using rule 29 (salidas_pos -> conca_string .)
    LLAVE_DER       reduce using rule 29 (salidas_pos -> conca_string .)
    ECHO            reduce using rule 29 (salidas_pos -> conca_string .)
    PRINT           reduce using rule 29 (salidas_pos -> conca_string .)
    PRINT_R         reduce using rule 29 (salidas_pos -> conca_string .)
    VARIABLE        reduce using rule 29 (salidas_pos -> conca_string .)
    NEW             reduce using rule 29 (salidas_pos -> conca_string .)
    ARRAY           reduce using rule 29 (salidas_pos -> conca_string .)
    FOR             reduce using rule 29 (salidas_pos -> conca_string .)
    WHILE           reduce using rule 29 (salidas_pos -> conca_string .)
    FUNCTION        reduce using rule 29 (salidas_pos -> conca_string .)
    MENOR_IGUAL     reduce using rule 29 (salidas_pos -> conca_string .)
    MAYOR_IGUAL     reduce using rule 29 (salidas_pos -> conca_string .)
    IF              reduce using rule 29 (salidas_pos -> conca_string .)
    $end            reduce using rule 29 (salidas_pos -> conca_string .)
    PUNTO_COMA      reduce using rule 29 (salidas_pos -> conca_string .)
    RETURN          reduce using rule 29 (salidas_pos -> conca_string .)
    PAREN_DER       reduce using rule 29 (salidas_pos -> conca_string .)


state 50

    (84) if_else_inicio -> IF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 90


state 51

    (2) variaslineas -> instrucciones variaslineas .

    $end            reduce using rule 2 (variaslineas -> instrucciones variaslineas .)


state 52

    (71) for -> cola LLAVE_DER .
    (68) sinRetorno -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ECHO resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for PRINT_R resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ENTERO resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FLOTANTE resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for STRING resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for BOOLEANO resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for NEW resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for ARRAY resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for SIGNO_DOLAR resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for WHILE resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for MAYOR_IGUAL resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for IF resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for $end resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    PRINT           reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    VARIABLE        reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    ENTERO          reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    STRING          reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    NEW             reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    ARRAY           reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    FOR             reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    WHILE           reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    FUNCTION        reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    IF              reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    $end            reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    RETURN          reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! ECHO            [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! PRINT           [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! PRINT_R         [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! VARIABLE        [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! ENTERO          [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! FLOTANTE        [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! STRING          [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! BOOLEANO        [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! NEW             [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! ARRAY           [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! SIGNO_DOLAR     [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! FOR             [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! WHILE           [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! FUNCTION        [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! MENOR_IGUAL     [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! MAYOR_IGUAL     [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! IF              [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! $end            [ reduce using rule 71 (for -> cola LLAVE_DER .) ]
  ! RETURN          [ reduce using rule 71 (for -> cola LLAVE_DER .) ]


state 53

    (17) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (128) asignacionFunc -> decl_variable IGUAL . llamadaFuncion
    (119) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ARRAY           shift and go to state 94
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    SIGNO_DOLAR     shift and go to state 42

    decl_variable                  shift and go to state 91
    valor                          shift and go to state 92
    llamadaFuncion                 shift and go to state 93
    datos                          shift and go to state 95
    pila                           shift and go to state 96
    cola                           shift and go to state 97
    arreglo                        shift and go to state 98
    opAritVar                      shift and go to state 20
    paraCalculos                   shift and go to state 41

state 54

    (103) concatenacion -> decl_variable ASIG_CONCA . datos PUNTO_COMA
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 100

state 55

    (96) op_pila -> decl_variable ASIG_OBJ . operad_pila
    (97) operad_pila -> . PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA
    (98) operad_pila -> . POP PAREN_IZQ PAREN_DER PUNTO_COMA
    (99) operad_pila -> . COUNT PAREN_IZQ PAREN_DER PUNTO_COMA
    (100) operad_pila -> . CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA

    PUSH            shift and go to state 102
    POP             shift and go to state 103
    COUNT           shift and go to state 104
    CURRENT         shift and go to state 105

    operad_pila                    shift and go to state 101

state 56

    (32) salida -> ECHO salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 106


state 57

    (27) salidas_pos -> datos .

    PUNTO_COMA      reduce using rule 27 (salidas_pos -> datos .)
    ENTERO          reduce using rule 27 (salidas_pos -> datos .)
    FLOTANTE        reduce using rule 27 (salidas_pos -> datos .)
    STRING          reduce using rule 27 (salidas_pos -> datos .)
    BOOLEANO        reduce using rule 27 (salidas_pos -> datos .)
    SIGNO_DOLAR     reduce using rule 27 (salidas_pos -> datos .)
    LLAVE_DER       reduce using rule 27 (salidas_pos -> datos .)
    ECHO            reduce using rule 27 (salidas_pos -> datos .)
    PRINT           reduce using rule 27 (salidas_pos -> datos .)
    PRINT_R         reduce using rule 27 (salidas_pos -> datos .)
    VARIABLE        reduce using rule 27 (salidas_pos -> datos .)
    NEW             reduce using rule 27 (salidas_pos -> datos .)
    ARRAY           reduce using rule 27 (salidas_pos -> datos .)
    FOR             reduce using rule 27 (salidas_pos -> datos .)
    WHILE           reduce using rule 27 (salidas_pos -> datos .)
    FUNCTION        reduce using rule 27 (salidas_pos -> datos .)
    MENOR_IGUAL     reduce using rule 27 (salidas_pos -> datos .)
    MAYOR_IGUAL     reduce using rule 27 (salidas_pos -> datos .)
    IF              reduce using rule 27 (salidas_pos -> datos .)
    $end            reduce using rule 27 (salidas_pos -> datos .)
    RETURN          reduce using rule 27 (salidas_pos -> datos .)
    PAREN_DER       reduce using rule 27 (salidas_pos -> datos .)


state 58

    (28) salidas_pos -> decl_variable .

    PUNTO_COMA      reduce using rule 28 (salidas_pos -> decl_variable .)
    ENTERO          reduce using rule 28 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 28 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 28 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 28 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 28 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 28 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 28 (salidas_pos -> decl_variable .)
    VARIABLE        reduce using rule 28 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 28 (salidas_pos -> decl_variable .)
    ARRAY           reduce using rule 28 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 28 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 28 (salidas_pos -> decl_variable .)
    FUNCTION        reduce using rule 28 (salidas_pos -> decl_variable .)
    MENOR_IGUAL     reduce using rule 28 (salidas_pos -> decl_variable .)
    MAYOR_IGUAL     reduce using rule 28 (salidas_pos -> decl_variable .)
    IF              reduce using rule 28 (salidas_pos -> decl_variable .)
    $end            reduce using rule 28 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 28 (salidas_pos -> decl_variable .)
    PAREN_DER       reduce using rule 28 (salidas_pos -> decl_variable .)


state 59

    (23) datos -> ENTERO .

    PUNTO_COMA      reduce using rule 23 (datos -> ENTERO .)
    ENTERO          reduce using rule 23 (datos -> ENTERO .)
    FLOTANTE        reduce using rule 23 (datos -> ENTERO .)
    STRING          reduce using rule 23 (datos -> ENTERO .)
    BOOLEANO        reduce using rule 23 (datos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 23 (datos -> ENTERO .)
    LLAVE_DER       reduce using rule 23 (datos -> ENTERO .)
    ECHO            reduce using rule 23 (datos -> ENTERO .)
    PRINT           reduce using rule 23 (datos -> ENTERO .)
    PRINT_R         reduce using rule 23 (datos -> ENTERO .)
    VARIABLE        reduce using rule 23 (datos -> ENTERO .)
    NEW             reduce using rule 23 (datos -> ENTERO .)
    ARRAY           reduce using rule 23 (datos -> ENTERO .)
    FOR             reduce using rule 23 (datos -> ENTERO .)
    WHILE           reduce using rule 23 (datos -> ENTERO .)
    FUNCTION        reduce using rule 23 (datos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 23 (datos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 23 (datos -> ENTERO .)
    IF              reduce using rule 23 (datos -> ENTERO .)
    $end            reduce using rule 23 (datos -> ENTERO .)
    RETURN          reduce using rule 23 (datos -> ENTERO .)
    PAREN_DER       reduce using rule 23 (datos -> ENTERO .)
    COMA            reduce using rule 23 (datos -> ENTERO .)
    FLECHA          reduce using rule 23 (datos -> ENTERO .)


state 60

    (24) datos -> FLOTANTE .

    PUNTO_COMA      reduce using rule 24 (datos -> FLOTANTE .)
    ENTERO          reduce using rule 24 (datos -> FLOTANTE .)
    FLOTANTE        reduce using rule 24 (datos -> FLOTANTE .)
    STRING          reduce using rule 24 (datos -> FLOTANTE .)
    BOOLEANO        reduce using rule 24 (datos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 24 (datos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 24 (datos -> FLOTANTE .)
    ECHO            reduce using rule 24 (datos -> FLOTANTE .)
    PRINT           reduce using rule 24 (datos -> FLOTANTE .)
    PRINT_R         reduce using rule 24 (datos -> FLOTANTE .)
    VARIABLE        reduce using rule 24 (datos -> FLOTANTE .)
    NEW             reduce using rule 24 (datos -> FLOTANTE .)
    ARRAY           reduce using rule 24 (datos -> FLOTANTE .)
    FOR             reduce using rule 24 (datos -> FLOTANTE .)
    WHILE           reduce using rule 24 (datos -> FLOTANTE .)
    FUNCTION        reduce using rule 24 (datos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 24 (datos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 24 (datos -> FLOTANTE .)
    IF              reduce using rule 24 (datos -> FLOTANTE .)
    $end            reduce using rule 24 (datos -> FLOTANTE .)
    RETURN          reduce using rule 24 (datos -> FLOTANTE .)
    PAREN_DER       reduce using rule 24 (datos -> FLOTANTE .)
    COMA            reduce using rule 24 (datos -> FLOTANTE .)
    FLECHA          reduce using rule 24 (datos -> FLOTANTE .)


state 61

    (16) decl_variable -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 107


state 62

    (31) multiples -> salidas_pos multiples .

    LLAVE_DER       reduce using rule 31 (multiples -> salidas_pos multiples .)
    ECHO            reduce using rule 31 (multiples -> salidas_pos multiples .)
    PRINT           reduce using rule 31 (multiples -> salidas_pos multiples .)
    PRINT_R         reduce using rule 31 (multiples -> salidas_pos multiples .)
    VARIABLE        reduce using rule 31 (multiples -> salidas_pos multiples .)
    ENTERO          reduce using rule 31 (multiples -> salidas_pos multiples .)
    FLOTANTE        reduce using rule 31 (multiples -> salidas_pos multiples .)
    STRING          reduce using rule 31 (multiples -> salidas_pos multiples .)
    BOOLEANO        reduce using rule 31 (multiples -> salidas_pos multiples .)
    NEW             reduce using rule 31 (multiples -> salidas_pos multiples .)
    ARRAY           reduce using rule 31 (multiples -> salidas_pos multiples .)
    SIGNO_DOLAR     reduce using rule 31 (multiples -> salidas_pos multiples .)
    FOR             reduce using rule 31 (multiples -> salidas_pos multiples .)
    WHILE           reduce using rule 31 (multiples -> salidas_pos multiples .)
    FUNCTION        reduce using rule 31 (multiples -> salidas_pos multiples .)
    MENOR_IGUAL     reduce using rule 31 (multiples -> salidas_pos multiples .)
    MAYOR_IGUAL     reduce using rule 31 (multiples -> salidas_pos multiples .)
    IF              reduce using rule 31 (multiples -> salidas_pos multiples .)
    $end            reduce using rule 31 (multiples -> salidas_pos multiples .)
    RETURN          reduce using rule 31 (multiples -> salidas_pos multiples .)


state 63

    (33) salida -> PRINT PAREN_IZQ . salidas_pos PAREN_DER PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (104) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    SIGNO_DOLAR     shift and go to state 61

    salidas_pos                    shift and go to state 108
    datos                          shift and go to state 57
    decl_variable                  shift and go to state 58
    conca_string                   shift and go to state 49

state 64

    (34) salida -> PRINT salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 109


state 65

    (105) salida -> PRINT_R PAREN_IZQ . valor PAREN_DER PUNTO_COMA
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42

    valor                          shift and go to state 110
    datos                          shift and go to state 95
    pila                           shift and go to state 96
    cola                           shift and go to state 97
    arreglo                        shift and go to state 98
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 91
    paraCalculos                   shift and go to state 41

state 66

    (127) llamadaFuncion -> VARIABLE PAREN_IZQ . parametrosR PAREN_DER PUNTO_COMA
    (122) parametrosR -> . parametros
    (123) parametrosR -> . parametros repite_parametros
    (120) parametros -> . datos
    (121) parametros -> . SIGNO_DOLAR VARIABLE
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 114
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    parametrosR                    shift and go to state 111
    parametros                     shift and go to state 112
    datos                          shift and go to state 113

state 67

    (104) conca_string -> STRING PUNTO . STRING

    STRING          shift and go to state 115


state 68

    (95) pila -> NEW STACK . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 116


state 69

    (69) cola -> NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 117


state 70

    (115) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (112) valores -> . datos repite_valores
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    valores                        shift and go to state 118
    datos                          shift and go to state 119

state 71

    (134) opAritVar -> paraCalculos combinarOp .

    LLAVE_DER       reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    ECHO            reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    PRINT           reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    PRINT_R         reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    VARIABLE        reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    ENTERO          reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    FLOTANTE        reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    STRING          reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    BOOLEANO        reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    NEW             reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    ARRAY           reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    SIGNO_DOLAR     reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    FOR             reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    WHILE           reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    FUNCTION        reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    MENOR_IGUAL     reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    MAYOR_IGUAL     reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    IF              reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    $end            reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    PUNTO_COMA      reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    PAREN_DER       reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)
    RETURN          reduce using rule 134 (opAritVar -> paraCalculos combinarOp .)


state 72

    (132) combinarOp -> operad_arit . paraCalculos
    (133) combinarOp -> operad_arit . paraCalculos combinarOp
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 121
    FLOTANTE        shift and go to state 122
    SIGNO_DOLAR     shift and go to state 123

    paraCalculos                   shift and go to state 120

state 73

    (50) operad_arit -> SUMA .

    ENTERO          reduce using rule 50 (operad_arit -> SUMA .)
    FLOTANTE        reduce using rule 50 (operad_arit -> SUMA .)
    SIGNO_DOLAR     reduce using rule 50 (operad_arit -> SUMA .)


state 74

    (51) operad_arit -> RESTA .

    ENTERO          reduce using rule 51 (operad_arit -> RESTA .)
    FLOTANTE        reduce using rule 51 (operad_arit -> RESTA .)
    SIGNO_DOLAR     reduce using rule 51 (operad_arit -> RESTA .)


state 75

    (52) operad_arit -> MULTIPL .

    ENTERO          reduce using rule 52 (operad_arit -> MULTIPL .)
    FLOTANTE        reduce using rule 52 (operad_arit -> MULTIPL .)
    SIGNO_DOLAR     reduce using rule 52 (operad_arit -> MULTIPL .)


state 76

    (53) operad_arit -> DIVISION .

    ENTERO          reduce using rule 53 (operad_arit -> DIVISION .)
    FLOTANTE        reduce using rule 53 (operad_arit -> DIVISION .)
    SIGNO_DOLAR     reduce using rule 53 (operad_arit -> DIVISION .)


state 77

    (54) operad_arit -> DIVISION_ENT .

    ENTERO          reduce using rule 54 (operad_arit -> DIVISION_ENT .)
    FLOTANTE        reduce using rule 54 (operad_arit -> DIVISION_ENT .)
    SIGNO_DOLAR     reduce using rule 54 (operad_arit -> DIVISION_ENT .)


state 78

    (55) operad_arit -> POTENCIA .

    ENTERO          reduce using rule 55 (operad_arit -> POTENCIA .)
    FLOTANTE        reduce using rule 55 (operad_arit -> POTENCIA .)
    SIGNO_DOLAR     reduce using rule 55 (operad_arit -> POTENCIA .)


state 79

    (56) operad_arit -> MODULO .

    ENTERO          reduce using rule 56 (operad_arit -> MODULO .)
    FLOTANTE        reduce using rule 56 (operad_arit -> MODULO .)
    SIGNO_DOLAR     reduce using rule 56 (operad_arit -> MODULO .)


state 80

    (16) decl_variable -> SIGNO_DOLAR VARIABLE .
    (131) paraCalculos -> SIGNO_DOLAR VARIABLE .

    IGUAL           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_CONCA      reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ASIG_OBJ        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SUMA            reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RESTA           reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MULTIPL         reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION_ENT    reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    POTENCIA        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MODULO          reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)


state 81

    (82) if_else -> if_else_inicio if_else_fin .

    LLAVE_DER       reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    ECHO            reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    PRINT           reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    PRINT_R         reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    VARIABLE        reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    ENTERO          reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    FLOTANTE        reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    STRING          reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    BOOLEANO        reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    NEW             reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    ARRAY           reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    SIGNO_DOLAR     reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    FOR             reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    WHILE           reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    FUNCTION        reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    MENOR_IGUAL     reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    MAYOR_IGUAL     reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    IF              reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    $end            reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)
    RETURN          reduce using rule 82 (if_else -> if_else_inicio if_else_fin .)


state 82

    (83) if_else -> if_else_inicio if_else_cuerpo . if_else_fin
    (87) if_else_fin -> . ELSE LLAVE_IZQ bloque LLAVE_DER

    ELSE            shift and go to state 83

    if_else_fin                    shift and go to state 124

state 83

    (87) if_else_fin -> ELSE . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 125


state 84

    (85) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF . PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_IZQ       shift and go to state 126


state 85

    (70) for -> FOR PAREN_IZQ . asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 61

    asignacion                     shift and go to state 127
    decl_variable                  shift and go to state 128

state 86

    (111) whileDeclaracion -> WHILE PAREN_IZQ . decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 61

    decl_variable                  shift and go to state 129

state 87

    (101) funcion_variable -> FUNCTION VARIABLE . PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (126) functConPar -> FUNCTION VARIABLE . PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_IZQ       shift and go to state 130


state 88

    (75) menor -> MENOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 131


state 89

    (76) mayor -> MAYOR_IGUAL ENTERO . PUNTO_COMA

    PUNTO_COMA      shift and go to state 132


state 90

    (84) if_else_inicio -> IF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (88) op_logica -> . ENTERO operad_log ENTERO
    (89) op_logica -> . FLOTANTE operad_log FLOTANTE
    (90) op_logica -> . STRING operad_log STRING
    (91) op_logica -> . BOOLEANO
    (92) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (93) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (94) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 134
    FLOTANTE        shift and go to state 135
    STRING          shift and go to state 136
    BOOLEANO        shift and go to state 137
    SIGNO_DOLAR     shift and go to state 138

    op_logica                      shift and go to state 133

state 91

    (119) arreglo -> decl_variable . IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    IGUAL           shift and go to state 139


state 92

    (17) asignacion -> decl_variable IGUAL valor . PUNTO_COMA

    PUNTO_COMA      shift and go to state 140


state 93

    (128) asignacionFunc -> decl_variable IGUAL llamadaFuncion .

    LLAVE_DER       reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    ECHO            reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    PRINT           reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    PRINT_R         reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    VARIABLE        reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    ENTERO          reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    FLOTANTE        reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    STRING          reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    BOOLEANO        reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    NEW             reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    ARRAY           reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    SIGNO_DOLAR     reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    FOR             reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    WHILE           reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    FUNCTION        reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    MENOR_IGUAL     reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    MAYOR_IGUAL     reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    IF              reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    $end            reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)
    RETURN          reduce using rule 128 (asignacionFunc -> decl_variable IGUAL llamadaFuncion .)


state 94

    (119) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (115) arreglo -> ARRAY . PAREN_IZQ valores PAREN_DER

    PAREN_IZQ       shift and go to state 141


state 95

    (18) valor -> datos .

    PUNTO_COMA      reduce using rule 18 (valor -> datos .)
    PAREN_DER       reduce using rule 18 (valor -> datos .)


state 96

    (19) valor -> pila .

    PUNTO_COMA      reduce using rule 19 (valor -> pila .)
    PAREN_DER       reduce using rule 19 (valor -> pila .)


state 97

    (20) valor -> cola .

    PUNTO_COMA      reduce using rule 20 (valor -> cola .)
    PAREN_DER       reduce using rule 20 (valor -> cola .)


state 98

    (21) valor -> arreglo .

    PUNTO_COMA      reduce using rule 21 (valor -> arreglo .)
    PAREN_DER       reduce using rule 21 (valor -> arreglo .)


state 99

    (25) datos -> STRING .

    PUNTO_COMA      reduce using rule 25 (datos -> STRING .)
    PAREN_DER       reduce using rule 25 (datos -> STRING .)
    COMA            reduce using rule 25 (datos -> STRING .)
    FLECHA          reduce using rule 25 (datos -> STRING .)


state 100

    (103) concatenacion -> decl_variable ASIG_CONCA datos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 142


state 101

    (96) op_pila -> decl_variable ASIG_OBJ operad_pila .

    LLAVE_DER       reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ECHO            reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT           reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    PRINT_R         reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    VARIABLE        reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ENTERO          reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FLOTANTE        reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    STRING          reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    BOOLEANO        reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    NEW             reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    ARRAY           reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    SIGNO_DOLAR     reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FOR             reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    WHILE           reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    FUNCTION        reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MENOR_IGUAL     reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    MAYOR_IGUAL     reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    IF              reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    $end            reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)
    RETURN          reduce using rule 96 (op_pila -> decl_variable ASIG_OBJ operad_pila .)


state 102

    (97) operad_pila -> PUSH . PAREN_IZQ datos PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 143


state 103

    (98) operad_pila -> POP . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 144


state 104

    (99) operad_pila -> COUNT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 145


state 105

    (100) operad_pila -> CURRENT . PAREN_IZQ PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 146


state 106

    (32) salida -> ECHO salidas_pos PUNTO_COMA .

    LLAVE_DER       reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    IF              reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    $end            reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 32 (salida -> ECHO salidas_pos PUNTO_COMA .)


state 107

    (16) decl_variable -> SIGNO_DOLAR VARIABLE .

    PUNTO_COMA      reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IGUAL           reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    IDENTICO        reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    DIFERENTE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MAYOR_QUE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)
    MENOR_QUE       reduce using rule 16 (decl_variable -> SIGNO_DOLAR VARIABLE .)


state 108

    (33) salida -> PRINT PAREN_IZQ salidas_pos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 147


state 109

    (34) salida -> PRINT salidas_pos PUNTO_COMA .

    LLAVE_DER       reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ECHO            reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    VARIABLE        reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    ARRAY           reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    FUNCTION        reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    IF              reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    $end            reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 34 (salida -> PRINT salidas_pos PUNTO_COMA .)


state 110

    (105) salida -> PRINT_R PAREN_IZQ valor . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 148


state 111

    (127) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 149


state 112

    (122) parametrosR -> parametros .
    (123) parametrosR -> parametros . repite_parametros
    (124) repite_parametros -> . COMA parametros
    (125) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 122 (parametrosR -> parametros .)
    COMA            shift and go to state 151

    repite_parametros              shift and go to state 150

state 113

    (120) parametros -> datos .

    COMA            reduce using rule 120 (parametros -> datos .)
    PAREN_DER       reduce using rule 120 (parametros -> datos .)


state 114

    (121) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 152


state 115

    (104) conca_string -> STRING PUNTO STRING .

    ENTERO          reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    FLOTANTE        reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    STRING          reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    BOOLEANO        reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    SIGNO_DOLAR     reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    LLAVE_DER       reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    ECHO            reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    PRINT           reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    PRINT_R         reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    VARIABLE        reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    NEW             reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    ARRAY           reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    FOR             reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    WHILE           reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    FUNCTION        reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    MENOR_IGUAL     reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    MAYOR_IGUAL     reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    IF              reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    $end            reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    PUNTO_COMA      reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    RETURN          reduce using rule 104 (conca_string -> STRING PUNTO STRING .)
    PAREN_DER       reduce using rule 104 (conca_string -> STRING PUNTO STRING .)


state 116

    (95) pila -> NEW STACK PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 153


state 117

    (69) cola -> NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 154


state 118

    (115) arreglo -> ARRAY PAREN_IZQ valores . PAREN_DER

    PAREN_DER       shift and go to state 155


state 119

    (112) valores -> datos . repite_valores
    (113) repite_valores -> . COMA datos
    (114) repite_valores -> . COMA datos repite_valores

    COMA            shift and go to state 157

    repite_valores                 shift and go to state 156

state 120

    (132) combinarOp -> operad_arit paraCalculos .
    (133) combinarOp -> operad_arit paraCalculos . combinarOp
    (132) combinarOp -> . operad_arit paraCalculos
    (133) combinarOp -> . operad_arit paraCalculos combinarOp
    (50) operad_arit -> . SUMA
    (51) operad_arit -> . RESTA
    (52) operad_arit -> . MULTIPL
    (53) operad_arit -> . DIVISION
    (54) operad_arit -> . DIVISION_ENT
    (55) operad_arit -> . POTENCIA
    (56) operad_arit -> . MODULO

    LLAVE_DER       reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    ECHO            reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    PRINT           reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    PRINT_R         reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    VARIABLE        reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    ENTERO          reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    FLOTANTE        reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    STRING          reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    BOOLEANO        reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    NEW             reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    ARRAY           reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    SIGNO_DOLAR     reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    FOR             reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    WHILE           reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    FUNCTION        reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    MENOR_IGUAL     reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    MAYOR_IGUAL     reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    IF              reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    $end            reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    PUNTO_COMA      reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    PAREN_DER       reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    RETURN          reduce using rule 132 (combinarOp -> operad_arit paraCalculos .)
    SUMA            shift and go to state 73
    RESTA           shift and go to state 74
    MULTIPL         shift and go to state 75
    DIVISION        shift and go to state 76
    DIVISION_ENT    shift and go to state 77
    POTENCIA        shift and go to state 78
    MODULO          shift and go to state 79

    operad_arit                    shift and go to state 72
    combinarOp                     shift and go to state 158

state 121

    (129) paraCalculos -> ENTERO .

    SUMA            reduce using rule 129 (paraCalculos -> ENTERO .)
    RESTA           reduce using rule 129 (paraCalculos -> ENTERO .)
    MULTIPL         reduce using rule 129 (paraCalculos -> ENTERO .)
    DIVISION        reduce using rule 129 (paraCalculos -> ENTERO .)
    DIVISION_ENT    reduce using rule 129 (paraCalculos -> ENTERO .)
    POTENCIA        reduce using rule 129 (paraCalculos -> ENTERO .)
    MODULO          reduce using rule 129 (paraCalculos -> ENTERO .)
    LLAVE_DER       reduce using rule 129 (paraCalculos -> ENTERO .)
    ECHO            reduce using rule 129 (paraCalculos -> ENTERO .)
    PRINT           reduce using rule 129 (paraCalculos -> ENTERO .)
    PRINT_R         reduce using rule 129 (paraCalculos -> ENTERO .)
    VARIABLE        reduce using rule 129 (paraCalculos -> ENTERO .)
    ENTERO          reduce using rule 129 (paraCalculos -> ENTERO .)
    FLOTANTE        reduce using rule 129 (paraCalculos -> ENTERO .)
    STRING          reduce using rule 129 (paraCalculos -> ENTERO .)
    BOOLEANO        reduce using rule 129 (paraCalculos -> ENTERO .)
    NEW             reduce using rule 129 (paraCalculos -> ENTERO .)
    ARRAY           reduce using rule 129 (paraCalculos -> ENTERO .)
    SIGNO_DOLAR     reduce using rule 129 (paraCalculos -> ENTERO .)
    FOR             reduce using rule 129 (paraCalculos -> ENTERO .)
    WHILE           reduce using rule 129 (paraCalculos -> ENTERO .)
    FUNCTION        reduce using rule 129 (paraCalculos -> ENTERO .)
    MENOR_IGUAL     reduce using rule 129 (paraCalculos -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 129 (paraCalculos -> ENTERO .)
    IF              reduce using rule 129 (paraCalculos -> ENTERO .)
    $end            reduce using rule 129 (paraCalculos -> ENTERO .)
    PUNTO_COMA      reduce using rule 129 (paraCalculos -> ENTERO .)
    PAREN_DER       reduce using rule 129 (paraCalculos -> ENTERO .)
    RETURN          reduce using rule 129 (paraCalculos -> ENTERO .)


state 122

    (130) paraCalculos -> FLOTANTE .

    SUMA            reduce using rule 130 (paraCalculos -> FLOTANTE .)
    RESTA           reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MULTIPL         reduce using rule 130 (paraCalculos -> FLOTANTE .)
    DIVISION        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    DIVISION_ENT    reduce using rule 130 (paraCalculos -> FLOTANTE .)
    POTENCIA        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MODULO          reduce using rule 130 (paraCalculos -> FLOTANTE .)
    LLAVE_DER       reduce using rule 130 (paraCalculos -> FLOTANTE .)
    ECHO            reduce using rule 130 (paraCalculos -> FLOTANTE .)
    PRINT           reduce using rule 130 (paraCalculos -> FLOTANTE .)
    PRINT_R         reduce using rule 130 (paraCalculos -> FLOTANTE .)
    VARIABLE        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    ENTERO          reduce using rule 130 (paraCalculos -> FLOTANTE .)
    FLOTANTE        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    STRING          reduce using rule 130 (paraCalculos -> FLOTANTE .)
    BOOLEANO        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    NEW             reduce using rule 130 (paraCalculos -> FLOTANTE .)
    ARRAY           reduce using rule 130 (paraCalculos -> FLOTANTE .)
    SIGNO_DOLAR     reduce using rule 130 (paraCalculos -> FLOTANTE .)
    FOR             reduce using rule 130 (paraCalculos -> FLOTANTE .)
    WHILE           reduce using rule 130 (paraCalculos -> FLOTANTE .)
    FUNCTION        reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 130 (paraCalculos -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 130 (paraCalculos -> FLOTANTE .)
    IF              reduce using rule 130 (paraCalculos -> FLOTANTE .)
    $end            reduce using rule 130 (paraCalculos -> FLOTANTE .)
    PUNTO_COMA      reduce using rule 130 (paraCalculos -> FLOTANTE .)
    PAREN_DER       reduce using rule 130 (paraCalculos -> FLOTANTE .)
    RETURN          reduce using rule 130 (paraCalculos -> FLOTANTE .)


state 123

    (131) paraCalculos -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 159


state 124

    (83) if_else -> if_else_inicio if_else_cuerpo if_else_fin .

    LLAVE_DER       reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ECHO            reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT           reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    PRINT_R         reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    VARIABLE        reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ENTERO          reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FLOTANTE        reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    STRING          reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    BOOLEANO        reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    NEW             reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    ARRAY           reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    SIGNO_DOLAR     reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FOR             reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    WHILE           reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    FUNCTION        reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MENOR_IGUAL     reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    MAYOR_IGUAL     reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    IF              reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    $end            reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)
    RETURN          reduce using rule 83 (if_else -> if_else_inicio if_else_cuerpo if_else_fin .)


state 125

    (87) if_else_fin -> ELSE LLAVE_IZQ . bloque LLAVE_DER
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    bloque                         shift and go to state 160
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 126

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ . op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo
    (88) op_logica -> . ENTERO operad_log ENTERO
    (89) op_logica -> . FLOTANTE operad_log FLOTANTE
    (90) op_logica -> . STRING operad_log STRING
    (91) op_logica -> . BOOLEANO
    (92) op_logica -> . SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (93) op_logica -> . SIGNO_DOLAR VARIABLE operad_log ENTERO
    (94) op_logica -> . SIGNO_DOLAR VARIABLE operad_log FLOTANTE

    ENTERO          shift and go to state 134
    FLOTANTE        shift and go to state 135
    STRING          shift and go to state 136
    BOOLEANO        shift and go to state 137
    SIGNO_DOLAR     shift and go to state 138

    op_logica                      shift and go to state 170

state 127

    (70) for -> FOR PAREN_IZQ asignacion . declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (74) declaracionp -> . SIGNO_DOLAR VARIABLE valorc

    SIGNO_DOLAR     shift and go to state 172

    declaracionp                   shift and go to state 171

state 128

    (17) asignacion -> decl_variable . IGUAL valor PUNTO_COMA

    IGUAL           shift and go to state 173


state 129

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable . operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (44) operad_log -> . IDENTICO
    (45) operad_log -> . DIFERENTE
    (46) operad_log -> . MAYOR_QUE
    (47) operad_log -> . MAYOR_IGUAL
    (48) operad_log -> . MENOR_QUE
    (49) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 175
    DIFERENTE       shift and go to state 176
    MAYOR_QUE       shift and go to state 177
    MAYOR_IGUAL     shift and go to state 178
    MENOR_QUE       shift and go to state 179
    MENOR_IGUAL     shift and go to state 180

    operad_log                     shift and go to state 174

state 130

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ . TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ . parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (122) parametrosR -> . parametros
    (123) parametrosR -> . parametros repite_parametros
    (120) parametros -> . datos
    (121) parametros -> . SIGNO_DOLAR VARIABLE
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    TRES_PUNTOS     shift and go to state 181
    SIGNO_DOLAR     shift and go to state 182
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    parametrosR                    shift and go to state 183
    parametros                     shift and go to state 112
    datos                          shift and go to state 113

state 131

    (75) menor -> MENOR_IGUAL ENTERO PUNTO_COMA .

    LLAVE_DER       reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    $end            reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 75 (menor -> MENOR_IGUAL ENTERO PUNTO_COMA .)


state 132

    (76) mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .

    LLAVE_DER       reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ECHO            reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT           reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    PRINT_R         reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    VARIABLE        reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ENTERO          reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FLOTANTE        reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    STRING          reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    BOOLEANO        reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    NEW             reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    ARRAY           reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FOR             reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    WHILE           reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    FUNCTION        reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    IF              reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    $end            reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)
    RETURN          reduce using rule 76 (mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA .)


state 133

    (84) if_else_inicio -> IF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 184


state 134

    (88) op_logica -> ENTERO . operad_log ENTERO
    (44) operad_log -> . IDENTICO
    (45) operad_log -> . DIFERENTE
    (46) operad_log -> . MAYOR_QUE
    (47) operad_log -> . MAYOR_IGUAL
    (48) operad_log -> . MENOR_QUE
    (49) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 175
    DIFERENTE       shift and go to state 176
    MAYOR_QUE       shift and go to state 177
    MAYOR_IGUAL     shift and go to state 178
    MENOR_QUE       shift and go to state 179
    MENOR_IGUAL     shift and go to state 180

    operad_log                     shift and go to state 185

state 135

    (89) op_logica -> FLOTANTE . operad_log FLOTANTE
    (44) operad_log -> . IDENTICO
    (45) operad_log -> . DIFERENTE
    (46) operad_log -> . MAYOR_QUE
    (47) operad_log -> . MAYOR_IGUAL
    (48) operad_log -> . MENOR_QUE
    (49) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 175
    DIFERENTE       shift and go to state 176
    MAYOR_QUE       shift and go to state 177
    MAYOR_IGUAL     shift and go to state 178
    MENOR_QUE       shift and go to state 179
    MENOR_IGUAL     shift and go to state 180

    operad_log                     shift and go to state 186

state 136

    (90) op_logica -> STRING . operad_log STRING
    (44) operad_log -> . IDENTICO
    (45) operad_log -> . DIFERENTE
    (46) operad_log -> . MAYOR_QUE
    (47) operad_log -> . MAYOR_IGUAL
    (48) operad_log -> . MENOR_QUE
    (49) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 175
    DIFERENTE       shift and go to state 176
    MAYOR_QUE       shift and go to state 177
    MAYOR_IGUAL     shift and go to state 178
    MENOR_QUE       shift and go to state 179
    MENOR_IGUAL     shift and go to state 180

    operad_log                     shift and go to state 187

state 137

    (91) op_logica -> BOOLEANO .

    PAREN_DER       reduce using rule 91 (op_logica -> BOOLEANO .)


state 138

    (92) op_logica -> SIGNO_DOLAR . VARIABLE operad_log SIGNO_DOLAR VARIABLE
    (93) op_logica -> SIGNO_DOLAR . VARIABLE operad_log ENTERO
    (94) op_logica -> SIGNO_DOLAR . VARIABLE operad_log FLOTANTE

    VARIABLE        shift and go to state 188


state 139

    (119) arreglo -> decl_variable IGUAL . ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    ARRAY           shift and go to state 189


state 140

    (17) asignacion -> decl_variable IGUAL valor PUNTO_COMA .

    LLAVE_DER       reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ECHO            reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    PRINT_R         reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    VARIABLE        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ENTERO          reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FLOTANTE        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    STRING          reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    BOOLEANO        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    NEW             reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    ARRAY           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FOR             reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    WHILE           reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    FUNCTION        reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    IF              reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    $end            reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)
    RETURN          reduce using rule 17 (asignacion -> decl_variable IGUAL valor PUNTO_COMA .)


state 141

    (119) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (115) arreglo -> ARRAY PAREN_IZQ . valores PAREN_DER
    (116) valoresflecha -> . datos FLECHA datos repite_valores_f
    (112) valores -> . datos repite_valores
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    valoresflecha                  shift and go to state 190
    valores                        shift and go to state 118
    datos                          shift and go to state 191

state 142

    (103) concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .

    LLAVE_DER       reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ECHO            reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT           reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    PRINT_R         reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    VARIABLE        reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ENTERO          reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FLOTANTE        reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    STRING          reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    BOOLEANO        reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    NEW             reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    ARRAY           reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FOR             reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    WHILE           reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    FUNCTION        reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    IF              reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    $end            reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)
    RETURN          reduce using rule 103 (concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA .)


state 143

    (97) operad_pila -> PUSH PAREN_IZQ . datos PAREN_DER PUNTO_COMA
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 192

state 144

    (98) operad_pila -> POP PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 193


state 145

    (99) operad_pila -> COUNT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 194


state 146

    (100) operad_pila -> CURRENT PAREN_IZQ . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 195


state 147

    (33) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 196


state 148

    (105) salida -> PRINT_R PAREN_IZQ valor PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 197


state 149

    (127) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 198


state 150

    (123) parametrosR -> parametros repite_parametros .

    PAREN_DER       reduce using rule 123 (parametrosR -> parametros repite_parametros .)


state 151

    (124) repite_parametros -> COMA . parametros
    (125) repite_parametros -> COMA . parametros repite_parametros
    (120) parametros -> . datos
    (121) parametros -> . SIGNO_DOLAR VARIABLE
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    SIGNO_DOLAR     shift and go to state 114
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    parametros                     shift and go to state 199
    datos                          shift and go to state 113

state 152

    (121) parametros -> SIGNO_DOLAR VARIABLE .

    COMA            reduce using rule 121 (parametros -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 121 (parametros -> SIGNO_DOLAR VARIABLE .)


state 153

    (95) pila -> NEW STACK PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 95 (pila -> NEW STACK PAREN_IZQ PAREN_DER .)


state 154

    (69) cola -> NEW QUEUE PAREN_IZQ PAREN_DER .

    LLAVE_DER       reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ECHO            reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT           reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PRINT_R         reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    VARIABLE        reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ENTERO          reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FLOTANTE        reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    STRING          reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    BOOLEANO        reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    NEW             reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    ARRAY           reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FOR             reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    WHILE           reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    FUNCTION        reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MENOR_IGUAL     reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    IF              reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    $end            reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PUNTO_COMA      reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    PAREN_DER       reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)
    RETURN          reduce using rule 69 (cola -> NEW QUEUE PAREN_IZQ PAREN_DER .)


state 155

    (115) arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .

    LLAVE_DER       reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ECHO            reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT           reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PRINT_R         reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    VARIABLE        reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ENTERO          reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FLOTANTE        reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    STRING          reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    BOOLEANO        reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    NEW             reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    ARRAY           reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    SIGNO_DOLAR     reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FOR             reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    WHILE           reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    FUNCTION        reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MENOR_IGUAL     reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    MAYOR_IGUAL     reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    IF              reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    $end            reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PUNTO_COMA      reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    PAREN_DER       reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)
    RETURN          reduce using rule 115 (arreglo -> ARRAY PAREN_IZQ valores PAREN_DER .)


state 156

    (112) valores -> datos repite_valores .

    PAREN_DER       reduce using rule 112 (valores -> datos repite_valores .)


state 157

    (113) repite_valores -> COMA . datos
    (114) repite_valores -> COMA . datos repite_valores
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 200

state 158

    (133) combinarOp -> operad_arit paraCalculos combinarOp .

    LLAVE_DER       reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ECHO            reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PRINT           reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PRINT_R         reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    VARIABLE        reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ENTERO          reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FLOTANTE        reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    STRING          reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    BOOLEANO        reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    NEW             reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    ARRAY           reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    SIGNO_DOLAR     reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FOR             reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    WHILE           reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    FUNCTION        reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    MENOR_IGUAL     reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    MAYOR_IGUAL     reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    IF              reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    $end            reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PUNTO_COMA      reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    PAREN_DER       reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)
    RETURN          reduce using rule 133 (combinarOp -> operad_arit paraCalculos combinarOp .)


state 159

    (131) paraCalculos -> SIGNO_DOLAR VARIABLE .

    SUMA            reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RESTA           reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MULTIPL         reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    DIVISION_ENT    reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    POTENCIA        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MODULO          reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    LLAVE_DER       reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ECHO            reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PRINT           reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PRINT_R         reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    VARIABLE        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ENTERO          reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FLOTANTE        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    STRING          reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    BOOLEANO        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    NEW             reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    ARRAY           reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    SIGNO_DOLAR     reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FOR             reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    WHILE           reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    FUNCTION        reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MENOR_IGUAL     reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    MAYOR_IGUAL     reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    IF              reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    $end            reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PUNTO_COMA      reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    PAREN_DER       reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)
    RETURN          reduce using rule 131 (paraCalculos -> SIGNO_DOLAR VARIABLE .)


state 160

    (87) if_else_fin -> ELSE LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 201


state 161

    (57) bloque -> asignacion .
    (61) bloque -> asignacion . bloque
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 57 (bloque -> asignacion .)
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    asignacion                     shift and go to state 161
    bloque                         shift and go to state 202
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 162

    (58) bloque -> salida .
    (62) bloque -> salida . bloque
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 58 (bloque -> salida .)
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    salida                         shift and go to state 162
    bloque                         shift and go to state 203
    asignacion                     shift and go to state 161
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 163

    (59) bloque -> retorno .
    (63) bloque -> retorno . bloque
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 59 (bloque -> retorno .)
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    retorno                        shift and go to state 163
    bloque                         shift and go to state 204
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 164

    (60) bloque -> estructuras_control .
    (64) bloque -> estructuras_control . bloque
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 60 (bloque -> estructuras_control .)
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    estructuras_control            shift and go to state 164
    bloque                         shift and go to state 205
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 165

    (65) bloque -> multiples .
    (66) bloque -> multiples . bloque
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       reduce using rule 65 (bloque -> multiples .)
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    multiples                      shift and go to state 165
    bloque                         shift and go to state 206
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 166

    (17) asignacion -> decl_variable . IGUAL valor PUNTO_COMA
    (28) salidas_pos -> decl_variable .

    IGUAL           shift and go to state 173
    ENTERO          reduce using rule 28 (salidas_pos -> decl_variable .)
    FLOTANTE        reduce using rule 28 (salidas_pos -> decl_variable .)
    STRING          reduce using rule 28 (salidas_pos -> decl_variable .)
    BOOLEANO        reduce using rule 28 (salidas_pos -> decl_variable .)
    SIGNO_DOLAR     reduce using rule 28 (salidas_pos -> decl_variable .)
    ECHO            reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT           reduce using rule 28 (salidas_pos -> decl_variable .)
    PRINT_R         reduce using rule 28 (salidas_pos -> decl_variable .)
    RETURN          reduce using rule 28 (salidas_pos -> decl_variable .)
    FOR             reduce using rule 28 (salidas_pos -> decl_variable .)
    WHILE           reduce using rule 28 (salidas_pos -> decl_variable .)
    IF              reduce using rule 28 (salidas_pos -> decl_variable .)
    NEW             reduce using rule 28 (salidas_pos -> decl_variable .)
    LLAVE_DER       reduce using rule 28 (salidas_pos -> decl_variable .)


state 167

    (102) retorno -> RETURN . salidas_pos PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (104) conca_string -> . STRING PUNTO STRING

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    SIGNO_DOLAR     shift and go to state 61

    salidas_pos                    shift and go to state 207
    datos                          shift and go to state 57
    decl_variable                  shift and go to state 58
    conca_string                   shift and go to state 49

state 168

    (71) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 208


state 169

    (69) cola -> NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 69


state 170

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica . PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    PAREN_DER       shift and go to state 209


state 171

    (70) for -> FOR PAREN_IZQ asignacion declaracionp . declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (79) declaracion_s -> . SIGNO_DOLAR VARIABLE crecimiento

    SIGNO_DOLAR     shift and go to state 211

    declaracion_s                  shift and go to state 210

state 172

    (74) declaracionp -> SIGNO_DOLAR . VARIABLE valorc

    VARIABLE        shift and go to state 212


state 173

    (17) asignacion -> decl_variable IGUAL . valor PUNTO_COMA
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42

    decl_variable                  shift and go to state 91
    valor                          shift and go to state 92
    datos                          shift and go to state 95
    pila                           shift and go to state 96
    cola                           shift and go to state 97
    arreglo                        shift and go to state 98
    opAritVar                      shift and go to state 20
    paraCalculos                   shift and go to state 41

state 174

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log . valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE

    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42

    decl_variable                  shift and go to state 91
    valor                          shift and go to state 213
    datos                          shift and go to state 95
    pila                           shift and go to state 96
    cola                           shift and go to state 97
    arreglo                        shift and go to state 98
    opAritVar                      shift and go to state 20
    paraCalculos                   shift and go to state 41

state 175

    (44) operad_log -> IDENTICO .

    ENTERO          reduce using rule 44 (operad_log -> IDENTICO .)
    FLOTANTE        reduce using rule 44 (operad_log -> IDENTICO .)
    STRING          reduce using rule 44 (operad_log -> IDENTICO .)
    BOOLEANO        reduce using rule 44 (operad_log -> IDENTICO .)
    NEW             reduce using rule 44 (operad_log -> IDENTICO .)
    ARRAY           reduce using rule 44 (operad_log -> IDENTICO .)
    SIGNO_DOLAR     reduce using rule 44 (operad_log -> IDENTICO .)


state 176

    (45) operad_log -> DIFERENTE .

    ENTERO          reduce using rule 45 (operad_log -> DIFERENTE .)
    FLOTANTE        reduce using rule 45 (operad_log -> DIFERENTE .)
    STRING          reduce using rule 45 (operad_log -> DIFERENTE .)
    BOOLEANO        reduce using rule 45 (operad_log -> DIFERENTE .)
    NEW             reduce using rule 45 (operad_log -> DIFERENTE .)
    ARRAY           reduce using rule 45 (operad_log -> DIFERENTE .)
    SIGNO_DOLAR     reduce using rule 45 (operad_log -> DIFERENTE .)


state 177

    (46) operad_log -> MAYOR_QUE .

    ENTERO          reduce using rule 46 (operad_log -> MAYOR_QUE .)
    FLOTANTE        reduce using rule 46 (operad_log -> MAYOR_QUE .)
    STRING          reduce using rule 46 (operad_log -> MAYOR_QUE .)
    BOOLEANO        reduce using rule 46 (operad_log -> MAYOR_QUE .)
    NEW             reduce using rule 46 (operad_log -> MAYOR_QUE .)
    ARRAY           reduce using rule 46 (operad_log -> MAYOR_QUE .)
    SIGNO_DOLAR     reduce using rule 46 (operad_log -> MAYOR_QUE .)


state 178

    (47) operad_log -> MAYOR_IGUAL .

    ENTERO          reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    STRING          reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    BOOLEANO        reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    NEW             reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    ARRAY           reduce using rule 47 (operad_log -> MAYOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 47 (operad_log -> MAYOR_IGUAL .)


state 179

    (48) operad_log -> MENOR_QUE .

    ENTERO          reduce using rule 48 (operad_log -> MENOR_QUE .)
    FLOTANTE        reduce using rule 48 (operad_log -> MENOR_QUE .)
    STRING          reduce using rule 48 (operad_log -> MENOR_QUE .)
    BOOLEANO        reduce using rule 48 (operad_log -> MENOR_QUE .)
    NEW             reduce using rule 48 (operad_log -> MENOR_QUE .)
    ARRAY           reduce using rule 48 (operad_log -> MENOR_QUE .)
    SIGNO_DOLAR     reduce using rule 48 (operad_log -> MENOR_QUE .)


state 180

    (49) operad_log -> MENOR_IGUAL .

    ENTERO          reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    STRING          reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    BOOLEANO        reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    NEW             reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    ARRAY           reduce using rule 49 (operad_log -> MENOR_IGUAL .)
    SIGNO_DOLAR     reduce using rule 49 (operad_log -> MENOR_IGUAL .)


state 181

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS . decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE

    SIGNO_DOLAR     shift and go to state 61

    decl_variable                  shift and go to state 214

state 182

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (121) parametros -> SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 215


state 183

    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 216


state 184

    (84) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 217


state 185

    (88) op_logica -> ENTERO operad_log . ENTERO

    ENTERO          shift and go to state 218


state 186

    (89) op_logica -> FLOTANTE operad_log . FLOTANTE

    FLOTANTE        shift and go to state 219


state 187

    (90) op_logica -> STRING operad_log . STRING

    STRING          shift and go to state 220


state 188

    (92) op_logica -> SIGNO_DOLAR VARIABLE . operad_log SIGNO_DOLAR VARIABLE
    (93) op_logica -> SIGNO_DOLAR VARIABLE . operad_log ENTERO
    (94) op_logica -> SIGNO_DOLAR VARIABLE . operad_log FLOTANTE
    (44) operad_log -> . IDENTICO
    (45) operad_log -> . DIFERENTE
    (46) operad_log -> . MAYOR_QUE
    (47) operad_log -> . MAYOR_IGUAL
    (48) operad_log -> . MENOR_QUE
    (49) operad_log -> . MENOR_IGUAL

    IDENTICO        shift and go to state 175
    DIFERENTE       shift and go to state 176
    MAYOR_QUE       shift and go to state 177
    MAYOR_IGUAL     shift and go to state 178
    MENOR_QUE       shift and go to state 179
    MENOR_IGUAL     shift and go to state 180

    operad_log                     shift and go to state 221

state 189

    (119) arreglo -> decl_variable IGUAL ARRAY . PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 222


state 190

    (119) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 223


state 191

    (116) valoresflecha -> datos . FLECHA datos repite_valores_f
    (112) valores -> datos . repite_valores
    (113) repite_valores -> . COMA datos
    (114) repite_valores -> . COMA datos repite_valores

    FLECHA          shift and go to state 224
    COMA            shift and go to state 157

    repite_valores                 shift and go to state 156

state 192

    (97) operad_pila -> PUSH PAREN_IZQ datos . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 225


state 193

    (98) operad_pila -> POP PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 226


state 194

    (99) operad_pila -> COUNT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 227


state 195

    (100) operad_pila -> CURRENT PAREN_IZQ PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 228


state 196

    (33) salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 33 (salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA .)


state 197

    (105) salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 105 (salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA .)


state 198

    (127) llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 127 (llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA .)


state 199

    (124) repite_parametros -> COMA parametros .
    (125) repite_parametros -> COMA parametros . repite_parametros
    (124) repite_parametros -> . COMA parametros
    (125) repite_parametros -> . COMA parametros repite_parametros

    PAREN_DER       reduce using rule 124 (repite_parametros -> COMA parametros .)
    COMA            shift and go to state 151

    repite_parametros              shift and go to state 229

state 200

    (113) repite_valores -> COMA datos .
    (114) repite_valores -> COMA datos . repite_valores
    (113) repite_valores -> . COMA datos
    (114) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 113 (repite_valores -> COMA datos .)
    COMA            shift and go to state 157

    repite_valores                 shift and go to state 230

state 201

    (87) if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .

    LLAVE_DER       reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    $end            reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 87 (if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER .)


state 202

    (61) bloque -> asignacion bloque .

    LLAVE_DER       reduce using rule 61 (bloque -> asignacion bloque .)


state 203

    (62) bloque -> salida bloque .

    LLAVE_DER       reduce using rule 62 (bloque -> salida bloque .)


state 204

    (63) bloque -> retorno bloque .

    LLAVE_DER       reduce using rule 63 (bloque -> retorno bloque .)


state 205

    (64) bloque -> estructuras_control bloque .

    LLAVE_DER       reduce using rule 64 (bloque -> estructuras_control bloque .)


state 206

    (66) bloque -> multiples bloque .

    LLAVE_DER       reduce using rule 66 (bloque -> multiples bloque .)


state 207

    (102) retorno -> RETURN salidas_pos . PUNTO_COMA

    PUNTO_COMA      shift and go to state 231


state 208

    (71) for -> cola LLAVE_DER .

    ECHO            reduce using rule 71 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 71 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 71 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 71 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 71 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 71 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 71 (for -> cola LLAVE_DER .)
    IF              reduce using rule 71 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 71 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 71 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 71 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 71 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 71 (for -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 71 (for -> cola LLAVE_DER .)


state 209

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER . LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    LLAVE_IZQ       shift and go to state 232


state 210

    (70) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 233


state 211

    (79) declaracion_s -> SIGNO_DOLAR . VARIABLE crecimiento

    VARIABLE        shift and go to state 234


state 212

    (74) declaracionp -> SIGNO_DOLAR VARIABLE . valorc
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA

    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48

    valorc                         shift and go to state 235
    menor                          shift and go to state 32
    mayor                          shift and go to state 33

state 213

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor . PAREN_DER LLAVE_IZQ contenido LLAVE_DER

    PAREN_DER       shift and go to state 236


state 214

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable . PAREN_DER LLAVE_IZQ bloque LLAVE_DER

    PAREN_DER       shift and go to state 237


state 215

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (121) parametros -> SIGNO_DOLAR VARIABLE .

  ! shift/reduce conflict for PAREN_DER resolved as shift
    PAREN_DER       shift and go to state 238
    COMA            reduce using rule 121 (parametros -> SIGNO_DOLAR VARIABLE .)

  ! PAREN_DER       [ reduce using rule 121 (parametros -> SIGNO_DOLAR VARIABLE .) ]


state 216

    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 239


state 217

    (84) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    bloque                         shift and go to state 240
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 218

    (88) op_logica -> ENTERO operad_log ENTERO .

    PAREN_DER       reduce using rule 88 (op_logica -> ENTERO operad_log ENTERO .)


state 219

    (89) op_logica -> FLOTANTE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 89 (op_logica -> FLOTANTE operad_log FLOTANTE .)


state 220

    (90) op_logica -> STRING operad_log STRING .

    PAREN_DER       reduce using rule 90 (op_logica -> STRING operad_log STRING .)


state 221

    (92) op_logica -> SIGNO_DOLAR VARIABLE operad_log . SIGNO_DOLAR VARIABLE
    (93) op_logica -> SIGNO_DOLAR VARIABLE operad_log . ENTERO
    (94) op_logica -> SIGNO_DOLAR VARIABLE operad_log . FLOTANTE

    SIGNO_DOLAR     shift and go to state 241
    ENTERO          shift and go to state 242
    FLOTANTE        shift and go to state 243


state 222

    (119) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ . valoresflecha PAREN_DER PUNTO_COMA
    (116) valoresflecha -> . datos FLECHA datos repite_valores_f
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    valoresflecha                  shift and go to state 190
    datos                          shift and go to state 244

state 223

    (119) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 245


state 224

    (116) valoresflecha -> datos FLECHA . datos repite_valores_f
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 246

state 225

    (97) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 247


state 226

    (98) operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 98 (operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 227

    (99) operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 99 (operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 228

    (100) operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 100 (operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA .)


state 229

    (125) repite_parametros -> COMA parametros repite_parametros .

    PAREN_DER       reduce using rule 125 (repite_parametros -> COMA parametros repite_parametros .)


state 230

    (114) repite_valores -> COMA datos repite_valores .

    PAREN_DER       reduce using rule 114 (repite_valores -> COMA datos repite_valores .)


state 231

    (102) retorno -> RETURN salidas_pos PUNTO_COMA .

    ECHO            reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT           reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    PRINT_R         reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    RETURN          reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FOR             reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    WHILE           reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    IF              reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    NEW             reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    ENTERO          reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    FLOTANTE        reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    STRING          reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    BOOLEANO        reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)
    LLAVE_DER       reduce using rule 102 (retorno -> RETURN salidas_pos PUNTO_COMA .)


state 232

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ . bloque LLAVE_DER if_else_cuerpo
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    bloque                         shift and go to state 248
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 233

    (70) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 249


state 234

    (79) declaracion_s -> SIGNO_DOLAR VARIABLE . crecimiento
    (80) crecimiento -> . INCREMENTO
    (81) crecimiento -> . DECREMENTO

    INCREMENTO      shift and go to state 251
    DECREMENTO      shift and go to state 252

    crecimiento                    shift and go to state 250

state 235

    (74) declaracionp -> SIGNO_DOLAR VARIABLE valorc .

    SIGNO_DOLAR     reduce using rule 74 (declaracionp -> SIGNO_DOLAR VARIABLE valorc .)


state 236

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER . LLAVE_IZQ contenido LLAVE_DER

    LLAVE_IZQ       shift and go to state 253


state 237

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER . LLAVE_IZQ bloque LLAVE_DER

    LLAVE_IZQ       shift and go to state 254


state 238

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER . LLAVE_IZQ sentenciasAnidadas

    LLAVE_IZQ       shift and go to state 255


state 239

    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    bloque                         shift and go to state 256
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    decl_variable                  shift and go to state 166
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 240

    (84) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 257


state 241

    (92) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR . VARIABLE

    VARIABLE        shift and go to state 258


state 242

    (93) op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .

    PAREN_DER       reduce using rule 93 (op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO .)


state 243

    (94) op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .

    PAREN_DER       reduce using rule 94 (op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE .)


state 244

    (116) valoresflecha -> datos . FLECHA datos repite_valores_f

    FLECHA          shift and go to state 224


state 245

    (119) arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PUNTO_COMA      reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    PAREN_DER       reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 119 (arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA .)


state 246

    (116) valoresflecha -> datos FLECHA datos . repite_valores_f
    (117) repite_valores_f -> . COMA datos FLECHA datos
    (118) repite_valores_f -> . COMA datos FLECHA datos repite_valores

    COMA            shift and go to state 260

    repite_valores_f               shift and go to state 259

state 247

    (97) operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .

    LLAVE_DER       reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ECHO            reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT           reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    PRINT_R         reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    VARIABLE        reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ENTERO          reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FLOTANTE        reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    STRING          reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    BOOLEANO        reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    NEW             reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    ARRAY           reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    SIGNO_DOLAR     reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FOR             reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    WHILE           reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    FUNCTION        reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MENOR_IGUAL     reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    MAYOR_IGUAL     reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    IF              reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)
    RETURN          reduce using rule 97 (operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA .)


state 248

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque . LLAVE_DER if_else_cuerpo

    LLAVE_DER       shift and go to state 261


state 249

    (70) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (72) sentenciasAnidadas -> . instrucciones
    (73) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (3) instrucciones -> . valor
    (4) instrucciones -> . asignacion
    (5) instrucciones -> . concatenacion
    (6) instrucciones -> . salida
    (7) instrucciones -> . estructuras_control
    (8) instrucciones -> . estructuras_datos
    (9) instrucciones -> . funciones
    (10) instrucciones -> . op_pila
    (11) instrucciones -> . valorc
    (12) instrucciones -> . multiples
    (13) instrucciones -> . LLAVE_DER
    (14) instrucciones -> . llamadaFuncion
    (15) instrucciones -> . asignacionFunc
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (103) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (38) estructuras_datos -> . pila
    (39) estructuras_datos -> . cola
    (40) estructuras_datos -> . arreglo
    (41) funciones -> . funcion_variable
    (42) funciones -> . sinRetorno
    (43) funciones -> . functConPar
    (96) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (128) asignacionFunc -> . decl_variable IGUAL llamadaFuncion
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (101) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (126) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 13
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    FUNCTION        shift and go to state 46
    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48
    IF              shift and go to state 50

    asignacion                     shift and go to state 4
    sentenciasAnidadas             shift and go to state 262
    instrucciones                  shift and go to state 263
    valor                          shift and go to state 3
    concatenacion                  shift and go to state 5
    salida                         shift and go to state 6
    estructuras_control            shift and go to state 7
    estructuras_datos              shift and go to state 8
    funciones                      shift and go to state 9
    op_pila                        shift and go to state 10
    valorc                         shift and go to state 11
    multiples                      shift and go to state 12
    llamadaFuncion                 shift and go to state 14
    asignacionFunc                 shift and go to state 15
    datos                          shift and go to state 16
    pila                           shift and go to state 17
    cola                           shift and go to state 18
    arreglo                        shift and go to state 19
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 21
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    funcion_variable               shift and go to state 29
    sinRetorno                     shift and go to state 30
    functConPar                    shift and go to state 31
    menor                          shift and go to state 32
    mayor                          shift and go to state 33
    paraCalculos                   shift and go to state 41
    if_else_inicio                 shift and go to state 43
    conca_string                   shift and go to state 49

state 250

    (79) declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .

    PAREN_DER       reduce using rule 79 (declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento .)


state 251

    (80) crecimiento -> INCREMENTO .

    PAREN_DER       reduce using rule 80 (crecimiento -> INCREMENTO .)


state 252

    (81) crecimiento -> DECREMENTO .

    PAREN_DER       reduce using rule 81 (crecimiento -> DECREMENTO .)


state 253

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ . contenido LLAVE_DER
    (109) contenido -> . bloque
    (110) contenido -> . sinRetorno
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    FUNCTION        shift and go to state 267
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    NEW             shift and go to state 169
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    decl_variable                  shift and go to state 166
    contenido                      shift and go to state 264
    bloque                         shift and go to state 265
    sinRetorno                     shift and go to state 266
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    cola                           shift and go to state 268
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 254

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ . bloque LLAVE_DER
    (57) bloque -> . asignacion
    (58) bloque -> . salida
    (59) bloque -> . retorno
    (60) bloque -> . estructuras_control
    (61) bloque -> . asignacion bloque
    (62) bloque -> . salida bloque
    (63) bloque -> . retorno bloque
    (64) bloque -> . estructuras_control bloque
    (65) bloque -> . multiples
    (66) bloque -> . multiples bloque
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (102) retorno -> . RETURN salidas_pos PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (104) conca_string -> . STRING PUNTO STRING

    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    RETURN          shift and go to state 167
    SIGNO_DOLAR     shift and go to state 61
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    IF              shift and go to state 50
    NEW             shift and go to state 169
    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38

    decl_variable                  shift and go to state 166
    bloque                         shift and go to state 269
    asignacion                     shift and go to state 161
    salida                         shift and go to state 162
    retorno                        shift and go to state 163
    estructuras_control            shift and go to state 164
    multiples                      shift and go to state 165
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    if_else_inicio                 shift and go to state 43
    cola                           shift and go to state 168
    datos                          shift and go to state 57
    conca_string                   shift and go to state 49

state 255

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ . sentenciasAnidadas
    (72) sentenciasAnidadas -> . instrucciones
    (73) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (3) instrucciones -> . valor
    (4) instrucciones -> . asignacion
    (5) instrucciones -> . concatenacion
    (6) instrucciones -> . salida
    (7) instrucciones -> . estructuras_control
    (8) instrucciones -> . estructuras_datos
    (9) instrucciones -> . funciones
    (10) instrucciones -> . op_pila
    (11) instrucciones -> . valorc
    (12) instrucciones -> . multiples
    (13) instrucciones -> . LLAVE_DER
    (14) instrucciones -> . llamadaFuncion
    (15) instrucciones -> . asignacionFunc
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (103) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (38) estructuras_datos -> . pila
    (39) estructuras_datos -> . cola
    (40) estructuras_datos -> . arreglo
    (41) funciones -> . funcion_variable
    (42) funciones -> . sinRetorno
    (43) funciones -> . functConPar
    (96) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (128) asignacionFunc -> . decl_variable IGUAL llamadaFuncion
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (101) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (126) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (104) conca_string -> . STRING PUNTO STRING

    LLAVE_DER       shift and go to state 13
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    FUNCTION        shift and go to state 46
    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48
    IF              shift and go to state 50

    sentenciasAnidadas             shift and go to state 270
    instrucciones                  shift and go to state 263
    valor                          shift and go to state 3
    asignacion                     shift and go to state 4
    concatenacion                  shift and go to state 5
    salida                         shift and go to state 6
    estructuras_control            shift and go to state 7
    estructuras_datos              shift and go to state 8
    funciones                      shift and go to state 9
    op_pila                        shift and go to state 10
    valorc                         shift and go to state 11
    multiples                      shift and go to state 12
    llamadaFuncion                 shift and go to state 14
    asignacionFunc                 shift and go to state 15
    datos                          shift and go to state 16
    pila                           shift and go to state 17
    cola                           shift and go to state 18
    arreglo                        shift and go to state 19
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 21
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    funcion_variable               shift and go to state 29
    sinRetorno                     shift and go to state 30
    functConPar                    shift and go to state 31
    menor                          shift and go to state 32
    mayor                          shift and go to state 33
    paraCalculos                   shift and go to state 41
    if_else_inicio                 shift and go to state 43
    conca_string                   shift and go to state 49

state 256

    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 271


state 257

    (84) if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    ELSE            reduce using rule 84 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          reduce using rule 84 (if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 258

    (92) op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .

    PAREN_DER       reduce using rule 92 (op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE .)


state 259

    (116) valoresflecha -> datos FLECHA datos repite_valores_f .

    PAREN_DER       reduce using rule 116 (valoresflecha -> datos FLECHA datos repite_valores_f .)


state 260

    (117) repite_valores_f -> COMA . datos FLECHA datos
    (118) repite_valores_f -> COMA . datos FLECHA datos repite_valores
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 272

state 261

    (85) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .
    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER . if_else_cuerpo
    (85) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (86) if_else_cuerpo -> . ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo

    ELSE            reduce using rule 85 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ELSEIF          shift and go to state 84

    if_else_cuerpo                 shift and go to state 273

state 262

    (70) for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    LLAVE_DER       reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    $end            reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 70 (for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 263

    (72) sentenciasAnidadas -> instrucciones .
    (73) sentenciasAnidadas -> instrucciones . sentenciasAnidadas
    (72) sentenciasAnidadas -> . instrucciones
    (73) sentenciasAnidadas -> . instrucciones sentenciasAnidadas
    (3) instrucciones -> . valor
    (4) instrucciones -> . asignacion
    (5) instrucciones -> . concatenacion
    (6) instrucciones -> . salida
    (7) instrucciones -> . estructuras_control
    (8) instrucciones -> . estructuras_datos
    (9) instrucciones -> . funciones
    (10) instrucciones -> . op_pila
    (11) instrucciones -> . valorc
    (12) instrucciones -> . multiples
    (13) instrucciones -> . LLAVE_DER
    (14) instrucciones -> . llamadaFuncion
    (15) instrucciones -> . asignacionFunc
    (18) valor -> . datos
    (19) valor -> . pila
    (20) valor -> . cola
    (21) valor -> . arreglo
    (22) valor -> . opAritVar
    (17) asignacion -> . decl_variable IGUAL valor PUNTO_COMA
    (103) concatenacion -> . decl_variable ASIG_CONCA datos PUNTO_COMA
    (32) salida -> . ECHO salidas_pos PUNTO_COMA
    (33) salida -> . PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA
    (34) salida -> . PRINT salidas_pos PUNTO_COMA
    (105) salida -> . PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA
    (35) estructuras_control -> . if_else
    (36) estructuras_control -> . for
    (37) estructuras_control -> . whileDeclaracion
    (38) estructuras_datos -> . pila
    (39) estructuras_datos -> . cola
    (40) estructuras_datos -> . arreglo
    (41) funciones -> . funcion_variable
    (42) funciones -> . sinRetorno
    (43) funciones -> . functConPar
    (96) op_pila -> . decl_variable ASIG_OBJ operad_pila
    (77) valorc -> . menor
    (78) valorc -> . mayor
    (30) multiples -> . salidas_pos
    (31) multiples -> . salidas_pos multiples
    (127) llamadaFuncion -> . VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA
    (128) asignacionFunc -> . decl_variable IGUAL llamadaFuncion
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO
    (95) pila -> . NEW STACK PAREN_IZQ PAREN_DER
    (69) cola -> . NEW QUEUE PAREN_IZQ PAREN_DER
    (115) arreglo -> . ARRAY PAREN_IZQ valores PAREN_DER
    (119) arreglo -> . decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA
    (134) opAritVar -> . paraCalculos combinarOp
    (16) decl_variable -> . SIGNO_DOLAR VARIABLE
    (82) if_else -> . if_else_inicio if_else_fin
    (83) if_else -> . if_else_inicio if_else_cuerpo if_else_fin
    (70) for -> . FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (71) for -> . cola LLAVE_DER
    (111) whileDeclaracion -> . WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER
    (101) funcion_variable -> . FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (67) sinRetorno -> . FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas
    (68) sinRetorno -> . cola LLAVE_DER
    (126) functConPar -> . FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (75) menor -> . MENOR_IGUAL ENTERO PUNTO_COMA
    (76) mayor -> . MAYOR_IGUAL ENTERO PUNTO_COMA
    (27) salidas_pos -> . datos
    (28) salidas_pos -> . decl_variable
    (29) salidas_pos -> . conca_string
    (129) paraCalculos -> . ENTERO
    (130) paraCalculos -> . FLOTANTE
    (131) paraCalculos -> . SIGNO_DOLAR VARIABLE
    (84) if_else_inicio -> . IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER
    (104) conca_string -> . STRING PUNTO STRING

  ! shift/reduce conflict for LLAVE_DER resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINT_R resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEANO resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SIGNO_DOLAR resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MENOR_IGUAL resolved as shift
  ! shift/reduce conflict for MAYOR_IGUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 72 (sentenciasAnidadas -> instrucciones .)
    RETURN          reduce using rule 72 (sentenciasAnidadas -> instrucciones .)
    LLAVE_DER       shift and go to state 13
    ECHO            shift and go to state 22
    PRINT           shift and go to state 24
    PRINT_R         shift and go to state 25
    VARIABLE        shift and go to state 34
    ENTERO          shift and go to state 35
    FLOTANTE        shift and go to state 36
    STRING          shift and go to state 37
    BOOLEANO        shift and go to state 38
    NEW             shift and go to state 39
    ARRAY           shift and go to state 40
    SIGNO_DOLAR     shift and go to state 42
    FOR             shift and go to state 44
    WHILE           shift and go to state 45
    FUNCTION        shift and go to state 46
    MENOR_IGUAL     shift and go to state 47
    MAYOR_IGUAL     shift and go to state 48
    IF              shift and go to state 50

  ! LLAVE_DER       [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! ECHO            [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT           [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! PRINT_R         [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! VARIABLE        [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! ENTERO          [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! FLOTANTE        [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! STRING          [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! BOOLEANO        [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! NEW             [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! ARRAY           [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! SIGNO_DOLAR     [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! FOR             [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! WHILE           [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! FUNCTION        [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! MENOR_IGUAL     [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! MAYOR_IGUAL     [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]
  ! IF              [ reduce using rule 72 (sentenciasAnidadas -> instrucciones .) ]

    instrucciones                  shift and go to state 263
    sentenciasAnidadas             shift and go to state 274
    valor                          shift and go to state 3
    asignacion                     shift and go to state 4
    concatenacion                  shift and go to state 5
    salida                         shift and go to state 6
    estructuras_control            shift and go to state 7
    estructuras_datos              shift and go to state 8
    funciones                      shift and go to state 9
    op_pila                        shift and go to state 10
    valorc                         shift and go to state 11
    multiples                      shift and go to state 12
    llamadaFuncion                 shift and go to state 14
    asignacionFunc                 shift and go to state 15
    datos                          shift and go to state 16
    pila                           shift and go to state 17
    cola                           shift and go to state 18
    arreglo                        shift and go to state 19
    opAritVar                      shift and go to state 20
    decl_variable                  shift and go to state 21
    salidas_pos                    shift and go to state 23
    if_else                        shift and go to state 26
    for                            shift and go to state 27
    whileDeclaracion               shift and go to state 28
    funcion_variable               shift and go to state 29
    sinRetorno                     shift and go to state 30
    functConPar                    shift and go to state 31
    menor                          shift and go to state 32
    mayor                          shift and go to state 33
    paraCalculos                   shift and go to state 41
    if_else_inicio                 shift and go to state 43
    conca_string                   shift and go to state 49

state 264

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido . LLAVE_DER

    LLAVE_DER       shift and go to state 275


state 265

    (109) contenido -> bloque .

    LLAVE_DER       reduce using rule 109 (contenido -> bloque .)


state 266

    (110) contenido -> sinRetorno .

    LLAVE_DER       reduce using rule 110 (contenido -> sinRetorno .)


state 267

    (67) sinRetorno -> FUNCTION . VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 276


state 268

    (68) sinRetorno -> cola . LLAVE_DER
    (71) for -> cola . LLAVE_DER

    LLAVE_DER       shift and go to state 277


state 269

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque . LLAVE_DER

    LLAVE_DER       shift and go to state 278


state 270

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .

    LLAVE_DER       reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ECHO            reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT           reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    PRINT_R         reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    VARIABLE        reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ENTERO          reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FLOTANTE        reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    STRING          reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    BOOLEANO        reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    NEW             reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    ARRAY           reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FOR             reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    WHILE           reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    FUNCTION        reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    IF              reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    $end            reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)
    RETURN          reduce using rule 67 (sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas .)


state 271

    (126) functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    LLAVE_DER       reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    $end            reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 126 (functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 272

    (117) repite_valores_f -> COMA datos . FLECHA datos
    (118) repite_valores_f -> COMA datos . FLECHA datos repite_valores

    FLECHA          shift and go to state 279


state 273

    (86) if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .

    ELSE            reduce using rule 86 (if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo .)


state 274

    (73) sentenciasAnidadas -> instrucciones sentenciasAnidadas .

    LLAVE_DER       reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ECHO            reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT           reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    PRINT_R         reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    VARIABLE        reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ENTERO          reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FLOTANTE        reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    STRING          reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    BOOLEANO        reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    NEW             reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    ARRAY           reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    SIGNO_DOLAR     reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FOR             reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    WHILE           reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    FUNCTION        reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MENOR_IGUAL     reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    MAYOR_IGUAL     reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    IF              reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    $end            reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)
    RETURN          reduce using rule 73 (sentenciasAnidadas -> instrucciones sentenciasAnidadas .)


state 275

    (111) whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .

    LLAVE_DER       reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ECHO            reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT           reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    PRINT_R         reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    VARIABLE        reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ENTERO          reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FLOTANTE        reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    STRING          reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    BOOLEANO        reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    NEW             reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    ARRAY           reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FOR             reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    WHILE           reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    FUNCTION        reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    IF              reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    $end            reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)
    RETURN          reduce using rule 111 (whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER .)


state 276

    (67) sinRetorno -> FUNCTION VARIABLE . PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_IZQ       shift and go to state 280


state 277

    (68) sinRetorno -> cola LLAVE_DER .
    (71) for -> cola LLAVE_DER .

  ! reduce/reduce conflict for LLAVE_DER resolved using rule 68 (sinRetorno -> cola LLAVE_DER .)
    LLAVE_DER       reduce using rule 68 (sinRetorno -> cola LLAVE_DER .)
    ECHO            reduce using rule 71 (for -> cola LLAVE_DER .)
    PRINT           reduce using rule 71 (for -> cola LLAVE_DER .)
    PRINT_R         reduce using rule 71 (for -> cola LLAVE_DER .)
    RETURN          reduce using rule 71 (for -> cola LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 71 (for -> cola LLAVE_DER .)
    FOR             reduce using rule 71 (for -> cola LLAVE_DER .)
    WHILE           reduce using rule 71 (for -> cola LLAVE_DER .)
    IF              reduce using rule 71 (for -> cola LLAVE_DER .)
    NEW             reduce using rule 71 (for -> cola LLAVE_DER .)
    ENTERO          reduce using rule 71 (for -> cola LLAVE_DER .)
    FLOTANTE        reduce using rule 71 (for -> cola LLAVE_DER .)
    STRING          reduce using rule 71 (for -> cola LLAVE_DER .)
    BOOLEANO        reduce using rule 71 (for -> cola LLAVE_DER .)

  ! LLAVE_DER       [ reduce using rule 71 (for -> cola LLAVE_DER .) ]


state 278

    (101) funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .

    LLAVE_DER       reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ECHO            reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT           reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    PRINT_R         reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    VARIABLE        reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ENTERO          reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FLOTANTE        reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    STRING          reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    BOOLEANO        reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    NEW             reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    ARRAY           reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    SIGNO_DOLAR     reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FOR             reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    WHILE           reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    FUNCTION        reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MENOR_IGUAL     reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    MAYOR_IGUAL     reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    IF              reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    $end            reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)
    RETURN          reduce using rule 101 (funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER .)


state 279

    (117) repite_valores_f -> COMA datos FLECHA . datos
    (118) repite_valores_f -> COMA datos FLECHA . datos repite_valores
    (23) datos -> . ENTERO
    (24) datos -> . FLOTANTE
    (25) datos -> . STRING
    (26) datos -> . BOOLEANO

    ENTERO          shift and go to state 59
    FLOTANTE        shift and go to state 60
    STRING          shift and go to state 99
    BOOLEANO        shift and go to state 38

    datos                          shift and go to state 281

state 280

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ . SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    SIGNO_DOLAR     shift and go to state 282


state 281

    (117) repite_valores_f -> COMA datos FLECHA datos .
    (118) repite_valores_f -> COMA datos FLECHA datos . repite_valores
    (113) repite_valores -> . COMA datos
    (114) repite_valores -> . COMA datos repite_valores

    PAREN_DER       reduce using rule 117 (repite_valores_f -> COMA datos FLECHA datos .)
    COMA            shift and go to state 157

    repite_valores                 shift and go to state 283

state 282

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR . VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas

    VARIABLE        shift and go to state 284


state 283

    (118) repite_valores_f -> COMA datos FLECHA datos repite_valores .

    PAREN_DER       reduce using rule 118 (repite_valores_f -> COMA datos FLECHA datos repite_valores .)


state 284

    (67) sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE . PAREN_DER LLAVE_IZQ sentenciasAnidadas

    PAREN_DER       shift and go to state 238

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LLAVE_DER in state 18 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 23 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 23 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 23 resolved as shift
WARNING: shift/reduce conflict for PAREN_DER in state 215 resolved as shift
WARNING: shift/reduce conflict for LLAVE_DER in state 263 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 263 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 263 resolved as shift
WARNING: shift/reduce conflict for PRINT_R in state 263 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 263 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 263 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING in state 263 resolved as shift
WARNING: shift/reduce conflict for BOOLEANO in state 263 resolved as shift
WARNING: shift/reduce conflict for NEW in state 263 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 263 resolved as shift
WARNING: shift/reduce conflict for SIGNO_DOLAR in state 263 resolved as shift
WARNING: shift/reduce conflict for FOR in state 263 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 263 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 263 resolved as shift
WARNING: shift/reduce conflict for MENOR_IGUAL in state 263 resolved as shift
WARNING: shift/reduce conflict for MAYOR_IGUAL in state 263 resolved as shift
WARNING: shift/reduce conflict for IF in state 263 resolved as shift
WARNING: reduce/reduce conflict in state 16 resolved using rule (valor -> datos)
WARNING: rejected rule (salidas_pos -> datos) in state 16
WARNING: reduce/reduce conflict in state 17 resolved using rule (valor -> pila)
WARNING: rejected rule (estructuras_datos -> pila) in state 17
WARNING: reduce/reduce conflict in state 18 resolved using rule (valor -> cola)
WARNING: rejected rule (estructuras_datos -> cola) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (valor -> arreglo)
WARNING: rejected rule (estructuras_datos -> arreglo) in state 19
WARNING: reduce/reduce conflict in state 52 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 52
WARNING: reduce/reduce conflict in state 277 resolved using rule (sinRetorno -> cola LLAVE_DER)
WARNING: rejected rule (for -> cola LLAVE_DER) in state 277
WARNING: Rule (estructuras_datos -> pila) is never reduced
WARNING: Rule (estructuras_datos -> cola) is never reduced
WARNING: Rule (estructuras_datos -> arreglo) is never reduced
