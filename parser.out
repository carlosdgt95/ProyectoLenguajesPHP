Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_SYMB
    ARRAY
    AS
    ASIG_CONCA
    ASIG_REFER
    BOOLEANO
    CALLABLE
    CATH
    CLASS
    CLONE
    COMA
    COMENTARIO
    CONST
    CONTINUE
    CORCH_DER
    CORCH_IZQ
    COUNT
    DECLARE
    DECREMENTO
    DEFAULT
    DIFERENTE
    DIVISION
    DIVISION_ENT
    DO
    ELSE
    ELSEIF
    ENDDECLARE
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXTENDS
    FINAL
    FINALLY
    FLOTANTE
    FN
    FOR
    FOREACH
    GLOBAL
    IDENTICO
    IF
    IMPLEMENTS
    INCLUDE
    INCREMENTO
    INTANCEOF
    INTEADOF
    INTERFACE
    INTERROG_CE
    MACHT
    MAYOR_IGUAL
    MAYOR_QUE
    MENOR_IGUAL
    MENOR_QUE
    MODULO
    MULTIPL
    NAMESPACE
    OR
    OR_SYMB
    POTENCIA
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    REQUIERE
    RESTA
    RETURN
    SALTO_LINEA
    STACK
    STATIC
    STRREV
    SUMA
    TABULACION
    THROW
    TRAIT
    TRY
    USE
    VAR
    WHILE

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> valor
Rule 2     sentencias -> estructuras_control
Rule 3     sentencias -> tipoFunciones
Rule 4     estructuras_control -> SWITCH1
Rule 5     estructuras_control -> cola
Rule 6     tipoFunciones -> sinRetorno
Rule 7     sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER
Rule 8     cola -> SIGNO_DOLAR CADENA IGUAL NEW QUEUE PAREN_IZQ PAREN_DER
Rule 9     SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER
Rule 10    valor -> STRING
Rule 11    salida1 -> ECHO CADENA PUNTO_COMA
Rule 12    salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA
Rule 13    salida -> PRINT STRING PUNTO_COMA
Rule 14    variable -> SIGNO_DOLAR CADENA IGUAL STRING PUNTO_COMA

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_SYMB             : 
ARRAY                : 
AS                   : 
ASIG_CONCA           : 
ASIG_REFER           : 
BOOLEANO             : 
BREAK                : 9
CADENA               : 7 7 8 9 11 14
CALLABLE             : 
CASE                 : 9
CATH                 : 
CLASS                : 
CLONE                : 
COMA                 : 
COMENTARIO           : 
CONST                : 
CONTINUE             : 
CORCH_DER            : 
CORCH_IZQ            : 
COUNT                : 
DECLARE              : 
DECREMENTO           : 
DEFAULT              : 
DIFERENTE            : 
DIVISION             : 
DIVISION_ENT         : 
DO                   : 
ECHO                 : 11
ELSE                 : 
ELSEIF               : 
ENDDECLARE           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
ENTERO               : 9
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLOTANTE             : 
FN                   : 
FOR                  : 
FOREACH              : 
FUNCTION             : 7
GLOBAL               : 
IDENTICO             : 
IF                   : 
IGUAL                : 8 14
IMPLEMENTS           : 
INCLUDE              : 
INCREMENTO           : 
INTANCEOF            : 
INTEADOF             : 
INTERFACE            : 
INTERROG_CE          : 
LLAVE_DER            : 7 9
LLAVE_IZQ            : 7 9
MACHT                : 
MAYOR_IGUAL          : 
MAYOR_QUE            : 
MENOR_IGUAL          : 
MENOR_QUE            : 
MODULO               : 
MULTIPL              : 
NAMESPACE            : 
NEW                  : 8
OR                   : 
OR_SYMB              : 
PAREN_DER            : 7 8 9 12
PAREN_IZQ            : 7 8 9 12
POTENCIA             : 
PRINT                : 12 13
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTODOBLE           : 9
PUNTO_COMA           : 11 12 13 14
QUEUE                : 8
REQUIERE             : 
RESTA                : 
RETURN               : 
SALTO_LINEA          : 
SIGNO_DOLAR          : 7 8 9 14
STACK                : 
STATIC               : 
STRING               : 10 12 13 14
STRREV               : 
SUMA                 : 
SWITCH               : 9
TABULACION           : 
THROW                : 
TRAIT                : 
TRY                  : 
USE                  : 
VAR                  : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

SWITCH1              : 4
cola                 : 5
estructuras_control  : 2
salida               : 
salida1              : 7
sentencias           : 0
sinRetorno           : 6
tipoFunciones        : 3
valor                : 1
variable             : 

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . valor
    (2) sentencias -> . estructuras_control
    (3) sentencias -> . tipoFunciones
    (10) valor -> . STRING
    (4) estructuras_control -> . SWITCH1
    (5) estructuras_control -> . cola
    (6) tipoFunciones -> . sinRetorno
    (9) SWITCH1 -> . SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER
    (8) cola -> . SIGNO_DOLAR CADENA IGUAL NEW QUEUE PAREN_IZQ PAREN_DER
    (7) sinRetorno -> . FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    STRING          shift and go to state 5
    SWITCH          shift and go to state 9
    SIGNO_DOLAR     shift and go to state 10
    FUNCTION        shift and go to state 11

    sentencias                     shift and go to state 1
    valor                          shift and go to state 2
    estructuras_control            shift and go to state 3
    tipoFunciones                  shift and go to state 4
    SWITCH1                        shift and go to state 6
    cola                           shift and go to state 7
    sinRetorno                     shift and go to state 8

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> valor .

    $end            reduce using rule 1 (sentencias -> valor .)


state 3

    (2) sentencias -> estructuras_control .

    $end            reduce using rule 2 (sentencias -> estructuras_control .)


state 4

    (3) sentencias -> tipoFunciones .

    $end            reduce using rule 3 (sentencias -> tipoFunciones .)


state 5

    (10) valor -> STRING .

    $end            reduce using rule 10 (valor -> STRING .)


state 6

    (4) estructuras_control -> SWITCH1 .

    $end            reduce using rule 4 (estructuras_control -> SWITCH1 .)


state 7

    (5) estructuras_control -> cola .

    $end            reduce using rule 5 (estructuras_control -> cola .)


state 8

    (6) tipoFunciones -> sinRetorno .

    $end            reduce using rule 6 (tipoFunciones -> sinRetorno .)


state 9

    (9) SWITCH1 -> SWITCH . PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    PAREN_IZQ       shift and go to state 12


state 10

    (8) cola -> SIGNO_DOLAR . CADENA IGUAL NEW QUEUE PAREN_IZQ PAREN_DER

    CADENA          shift and go to state 13


state 11

    (7) sinRetorno -> FUNCTION . CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    CADENA          shift and go to state 14


state 12

    (9) SWITCH1 -> SWITCH PAREN_IZQ . SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    SIGNO_DOLAR     shift and go to state 15


state 13

    (8) cola -> SIGNO_DOLAR CADENA . IGUAL NEW QUEUE PAREN_IZQ PAREN_DER

    IGUAL           shift and go to state 16


state 14

    (7) sinRetorno -> FUNCTION CADENA . PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    PAREN_IZQ       shift and go to state 17


state 15

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR . CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    CADENA          shift and go to state 18


state 16

    (8) cola -> SIGNO_DOLAR CADENA IGUAL . NEW QUEUE PAREN_IZQ PAREN_DER

    NEW             shift and go to state 19


state 17

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ . SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    SIGNO_DOLAR     shift and go to state 20


state 18

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA . PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    PAREN_DER       shift and go to state 21


state 19

    (8) cola -> SIGNO_DOLAR CADENA IGUAL NEW . QUEUE PAREN_IZQ PAREN_DER

    QUEUE           shift and go to state 22


state 20

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR . CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    CADENA          shift and go to state 23


state 21

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER . LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    LLAVE_IZQ       shift and go to state 24


state 22

    (8) cola -> SIGNO_DOLAR CADENA IGUAL NEW QUEUE . PAREN_IZQ PAREN_DER

    PAREN_IZQ       shift and go to state 25


state 23

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA . PAREN_DER LLAVE_IZQ salida1 LLAVE_DER

    PAREN_DER       shift and go to state 26


state 24

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ . CASE ENTERO PUNTODOBLE BREAK LLAVE_DER

    CASE            shift and go to state 27


state 25

    (8) cola -> SIGNO_DOLAR CADENA IGUAL NEW QUEUE PAREN_IZQ . PAREN_DER

    PAREN_DER       shift and go to state 28


state 26

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER . LLAVE_IZQ salida1 LLAVE_DER

    LLAVE_IZQ       shift and go to state 29


state 27

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE . ENTERO PUNTODOBLE BREAK LLAVE_DER

    ENTERO          shift and go to state 30


state 28

    (8) cola -> SIGNO_DOLAR CADENA IGUAL NEW QUEUE PAREN_IZQ PAREN_DER .

    $end            reduce using rule 8 (cola -> SIGNO_DOLAR CADENA IGUAL NEW QUEUE PAREN_IZQ PAREN_DER .)


state 29

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ . salida1 LLAVE_DER
    (11) salida1 -> . ECHO CADENA PUNTO_COMA

    ECHO            shift and go to state 32

    salida1                        shift and go to state 31

state 30

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO . PUNTODOBLE BREAK LLAVE_DER

    PUNTODOBLE      shift and go to state 33


state 31

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 . LLAVE_DER

    LLAVE_DER       shift and go to state 34


state 32

    (11) salida1 -> ECHO . CADENA PUNTO_COMA

    CADENA          shift and go to state 35


state 33

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE . BREAK LLAVE_DER

    BREAK           shift and go to state 36


state 34

    (7) sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER .

    $end            reduce using rule 7 (sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ salida1 LLAVE_DER .)


state 35

    (11) salida1 -> ECHO CADENA . PUNTO_COMA

    PUNTO_COMA      shift and go to state 37


state 36

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK . LLAVE_DER

    LLAVE_DER       shift and go to state 38


state 37

    (11) salida1 -> ECHO CADENA PUNTO_COMA .

    LLAVE_DER       reduce using rule 11 (salida1 -> ECHO CADENA PUNTO_COMA .)


state 38

    (9) SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER .

    $end            reduce using rule 9 (SWITCH1 -> SWITCH PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ CASE ENTERO PUNTODOBLE BREAK LLAVE_DER .)

