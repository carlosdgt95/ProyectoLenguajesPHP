
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_OBJ ASIG_REFER BOOLEANO BREAK CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR VARIABLE WHILEinstrucciones : valor\n                    | asignacion\n                    | concatenacion\n                    | salida\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones\n                    | op_pila\n                    | valorc\n                    | multiples\n                    | LLAVE_DER\n  decl_variable : SIGNO_DOLAR VARIABLEasignacion : decl_variable IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n          | arreglo\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salidas_pos : datos\n                | decl_variable\n                | conca_string\n  multiples : salidas_pos\n                | salidas_pos multiplessalida : ECHO salidas_pos PUNTO_COMAsalida : PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMAsalida : PRINT salidas_pos PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n  operad_arit : SUMA\n                | RESTA\n                | MULTIPL\n                | DIVISION\n                | DIVISION_ENT\n                | POTENCIA\n                | MODULO\n   bloque : asignacion\n              | salida\n              | retorno\n              | estructuras_control\n              | asignacion bloque\n              | salida bloque\n              | retorno bloque\n              | estructuras_control bloque\n              | multiples \n              | multiples bloque\n  sinRetorno : FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DER cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DERsentenciasAnidadas : instrucciones \n\t\t\t\t\t\t| instrucciones sentenciasAnidadas\n\tdeclaracionp :  SIGNO_DOLAR VARIABLE valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayordeclaracion_s : SIGNO_DOLAR VARIABLE crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER\n                    |  ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo\n  if_else_fin : ELSE LLAVE_IZQ bloque LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : decl_variable ASIG_OBJ operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN salidas_pos PUNTO_COMAconcatenacion : decl_variable ASIG_CONCA datos PUNTO_COMAconca_string : STRING PUNTO STRINGsalida : PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA salidas_pos_obj : valor\n                | decl_variable\n                | conca_string\n  contenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : datos repite_valores repite_valores : COMA datos\n                        | COMA datos repite_valores\n    arreglo : ARRAY PAREN_IZQ valores PAREN_DER valoresflecha : datos FLECHA datos repite_valores_f repite_valores_f : COMA datos FLECHA datos\n                        | COMA datos FLECHA datos repite_valores\n  arreglo : decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA'
    
_lr_action_items = {'LLAVE_DER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,100,101,108,110,117,118,119,122,123,124,125,126,127,128,130,156,157,159,160,161,162,163,164,166,182,183,184,186,194,196,198,199,200,206,211,212,213,214,215,217,218,219,222,223,225,226,],[12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,44,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,-69,-70,-13,-94,-86,-63,-106,159,-51,-52,-53,-54,-59,-23,166,-28,-96,-81,-55,-56,-57,-58,-60,-65,-89,-90,-91,-93,207,-110,-88,210,12,12,-64,12,223,-100,-101,225,226,-61,-67,-102,-62,-92,]),'ECHO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[18,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,18,-69,-70,-13,-94,-86,-63,-106,18,18,18,18,18,-23,-28,-96,-81,-65,18,-89,-90,-91,-93,18,-110,-88,18,18,18,18,-64,18,-61,-67,-102,-65,-92,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,20,-69,-70,-13,-94,-86,-63,-106,20,20,20,20,20,-23,-28,-96,-81,-65,20,-89,-90,-91,-93,20,-110,-88,20,20,20,20,-64,20,-61,-67,-102,-65,-92,]),'PRINT_R':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[21,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,21,-69,-70,-13,-94,-86,-63,-106,21,21,21,21,21,-23,-28,-96,-81,-65,21,-89,-90,-91,-93,21,-110,-88,21,21,21,21,-64,21,-61,-67,-102,-65,-92,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,40,41,42,44,45,46,49,50,51,52,54,58,59,60,69,79,84,86,88,93,94,95,100,101,108,109,110,111,117,118,119,121,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,146,156,157,159,166,174,178,180,182,183,184,186,187,196,198,200,204,205,206,209,211,212,219,222,223,225,226,227,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,29,29,29,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,67,68,-24,-62,29,29,-22,-23,-26,29,29,29,-12,-76,103,-87,-27,-29,-95,-77,29,103,-69,-70,-13,29,-94,29,-86,-63,-106,29,29,29,29,29,29,-23,29,29,29,-38,-39,-40,-41,-42,-43,175,-28,-96,-81,-65,29,29,29,-89,-90,-91,-93,29,-110,-88,29,29,29,29,29,-64,29,-61,-67,-102,-65,-92,29,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,42,44,45,46,49,50,51,52,54,58,59,60,69,79,84,86,88,93,94,95,100,101,108,109,110,111,117,118,119,121,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,147,156,157,159,166,174,178,180,182,183,184,186,187,196,198,200,204,205,206,209,211,212,219,222,223,225,226,227,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,30,30,30,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,30,30,-22,-23,-26,30,30,30,-12,-76,104,-87,-27,-29,-95,-77,30,104,-69,-70,-13,30,-94,30,-86,-63,-106,30,30,30,30,30,30,-23,30,30,30,-38,-39,-40,-41,-42,-43,176,-28,-96,-81,-65,30,30,30,-89,-90,-91,-93,30,-110,-88,30,30,30,30,30,-64,30,-61,-67,-102,-65,-92,30,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,42,44,45,46,49,50,51,52,54,55,58,59,60,69,79,84,86,88,93,94,95,100,101,108,109,110,111,117,118,119,121,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,148,156,157,159,166,174,178,180,182,183,184,186,187,196,198,200,204,205,206,209,211,212,219,222,223,225,226,227,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,31,31,31,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,77,77,-22,-23,-26,31,77,88,77,-12,-76,105,-87,-27,-29,-95,-77,31,105,-69,-70,-13,77,-94,77,-86,-63,-106,77,31,31,31,31,31,-23,31,77,77,-38,-39,-40,-41,-42,-43,177,-28,-96,-81,-65,31,77,77,-89,-90,-91,-93,31,-110,-88,31,31,31,31,77,-64,31,-61,-67,-102,-65,-92,77,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,42,44,45,46,49,50,51,52,54,58,59,60,69,79,84,86,88,93,94,95,100,101,108,109,110,111,117,118,119,121,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,156,157,159,166,174,178,180,182,183,184,186,187,196,198,200,204,205,206,209,211,212,219,222,223,225,226,227,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,32,32,32,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,32,32,-22,-23,-26,32,32,32,-12,-76,106,-87,-27,-29,-95,-77,32,106,-69,-70,-13,32,-94,32,-86,-63,-106,32,32,32,32,32,32,-23,32,32,32,-38,-39,-40,-41,-42,-43,-28,-96,-81,-65,32,32,32,-89,-90,-91,-93,32,-110,-88,32,32,32,32,32,-64,32,-61,-67,-102,-65,-92,32,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,45,49,50,51,54,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,135,136,137,138,139,140,141,142,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,33,-22,-23,-26,33,-12,-76,-87,-27,-29,-95,-77,131,-69,-70,-13,-94,-86,-63,-106,131,131,131,131,131,-23,33,33,-38,-39,-40,-41,-42,-43,-28,-96,-81,-65,131,-89,-90,-91,-93,131,-110,-88,33,131,131,33,-64,33,-61,-67,-102,-65,-92,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,45,49,50,51,54,59,60,79,84,86,88,93,100,101,107,108,110,117,118,119,135,136,137,138,139,140,141,142,156,157,159,182,183,184,196,198,200,206,211,212,219,222,223,226,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,72,-22,-23,-26,34,-12,-76,-87,-27,-29,-95,-77,-69,-70,149,-13,-94,-86,-63,-106,34,34,-38,-39,-40,-41,-42,-43,-28,-96,-81,-89,-90,-91,-110,-88,34,34,-64,34,-61,-67,-102,-92,]),'SIGNO_DOLAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,42,44,45,49,50,51,52,54,59,60,64,65,79,84,86,88,93,94,96,99,100,101,108,110,117,118,119,123,124,125,126,127,128,129,133,135,136,137,138,139,140,141,142,143,156,157,159,166,174,182,183,184,186,187,190,196,198,200,204,205,206,211,212,219,222,223,225,226,228,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,35,35,35,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,35,-22,-23,-26,35,35,-12,-76,35,35,-87,-27,-29,-95,-77,35,134,144,-69,-70,-13,-94,-86,-63,-106,35,35,35,35,35,-23,35,169,35,35,-38,-39,-40,-41,-42,-43,35,-28,-96,-81,-65,35,-89,-90,-91,-93,35,-68,-110,-88,35,35,35,35,-64,35,-61,-67,-102,-65,-92,144,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,37,-69,-70,-13,-94,-86,-63,-106,37,37,37,37,37,-23,-28,-96,-81,-65,37,-89,-90,-91,-93,37,-110,-88,37,37,37,37,-64,37,-61,-67,-102,-65,-92,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,38,-69,-70,-13,-94,-86,-63,-106,38,38,38,38,38,-23,-28,-96,-81,-65,38,-89,-90,-91,-93,38,-110,-88,38,38,38,38,-64,38,-61,-67,-102,-65,-92,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,100,101,108,110,117,118,119,156,157,159,182,183,184,196,198,200,204,206,211,212,219,222,223,226,],[39,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,-69,-70,-13,-94,-86,-63,-106,-28,-96,-81,-89,-90,-91,-110,-88,39,216,39,-64,39,-61,-67,-102,-92,]),'MENOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,98,100,101,103,104,105,108,110,117,118,119,156,157,159,170,182,183,184,196,198,200,206,211,212,219,222,223,226,],[40,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,142,-69,-70,142,142,142,-13,-94,-86,-63,-106,-28,-96,-81,40,-89,-90,-91,-110,-88,40,40,-64,40,-61,-67,-102,-92,]),'MAYOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,98,100,101,103,104,105,108,110,117,118,119,156,157,159,170,182,183,184,196,198,200,206,211,212,219,222,223,226,],[41,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,140,-69,-70,140,140,140,-13,-94,-86,-63,-106,-28,-96,-81,41,-89,-90,-91,-110,-88,41,41,-64,41,-61,-67,-102,-92,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,200,204,205,206,211,212,219,222,223,225,226,],[43,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,43,-69,-70,-13,-94,-86,-63,-106,43,43,43,43,43,-23,-28,-96,-81,-65,43,-89,-90,-91,-93,43,-110,-88,43,43,43,43,-64,43,-61,-67,-102,-65,-92,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,100,101,108,110,117,118,119,156,157,159,182,183,184,196,198,211,212,219,222,223,226,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,-69,-70,-13,-94,-86,-63,-106,-28,-96,-81,-89,-90,-91,-110,-88,-64,-66,-61,-67,-102,-92,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,31,32,42,44,49,50,51,59,60,79,84,86,88,93,94,100,101,108,110,117,118,119,123,124,125,126,127,128,156,157,159,166,174,182,183,184,186,187,196,198,204,205,211,212,219,222,223,225,226,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-14,-15,-16,-17,-23,-25,-30,-31,-32,-36,-37,-71,-72,-18,-19,-20,-21,-24,-62,-22,-23,-26,-12,-76,-87,-27,-29,-95,-77,129,-69,-70,-13,-94,-86,-63,-106,129,129,129,129,129,-23,-28,-96,-81,-65,129,-89,-90,-91,-93,129,-110,-88,129,129,-64,-66,-61,-67,-102,-65,-92,]),'IGUAL':([17,59,70,97,128,],[45,-12,107,135,135,]),'ASIG_CONCA':([17,59,],[46,-12,]),'ASIG_OBJ':([17,59,],[47,-12,]),'PAREN_IZQ':([20,21,34,37,38,43,56,57,63,66,72,80,81,82,83,149,224,],[52,54,58,64,65,69,89,90,95,99,109,111,112,113,114,178,228,]),'PUNTO_COMA':([29,30,31,32,42,48,49,50,53,59,67,68,71,73,74,75,76,77,78,88,115,116,117,118,119,153,154,155,165,179,181,196,],[-18,-19,-20,-21,-24,84,-22,-23,86,-12,100,101,108,-14,-15,-16,-17,-20,110,-95,156,157,-86,-63,-106,182,183,184,186,196,198,-110,]),'PAREN_DER':([29,30,31,32,42,49,50,59,73,74,75,76,77,85,87,88,89,90,91,102,106,112,113,114,117,118,119,120,132,150,152,158,168,171,172,173,175,176,177,185,196,201,202,203,208,229,230,],[-18,-19,-20,-21,-24,-22,-23,-12,-14,-15,-16,-17,-20,115,116,-95,117,118,119,145,-85,153,154,155,-86,-63,-106,-103,167,179,181,-104,188,191,192,193,-82,-83,-84,-105,-110,-73,-74,-75,-107,-108,-109,]),'COMA':([29,30,32,77,92,151,158,197,229,],[-18,-19,-21,-20,121,121,121,209,121,]),'FLECHA':([29,30,32,77,151,195,220,],[-18,-19,-21,-20,180,180,227,]),'PUNTO':([31,],[55,]),'STACK':([33,],[56,]),'QUEUE':([33,131,],[57,57,]),'VARIABLE':([35,39,134,144,169,216,],[59,66,170,173,189,224,]),'ELSE':([36,61,207,210,221,],[62,62,-78,-79,-80,]),'ELSEIF':([36,207,210,],[63,-78,63,]),'PUSH':([47,],[80,]),'POP':([47,],[81,]),'COUNT':([47,],[82,]),'CURRENT':([47,],[83,]),'IDENTICO':([59,98,103,104,105,],[-12,137,137,137,137,]),'DIFERENTE':([59,98,103,104,105,],[-12,138,138,138,138,]),'MAYOR_QUE':([59,98,103,104,105,],[-12,139,139,139,139,]),'MENOR_QUE':([59,98,103,104,105,],[-12,141,141,141,141,]),'LLAVE_IZQ':([62,145,167,188,191,192,193,],[94,174,187,200,204,205,206,]),'TRES_PUNTOS':([99,],[143,]),'INCREMENTO':([189,],[202,]),'DECREMENTO':([189,],[203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,200,206,212,],[1,212,212,212,]),'valor':([0,45,54,135,136,200,206,212,],[2,71,87,71,171,2,2,2,]),'asignacion':([0,64,94,123,124,125,126,127,174,187,200,204,205,206,212,],[3,96,123,123,123,123,123,123,123,123,3,123,123,3,3,]),'concatenacion':([0,200,206,212,],[4,4,4,4,]),'salida':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[5,124,124,124,124,124,124,124,124,5,124,124,5,5,]),'estructuras_control':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[6,126,126,126,126,126,126,126,126,6,126,126,6,6,]),'estructuras_datos':([0,200,206,212,],[7,7,7,7,]),'funciones':([0,200,206,212,],[8,8,8,8,]),'op_pila':([0,200,206,212,],[9,9,9,9,]),'valorc':([0,170,200,206,212,],[10,190,10,10,10,]),'multiples':([0,19,94,123,124,125,126,127,174,187,200,204,205,206,212,],[11,51,127,127,127,127,127,127,127,127,11,127,127,11,11,]),'datos':([0,18,19,20,45,46,52,54,58,94,109,111,121,123,124,125,126,127,129,135,136,174,178,180,187,200,204,205,206,209,212,227,],[13,49,49,49,73,78,49,73,92,49,151,152,158,49,49,49,49,49,49,73,73,49,195,197,49,13,49,49,13,220,13,229,]),'pila':([0,45,54,135,136,200,206,212,],[14,74,74,74,74,14,14,14,]),'cola':([0,45,54,94,123,124,125,126,127,135,136,174,187,200,204,205,206,212,],[15,75,75,130,130,130,130,130,130,75,75,130,130,15,217,130,15,15,]),'arreglo':([0,45,54,135,136,200,206,212,],[16,76,76,76,76,16,16,16,]),'decl_variable':([0,18,19,20,45,52,54,64,65,94,123,124,125,126,127,129,135,136,143,174,187,200,204,205,206,212,],[17,50,50,50,70,50,70,97,98,128,128,128,128,128,128,50,70,70,172,128,128,17,128,128,17,17,]),'salidas_pos':([0,18,19,20,52,94,123,124,125,126,127,129,174,187,200,204,205,206,212,],[19,48,19,53,85,19,19,19,19,19,19,165,19,19,19,19,19,19,19,]),'if_else':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'for':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'whileDeclaracion':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'funcion_variable':([0,200,206,212,],[25,25,25,25,]),'sinRetorno':([0,200,204,206,212,],[26,26,215,26,26,]),'menor':([0,170,200,206,212,],[27,27,27,27,27,]),'mayor':([0,170,200,206,212,],[28,28,28,28,28,]),'if_else_inicio':([0,94,123,124,125,126,127,174,187,200,204,205,206,212,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'conca_string':([0,18,19,20,52,94,123,124,125,126,127,129,174,187,200,204,205,206,212,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'if_else_fin':([36,61,],[60,93,]),'if_else_cuerpo':([36,210,],[61,221,]),'operad_pila':([47,],[79,]),'valores':([58,109,],[91,91,]),'op_logica':([69,95,],[102,132,]),'repite_valores':([92,151,158,229,],[120,120,185,230,]),'bloque':([94,123,124,125,126,127,174,187,204,205,],[122,160,161,162,163,164,194,199,214,218,]),'retorno':([94,123,124,125,126,127,174,187,204,205,],[125,125,125,125,125,125,125,125,125,125,]),'declaracionp':([96,],[133,]),'operad_log':([98,103,104,105,],[136,146,147,148,]),'valoresflecha':([109,178,],[150,150,]),'declaracion_s':([133,],[168,]),'crecimiento':([189,],[201,]),'repite_valores_f':([197,],[208,]),'sentenciasAnidadas':([200,206,212,],[211,219,222,]),'contenido':([204,],[213,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','sintactico.py',8),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','sintactico.py',9),
  ('instrucciones -> concatenacion','instrucciones',1,'p_instrucciones','sintactico.py',10),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','sintactico.py',11),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','sintactico.py',12),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','sintactico.py',13),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',14),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','sintactico.py',15),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','sintactico.py',16),
  ('instrucciones -> multiples','instrucciones',1,'p_instrucciones','sintactico.py',17),
  ('instrucciones -> LLAVE_DER','instrucciones',1,'p_instrucciones','sintactico.py',18),
  ('decl_variable -> SIGNO_DOLAR VARIABLE','decl_variable',2,'p_decl_variable','sintactico.py',22),
  ('asignacion -> decl_variable IGUAL valor PUNTO_COMA','asignacion',4,'p_asignacion','sintactico.py',26),
  ('valor -> datos','valor',1,'p_valor','sintactico.py',32),
  ('valor -> pila','valor',1,'p_valor','sintactico.py',33),
  ('valor -> cola','valor',1,'p_valor','sintactico.py',34),
  ('valor -> arreglo','valor',1,'p_valor','sintactico.py',35),
  ('datos -> ENTERO','datos',1,'p_datos','sintactico.py',40),
  ('datos -> FLOTANTE','datos',1,'p_datos','sintactico.py',41),
  ('datos -> STRING','datos',1,'p_datos','sintactico.py',42),
  ('datos -> BOOLEANO','datos',1,'p_datos','sintactico.py',43),
  ('salidas_pos -> datos','salidas_pos',1,'p_salidas_pos','sintactico.py',48),
  ('salidas_pos -> decl_variable','salidas_pos',1,'p_salidas_pos','sintactico.py',49),
  ('salidas_pos -> conca_string','salidas_pos',1,'p_salidas_pos','sintactico.py',50),
  ('multiples -> salidas_pos','multiples',1,'p_multiples','sintactico.py',53),
  ('multiples -> salidas_pos multiples','multiples',2,'p_multiples','sintactico.py',54),
  ('salida -> ECHO salidas_pos PUNTO_COMA','salida',3,'p_salida_forma1','sintactico.py',58),
  ('salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','sintactico.py',61),
  ('salida -> PRINT salidas_pos PUNTO_COMA','salida',3,'p_salida_forma3','sintactico.py',64),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','sintactico.py',71),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintactico.py',72),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','sintactico.py',73),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','sintactico.py',77),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','sintactico.py',78),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','sintactico.py',79),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','sintactico.py',83),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','sintactico.py',84),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','sintactico.py',89),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','sintactico.py',90),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','sintactico.py',91),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',92),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','sintactico.py',93),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',94),
  ('operad_arit -> SUMA','operad_arit',1,'p_operad_arit','sintactico.py',99),
  ('operad_arit -> RESTA','operad_arit',1,'p_operad_arit','sintactico.py',100),
  ('operad_arit -> MULTIPL','operad_arit',1,'p_operad_arit','sintactico.py',101),
  ('operad_arit -> DIVISION','operad_arit',1,'p_operad_arit','sintactico.py',102),
  ('operad_arit -> DIVISION_ENT','operad_arit',1,'p_operad_arit','sintactico.py',103),
  ('operad_arit -> POTENCIA','operad_arit',1,'p_operad_arit','sintactico.py',104),
  ('operad_arit -> MODULO','operad_arit',1,'p_operad_arit','sintactico.py',105),
  ('bloque -> asignacion','bloque',1,'p_bloque','sintactico.py',111),
  ('bloque -> salida','bloque',1,'p_bloque','sintactico.py',112),
  ('bloque -> retorno','bloque',1,'p_bloque','sintactico.py',113),
  ('bloque -> estructuras_control','bloque',1,'p_bloque','sintactico.py',114),
  ('bloque -> asignacion bloque','bloque',2,'p_bloque','sintactico.py',115),
  ('bloque -> salida bloque','bloque',2,'p_bloque','sintactico.py',116),
  ('bloque -> retorno bloque','bloque',2,'p_bloque','sintactico.py',117),
  ('bloque -> estructuras_control bloque','bloque',2,'p_bloque','sintactico.py',118),
  ('bloque -> multiples','bloque',1,'p_bloque','sintactico.py',119),
  ('bloque -> multiples bloque','bloque',2,'p_bloque','sintactico.py',120),
  ('sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas','sinRetorno',8,'p_sinretorno','sintactico.py',126),
  ('sinRetorno -> cola LLAVE_DER','sinRetorno',2,'p_sinretorno','sintactico.py',127),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','sintactico.py',131),
  ('for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas','for',8,'p_for','sintactico.py',136),
  ('for -> cola LLAVE_DER','for',2,'p_for','sintactico.py',137),
  ('sentenciasAnidadas -> instrucciones','sentenciasAnidadas',1,'p_sentenciasAnidadas','sintactico.py',139),
  ('sentenciasAnidadas -> instrucciones sentenciasAnidadas','sentenciasAnidadas',2,'p_sentenciasAnidadas','sintactico.py',140),
  ('declaracionp -> SIGNO_DOLAR VARIABLE valorc','declaracionp',3,'p_declaracionM','sintactico.py',144),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','sintactico.py',147),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','sintactico.py',150),
  ('valorc -> menor','valorc',1,'p_valorC','sintactico.py',153),
  ('valorc -> mayor','valorc',1,'p_valorC','sintactico.py',154),
  ('declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento','declaracion_s',3,'p_declaracionsimple','sintactico.py',157),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',160),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',161),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','sintactico.py',170),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','sintactico.py',174),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','sintactico.py',178),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','sintactico.py',182),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo','if_else_cuerpo',8,'p_if_else_cuerpo','sintactico.py',183),
  ('if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER','if_else_fin',4,'p_if_else_fin','sintactico.py',188),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','sintactico.py',192),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','sintactico.py',193),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','sintactico.py',194),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','sintactico.py',195),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','sintactico.py',203),
  ('op_pila -> decl_variable ASIG_OBJ operad_pila','op_pila',3,'p_op_pila','sintactico.py',208),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','sintactico.py',212),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',213),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',214),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',215),
  ('funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',9,'p_funcion_variable','sintactico.py',223),
  ('retorno -> RETURN salidas_pos PUNTO_COMA','retorno',3,'p_retorno','sintactico.py',228),
  ('concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA','concatenacion',4,'p_concatenacion','sintactico.py',239),
  ('conca_string -> STRING PUNTO STRING','conca_string',3,'p_conca_string','sintactico.py',242),
  ('salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA','salida',5,'p_salida_obj','sintactico.py',247),
  ('salidas_pos_obj -> valor','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',250),
  ('salidas_pos_obj -> decl_variable','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',251),
  ('salidas_pos_obj -> conca_string','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',252),
  ('contenido -> bloque','contenido',1,'p_contenido','sintactico.py',259),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','sintactico.py',260),
  ('whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',9,'p_whileDeclaracion','sintactico.py',264),
  ('valores -> datos repite_valores','valores',2,'p_valoresSeparadosComa','sintactico.py',269),
  ('repite_valores -> COMA datos','repite_valores',2,'p_repite_valoresSeparadosComa','sintactico.py',272),
  ('repite_valores -> COMA datos repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','sintactico.py',273),
  ('arreglo -> ARRAY PAREN_IZQ valores PAREN_DER','arreglo',4,'p_arreglo_parentesis','sintactico.py',281),
  ('valoresflecha -> datos FLECHA datos repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','sintactico.py',286),
  ('repite_valores_f -> COMA datos FLECHA datos','repite_valores_f',4,'p_repite_valoresSeparados_flecha','sintactico.py',290),
  ('repite_valores_f -> COMA datos FLECHA datos repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','sintactico.py',291),
  ('arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',7,'p_arreglo_asociativo','sintactico.py',295),
]
