
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_OBJ ASIG_REFER BOOLEANO BREAK CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR VARIABLE WHILEinstrucciones : valor\n                    | asignacion\n                    | salida\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones  \n                    | op_logica\n                    | op_pila\n                    | declaracion\n                    | declaracionp\n                    | declaracion_s\n                    | crecimiento\n                    | valorc\n                    | LLAVE_DER\n                \n\n\n  decl_variable : SIGNO_DOLAR VARIABLEasignacion : decl_variable IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n          | arreglo\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salidas_pos : datos\n                | decl_variable\n                | conca_string\n  salida : ECHO salidas_pos PUNTO_COMAsalida : PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMAsalida : PRINT salidas_pos PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n   bloque : asignacion\n              | salida\n              | retorno\n              | estructuras_control\n  sinRetorno : FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas\n                                                                                  | cola LLAVE_DER cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas\n                                                                                  | cola LLAVE_DERdeclaracion :  SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMAdeclaracionp :  SIGNO_DOLAR VARIABLE valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayorsentenciasAnidadas : instrucciones \n\t\t\t\t\t\t| instrucciones sentenciasAnidadas\n\tdeclaracion_s : SIGNO_DOLAR VARIABLE crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER\n                    |  ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo\n  if_else_fin : ELSE LLAVE_IZQ bloque LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : decl_variable ASIG_OBJ operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN salidas_pos PUNTO_COMAconca_string : STRING PUNTO STRINGsalida : PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA salidas_pos_obj : valor\n                | decl_variable\n                | conca_string\n  contenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : datos repite_valores repite_valores : COMA datos\n                        | COMA datos repite_valores\n    arreglo : SIGNO_DOLAR  VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMAarreglo : ARRAY PAREN_IZQ valores PAREN_DER valoresflecha : datos FLECHA datos repite_valores_f repite_valores_f : COMA datos FLECHA datos\n                        | COMA datos FLECHA datos repite_valores\n  '
    
_lr_action_items = {'LLAVE_DER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,119,120,126,137,138,139,142,143,144,145,146,149,164,165,166,169,171,182,183,184,188,195,196,199,200,203,205,208,209,210,211,212,214,215,216,220,221,223,224,],[15,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,47,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,-56,-57,-16,-75,-51,-95,169,-45,-46,-47,-48,171,-29,-84,-54,-70,-53,-78,-79,-80,-82,204,-77,207,15,15,-94,-52,15,221,-88,-89,223,224,-49,-61,-90,-50,-81,]),'ECHO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[21,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,21,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,21,-78,-79,-80,21,-77,21,21,21,21,-94,-52,21,-49,-61,-90,-81,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[22,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,22,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,22,-78,-79,-80,22,-77,22,22,22,22,-94,-52,22,-49,-61,-90,-81,]),'PRINT_R':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[23,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,23,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,23,-78,-79,-80,23,-77,23,23,23,23,-94,-52,23,-49,-61,-90,-81,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,44,45,47,48,59,61,62,63,64,65,66,67,68,74,75,84,91,96,100,102,103,104,105,106,107,112,114,119,120,126,128,137,138,139,141,148,155,164,165,166,167,169,176,182,183,184,196,198,200,203,205,208,209,216,218,220,221,224,227,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,54,54,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,82,83,-50,54,54,54,102,-39,-40,-41,-42,-43,-44,54,-65,122,-76,-28,-30,-71,-72,-73,135,-55,-62,-66,122,-56,-57,-16,54,-75,-51,-95,54,54,54,-29,-84,-54,54,-70,135,-78,-79,-80,-77,54,29,29,-94,-52,29,-49,54,-61,-90,-81,54,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,59,61,63,64,65,66,67,68,69,74,75,84,91,96,100,102,103,104,106,107,112,114,119,120,126,128,137,138,139,141,148,155,164,165,166,167,169,182,183,184,196,198,200,203,205,208,209,216,218,220,221,224,227,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,55,55,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,55,55,55,-39,-40,-41,-42,-43,-44,103,55,-65,123,-76,-28,-30,-71,-72,-73,-55,-62,-66,123,-56,-57,-16,55,-75,-51,-95,55,55,55,-29,-84,-54,55,-70,-78,-79,-80,-77,55,30,30,-94,-52,30,-49,55,-61,-90,-81,55,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,59,61,63,64,65,66,67,68,70,74,75,84,91,96,97,100,102,103,104,106,107,112,114,119,120,126,128,137,138,139,141,148,155,164,165,166,167,169,182,183,184,196,198,200,203,205,208,209,216,218,220,221,224,227,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,56,56,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,89,56,89,-39,-40,-41,-42,-43,-44,104,89,-65,124,-76,-28,132,-30,-71,-72,-73,-55,-62,-66,124,-56,-57,-16,89,-75,-51,-95,89,56,89,-29,-84,-54,89,-70,-78,-79,-80,-77,89,31,31,-94,-52,31,-49,89,-61,-90,-81,89,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,59,61,63,64,65,66,67,68,74,75,84,91,96,100,102,103,104,106,107,112,114,119,120,126,128,137,138,139,141,148,155,164,165,166,167,169,182,183,184,196,198,200,203,205,208,209,216,218,220,221,224,227,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,57,57,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,57,57,57,-39,-40,-41,-42,-43,-44,57,-65,125,-76,-28,-30,-71,-72,-73,-55,-62,-66,125,-56,-57,-16,57,-75,-51,-95,57,57,57,-29,-84,-54,57,-70,-78,-79,-80,-77,57,32,32,-94,-52,32,-49,57,-61,-90,-81,57,]),'SIGNO_DOLAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,59,61,63,64,65,66,67,68,75,79,80,91,96,100,102,103,104,106,107,112,113,115,118,119,120,126,137,138,139,148,152,155,156,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,226,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,58,58,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,90,58,90,-39,-40,-41,-42,-43,-44,-65,116,58,-76,-28,-30,-71,-72,-73,-55,-62,-66,58,153,157,-56,-57,-16,-75,-51,-95,58,174,90,58,-29,-84,-54,-70,58,-78,-79,-80,58,-77,33,58,58,33,-94,-52,33,-49,-61,-90,-81,157,]),'INCREMENTO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,71,75,91,96,100,102,103,104,106,107,112,119,120,126,137,138,139,164,165,166,169,182,183,184,191,196,200,203,205,208,209,216,220,221,224,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,34,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,-78,-79,-80,34,-77,34,34,-94,-52,34,-49,-61,-90,-81,]),'DECREMENTO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,71,75,91,96,100,102,103,104,106,107,112,119,120,126,137,138,139,164,165,166,169,182,183,184,191,196,200,203,205,208,209,216,220,221,224,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,35,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,-78,-79,-80,35,-77,35,35,-94,-52,35,-49,-61,-90,-81,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,61,63,64,65,66,67,68,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,155,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,38,38,-39,-40,-41,-42,-43,-44,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,150,-56,-57,-16,-75,-51,-95,38,-29,-84,-54,-70,150,-78,-79,-80,150,-77,38,150,150,38,-94,-52,38,-49,-61,-90,-81,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,48,61,63,64,65,66,67,68,75,91,96,100,102,103,104,105,106,107,112,119,120,126,137,138,139,155,159,164,165,166,169,182,183,184,196,200,203,205,208,209,216,220,221,224,],[39,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,39,39,-39,-40,-41,-42,-43,-44,-65,-76,-28,-30,-71,-72,-73,136,-55,-62,-66,-56,-57,-16,-75,-51,-95,39,136,-29,-84,-54,-70,-78,-79,-80,-77,39,39,-94,-52,39,-49,-61,-90,-81,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[41,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,41,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,41,-78,-79,-80,41,-77,41,41,41,41,-94,-52,41,-49,-61,-90,-81,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[42,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,42,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,42,-78,-79,-80,42,-77,42,42,42,42,-94,-52,42,-49,-61,-90,-81,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,119,120,126,137,138,139,164,165,166,169,182,183,184,196,200,201,203,205,208,209,216,220,221,224,],[43,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,-78,-79,-80,-77,43,213,43,-94,-52,43,-49,-61,-90,-81,]),'MENOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,71,75,91,96,98,100,102,103,104,106,107,112,117,119,120,122,123,124,126,137,138,139,164,165,166,169,175,182,183,184,196,200,203,205,208,209,216,220,221,224,],[44,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,68,68,68,-24,-63,-64,-58,-59,-50,44,-65,-76,-28,-15,-30,-71,-72,-73,-55,-62,-66,68,-56,-57,68,68,68,-16,-75,-51,-95,-29,-84,-54,-70,44,-78,-79,-80,-77,44,44,-94,-52,44,-49,-61,-90,-81,]),'MAYOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,71,75,91,96,98,100,102,103,104,106,107,112,117,119,120,122,123,124,126,137,138,139,164,165,166,169,175,182,183,184,196,200,203,205,208,209,216,220,221,224,],[45,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,66,66,66,-24,-63,-64,-58,-59,-50,45,-65,-76,-28,-15,-30,-71,-72,-73,-55,-62,-66,66,-56,-57,66,66,66,-16,-75,-51,-95,-29,-84,-54,-70,45,-78,-79,-80,-77,45,45,-94,-52,45,-49,-61,-90,-81,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,113,119,120,126,137,138,139,164,165,166,169,180,182,183,184,189,196,200,201,202,203,205,208,209,216,220,221,224,],[46,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,46,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,46,-78,-79,-80,46,-77,46,46,46,46,-94,-52,46,-49,-61,-90,-81,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,34,35,36,37,47,75,91,96,100,102,103,104,106,107,112,119,120,126,137,138,139,164,165,166,169,182,183,184,196,205,208,209,216,220,221,224,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-31,-32,-33,-37,-38,-21,-22,-23,-24,-63,-64,-58,-59,-50,-65,-76,-28,-30,-71,-72,-73,-55,-62,-66,-56,-57,-16,-75,-51,-95,-29,-84,-54,-70,-78,-79,-80,-77,-94,-52,-60,-49,-61,-90,-81,]),'PUNTO_COMA':([16,50,51,52,53,54,55,56,57,60,82,83,85,86,87,88,89,98,132,133,134,135,137,138,139,161,162,163,170,181,197,205,],[-17,96,-25,-26,-27,-21,-22,-23,-24,100,119,120,126,-18,-19,-20,-23,-15,-83,164,165,166,-75,-51,-95,182,183,184,188,196,205,-94,]),'PAREN_DER':([16,34,35,51,52,53,54,55,56,57,86,87,88,89,98,99,101,102,103,104,107,108,109,110,121,125,129,130,131,132,137,138,139,140,151,160,168,173,177,178,179,185,187,205,217,228,229,],[-17,-63,-64,-25,-26,-27,-21,-22,-23,-24,-18,-19,-20,-23,-15,133,134,-71,-72,-73,-62,137,138,139,158,-74,161,162,163,-83,-75,-51,-95,-91,172,181,-92,190,192,193,194,197,-93,-94,-96,-97,-98,]),'IGUAL':([20,71,98,127,147,154,],[48,105,-15,159,48,176,]),'ASIG_OBJ':([20,71,],[49,-15,]),'PAREN_IZQ':([22,23,39,41,42,46,72,73,78,81,92,93,94,95,136,222,],[59,61,74,79,80,84,108,109,114,118,128,129,130,131,167,226,]),'IDENTICO':([29,30,31,98,117,122,123,124,],[63,63,63,-15,63,63,63,63,]),'DIFERENTE':([29,30,31,98,117,122,123,124,],[64,64,64,-15,64,64,64,64,]),'MAYOR_QUE':([29,30,31,98,117,122,123,124,],[65,65,65,-15,65,65,65,65,]),'MENOR_QUE':([29,30,31,98,117,122,123,124,],[67,67,67,-15,67,67,67,67,]),'VARIABLE':([33,43,58,90,116,153,157,174,213,],[71,81,98,127,154,175,179,191,222,]),'STACK':([38,],[72,]),'QUEUE':([38,150,],[73,73,]),'ELSE':([40,76,204,207,219,],[77,77,-67,-68,-69,]),'ELSEIF':([40,204,207,],[78,-67,78,]),'PUSH':([49,],[92,]),'POP':([49,],[93,]),'COUNT':([49,],[94,]),'CURRENT':([49,],[95,]),'COMA':([54,55,57,89,111,168,206,228,],[-21,-22,-24,-23,141,141,218,141,]),'FLECHA':([54,55,57,89,186,225,],[-21,-22,-24,-23,198,227,]),'PUNTO':([56,],[97,]),'LLAVE_IZQ':([77,158,172,190,192,193,194,],[113,180,189,200,201,202,203,]),'RETURN':([113,180,189,201,202,],[148,148,148,148,148,]),'TRES_PUNTOS':([118,],[156,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,200,203,209,],[1,209,209,209,]),'valor':([0,48,61,155,200,203,209,],[2,85,101,177,2,2,2,]),'asignacion':([0,113,180,189,200,201,202,203,209,],[3,143,143,143,3,143,143,3,3,]),'salida':([0,113,180,189,200,201,202,203,209,],[4,144,144,144,4,144,144,4,4,]),'estructuras_control':([0,113,180,189,200,201,202,203,209,],[5,146,146,146,5,146,146,5,5,]),'estructuras_datos':([0,200,203,209,],[6,6,6,6,]),'funciones':([0,200,203,209,],[7,7,7,7,]),'op_logica':([0,84,114,200,203,209,],[8,121,151,8,8,8,]),'op_pila':([0,200,203,209,],[9,9,9,9,]),'declaracion':([0,79,200,203,209,],[10,115,10,10,10,]),'declaracionp':([0,115,200,203,209,],[11,152,11,11,11,]),'declaracion_s':([0,152,200,203,209,],[12,173,12,12,12,]),'crecimiento':([0,71,191,200,203,209,],[13,107,107,13,13,13,]),'valorc':([0,71,175,200,203,209,],[14,106,106,14,14,14,]),'datos':([0,21,22,48,59,61,74,128,141,148,155,167,198,200,203,209,218,227,],[16,51,51,16,51,16,111,160,168,51,16,186,206,16,16,16,225,228,]),'pila':([0,48,61,155,200,203,209,],[17,86,86,86,17,17,17,]),'cola':([0,48,61,113,155,180,189,200,201,202,203,209,],[18,87,87,149,87,149,149,18,214,149,18,18,]),'arreglo':([0,48,61,155,200,203,209,],[19,88,88,88,19,19,19,]),'decl_variable':([0,21,22,59,80,113,148,156,180,189,200,201,202,203,209,],[20,52,52,52,117,147,52,178,147,147,20,147,147,20,20,]),'if_else':([0,113,180,189,200,201,202,203,209,],[24,24,24,24,24,24,24,24,24,]),'for':([0,113,180,189,200,201,202,203,209,],[25,25,25,25,25,25,25,25,25,]),'whileDeclaracion':([0,113,180,189,200,201,202,203,209,],[26,26,26,26,26,26,26,26,26,]),'funcion_variable':([0,200,203,209,],[27,27,27,27,]),'sinRetorno':([0,200,201,203,209,],[28,28,212,28,28,]),'menor':([0,71,175,200,203,209,],[36,36,36,36,36,36,]),'mayor':([0,71,175,200,203,209,],[37,37,37,37,37,37,]),'if_else_inicio':([0,113,180,189,200,201,202,203,209,],[40,40,40,40,40,40,40,40,40,]),'salidas_pos':([21,22,59,148,],[50,60,99,170,]),'conca_string':([21,22,59,148,],[53,53,53,53,]),'operad_log':([29,30,31,117,122,123,124,],[62,69,70,155,62,69,70,]),'if_else_fin':([40,76,],[75,112,]),'if_else_cuerpo':([40,207,],[76,219,]),'operad_pila':([49,],[91,]),'valores':([74,],[110,]),'repite_valores':([111,168,228,],[140,187,229,]),'bloque':([113,180,189,201,202,],[142,195,199,211,215,]),'retorno':([113,180,189,201,202,],[145,145,145,145,145,]),'valoresflecha':([167,],[185,]),'sentenciasAnidadas':([200,203,209,],[208,216,220,]),'contenido':([201,],[210,]),'repite_valores_f':([206,],[217,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','sintactico.py',8),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','sintactico.py',9),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','sintactico.py',10),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','sintactico.py',11),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','sintactico.py',12),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',13),
  ('instrucciones -> op_logica','instrucciones',1,'p_instrucciones','sintactico.py',14),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','sintactico.py',15),
  ('instrucciones -> declaracion','instrucciones',1,'p_instrucciones','sintactico.py',16),
  ('instrucciones -> declaracionp','instrucciones',1,'p_instrucciones','sintactico.py',17),
  ('instrucciones -> declaracion_s','instrucciones',1,'p_instrucciones','sintactico.py',18),
  ('instrucciones -> crecimiento','instrucciones',1,'p_instrucciones','sintactico.py',19),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','sintactico.py',20),
  ('instrucciones -> LLAVE_DER','instrucciones',1,'p_instrucciones','sintactico.py',21),
  ('decl_variable -> SIGNO_DOLAR VARIABLE','decl_variable',2,'p_decl_variable','sintactico.py',28),
  ('asignacion -> decl_variable IGUAL valor PUNTO_COMA','asignacion',4,'p_asignacion','sintactico.py',32),
  ('valor -> datos','valor',1,'p_valor','sintactico.py',38),
  ('valor -> pila','valor',1,'p_valor','sintactico.py',39),
  ('valor -> cola','valor',1,'p_valor','sintactico.py',40),
  ('valor -> arreglo','valor',1,'p_valor','sintactico.py',41),
  ('datos -> ENTERO','datos',1,'p_datos','sintactico.py',46),
  ('datos -> FLOTANTE','datos',1,'p_datos','sintactico.py',47),
  ('datos -> STRING','datos',1,'p_datos','sintactico.py',48),
  ('datos -> BOOLEANO','datos',1,'p_datos','sintactico.py',49),
  ('salidas_pos -> datos','salidas_pos',1,'p_salidas_pos','sintactico.py',54),
  ('salidas_pos -> decl_variable','salidas_pos',1,'p_salidas_pos','sintactico.py',55),
  ('salidas_pos -> conca_string','salidas_pos',1,'p_salidas_pos','sintactico.py',56),
  ('salida -> ECHO salidas_pos PUNTO_COMA','salida',3,'p_salida_forma1','sintactico.py',62),
  ('salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','sintactico.py',65),
  ('salida -> PRINT salidas_pos PUNTO_COMA','salida',3,'p_salida_forma3','sintactico.py',68),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','sintactico.py',75),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintactico.py',76),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','sintactico.py',77),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','sintactico.py',81),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','sintactico.py',82),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','sintactico.py',83),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','sintactico.py',87),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','sintactico.py',88),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','sintactico.py',93),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','sintactico.py',94),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','sintactico.py',95),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',96),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','sintactico.py',97),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',98),
  ('bloque -> asignacion','bloque',1,'p_bloque','sintactico.py',115),
  ('bloque -> salida','bloque',1,'p_bloque','sintactico.py',116),
  ('bloque -> retorno','bloque',1,'p_bloque','sintactico.py',117),
  ('bloque -> estructuras_control','bloque',1,'p_bloque','sintactico.py',118),
  ('sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas','sinRetorno',8,'p_sinretorno','sintactico.py',125),
  ('sinRetorno -> cola LLAVE_DER','sinRetorno',2,'p_sinretorno','sintactico.py',126),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','sintactico.py',132),
  ('for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas','for',8,'p_for','sintactico.py',137),
  ('for -> cola LLAVE_DER','for',2,'p_for','sintactico.py',138),
  ('declaracion -> SIGNO_DOLAR VARIABLE IGUAL ENTERO PUNTO_COMA','declaracion',5,'p_declaracion','sintactico.py',140),
  ('declaracionp -> SIGNO_DOLAR VARIABLE valorc','declaracionp',3,'p_declaracionM','sintactico.py',142),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','sintactico.py',145),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','sintactico.py',148),
  ('valorc -> menor','valorc',1,'p_valorC','sintactico.py',151),
  ('valorc -> mayor','valorc',1,'p_valorC','sintactico.py',152),
  ('sentenciasAnidadas -> instrucciones','sentenciasAnidadas',1,'p_sentenciasAnidadas','sintactico.py',154),
  ('sentenciasAnidadas -> instrucciones sentenciasAnidadas','sentenciasAnidadas',2,'p_sentenciasAnidadas','sintactico.py',155),
  ('declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento','declaracion_s',3,'p_declaracionsimple','sintactico.py',159),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',162),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',163),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','sintactico.py',172),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','sintactico.py',176),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','sintactico.py',180),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','sintactico.py',184),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo','if_else_cuerpo',8,'p_if_else_cuerpo','sintactico.py',185),
  ('if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER','if_else_fin',4,'p_if_else_fin','sintactico.py',190),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','sintactico.py',194),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','sintactico.py',195),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','sintactico.py',196),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','sintactico.py',197),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','sintactico.py',205),
  ('op_pila -> decl_variable ASIG_OBJ operad_pila','op_pila',3,'p_op_pila','sintactico.py',210),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','sintactico.py',214),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',215),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',216),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',217),
  ('funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',9,'p_funcion_variable','sintactico.py',225),
  ('retorno -> RETURN salidas_pos PUNTO_COMA','retorno',3,'p_retorno','sintactico.py',230),
  ('conca_string -> STRING PUNTO STRING','conca_string',3,'p_conca_string','sintactico.py',244),
  ('salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA','salida',5,'p_salida_obj','sintactico.py',249),
  ('salidas_pos_obj -> valor','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',252),
  ('salidas_pos_obj -> decl_variable','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',253),
  ('salidas_pos_obj -> conca_string','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',254),
  ('contenido -> bloque','contenido',1,'p_contenido','sintactico.py',261),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','sintactico.py',262),
  ('whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',9,'p_whileDeclaracion','sintactico.py',266),
  ('valores -> datos repite_valores','valores',2,'p_valoresSeparadosComa','sintactico.py',271),
  ('repite_valores -> COMA datos','repite_valores',2,'p_repite_valoresSeparadosComa','sintactico.py',274),
  ('repite_valores -> COMA datos repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','sintactico.py',275),
  ('arreglo -> SIGNO_DOLAR VARIABLE IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',8,'p_arreglo_asociativo','sintactico.py',278),
  ('arreglo -> ARRAY PAREN_IZQ valores PAREN_DER','arreglo',4,'p_arreglo_parentesis','sintactico.py',283),
  ('valoresflecha -> datos FLECHA datos repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','sintactico.py',288),
  ('repite_valores_f -> COMA datos FLECHA datos','repite_valores_f',4,'p_repite_valoresSeparados_flecha','sintactico.py',292),
  ('repite_valores_f -> COMA datos FLECHA datos repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','sintactico.py',293),
]
