
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_OBJ ASIG_REFER BOOLEANO BREAK CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR VARIABLE WHILEinstrucciones : valor\n                    | asignacion\n                    | concatenacion\n                    | salida\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones\n                    | op_pila\n                    | valorc\n                    | multiples\n                    | LLAVE_DER\n                    | llamadaFuncion\n  decl_variable : SIGNO_DOLAR VARIABLEasignacion : decl_variable IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n          | arreglo\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salidas_pos : datos\n                | decl_variable\n                | conca_string\n  multiples : salidas_pos\n                | salidas_pos multiplessalida : ECHO salidas_pos PUNTO_COMAsalida : PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMAsalida : PRINT salidas_pos PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n                | functConPar\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n  operad_arit : SUMA\n                | RESTA\n                | MULTIPL\n                | DIVISION\n                | DIVISION_ENT\n                | POTENCIA\n                | MODULO\n   bloque : asignacion\n              | salida\n              | retorno\n              | estructuras_control\n              | asignacion bloque\n              | salida bloque\n              | retorno bloque\n              | estructuras_control bloque\n              | multiples \n              | multiples bloque\n  sinRetorno : FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DER cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DERsentenciasAnidadas : instrucciones \n\t\t\t\t\t\t| instrucciones sentenciasAnidadas\n\tdeclaracionp :  SIGNO_DOLAR VARIABLE valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayordeclaracion_s : SIGNO_DOLAR VARIABLE crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER\n                    |  ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo\n  if_else_fin : ELSE LLAVE_IZQ bloque LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n                | SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE\n                | SIGNO_DOLAR VARIABLE operad_log ENTERO\n                | SIGNO_DOLAR VARIABLE operad_log FLOTANTE\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : decl_variable ASIG_OBJ operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN salidas_pos PUNTO_COMAconcatenacion : decl_variable ASIG_CONCA datos PUNTO_COMAconca_string : STRING PUNTO STRINGsalida : PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA salidas_pos_obj : valor\n                | decl_variable\n                | conca_string\n  contenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : datos repite_valores repite_valores : COMA datos\n                        | COMA datos repite_valores\n    arreglo : ARRAY PAREN_IZQ valores PAREN_DER valoresflecha : datos FLECHA datos repite_valores_f repite_valores_f : COMA datos FLECHA datos\n                        | COMA datos FLECHA datos repite_valores\n  arreglo : decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMAparametros : datos\n          | SIGNO_DOLAR VARIABLE\n  parametrosR : parametros\n                    | parametros repite_parametros repite_parametros : COMA parametros\n                        | COMA parametros repite_parametros\n    functConPar : FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DERllamadaFuncion : VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA'
    
_lr_action_items = {'LLAVE_DER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,117,119,130,131,132,135,136,137,138,139,140,141,143,171,172,173,176,177,178,179,180,181,183,201,202,203,206,215,220,222,223,224,230,231,237,238,239,240,241,243,244,245,246,249,250,252,253,],[12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,47,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,-71,-72,-14,-99,-91,-65,-111,176,-53,-54,-55,-56,-61,-24,183,-29,-101,-123,-83,-57,-58,-59,-60,-62,-67,-94,-95,-96,-98,232,-115,-93,236,12,12,246,-66,12,250,-105,-106,252,253,-63,-122,-69,-107,-64,-97,]),'ECHO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[19,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,19,-71,-72,-14,-99,-91,-65,-111,19,19,19,19,19,-24,-29,-101,-123,-83,-67,19,-94,-95,-96,-98,19,19,-115,-93,19,19,19,19,-66,19,-63,-122,-69,-107,-67,-97,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[21,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,21,-71,-72,-14,-99,-91,-65,-111,21,21,21,21,21,-24,-29,-101,-123,-83,-67,21,-94,-95,-96,-98,21,21,-115,-93,21,21,21,21,-66,21,-63,-122,-69,-107,-67,-97,]),'PRINT_R':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[22,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,22,-71,-72,-14,-99,-91,-65,-111,22,22,22,22,22,-24,-29,-101,-123,-83,-67,22,-94,-95,-96,-98,22,22,-115,-93,22,22,22,22,-66,22,-63,-122,-69,-107,-67,-97,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,38,42,45,47,52,53,54,63,64,83,88,90,95,96,101,108,109,115,117,119,130,131,132,147,157,171,172,173,176,186,201,202,203,216,220,222,224,230,237,238,242,245,246,249,250,253,257,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,63,70,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,129,-100,-79,-71,-72,163,-14,-99,-91,-65,-111,187,190,-29,-101,-123,-83,209,-94,-95,-96,233,-115,-93,31,31,-66,31,251,-63,-122,-69,-107,-97,259,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,43,44,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,117,118,119,120,128,130,131,132,134,136,137,138,139,140,141,142,148,149,150,151,152,153,154,155,160,171,172,173,176,183,192,196,197,199,201,202,203,206,207,214,220,222,224,228,229,230,235,237,238,245,246,249,250,252,253,254,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,32,32,32,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,71,72,-25,-64,32,32,-23,-24,-27,32,32,32,32,-13,-78,111,-92,-28,-30,-100,-79,32,111,32,-71,-72,-14,32,-99,32,32,-91,-65,-111,32,32,32,32,32,32,-24,32,32,32,-40,-41,-42,-43,-44,-45,193,-29,-101,-123,-83,-67,32,217,32,32,-94,-95,-96,-98,32,32,-115,-93,32,32,32,32,32,-66,32,-63,-122,-69,-107,-67,-97,32,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,117,118,119,120,128,130,131,132,134,136,137,138,139,140,141,142,148,149,150,151,152,153,154,155,161,171,172,173,176,183,192,196,197,199,201,202,203,206,207,214,220,222,224,228,229,230,235,237,238,245,246,249,250,252,253,254,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,33,33,33,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,33,33,-23,-24,-27,33,33,33,33,-13,-78,112,-92,-28,-30,-100,-79,33,112,33,-71,-72,-14,33,-99,33,33,-91,-65,-111,33,33,33,33,33,33,-24,33,33,33,-40,-41,-42,-43,-44,-45,194,-29,-101,-123,-83,-67,33,218,33,33,-94,-95,-96,-98,33,33,-115,-93,33,33,33,33,33,-66,33,-63,-122,-69,-107,-67,-97,33,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,59,62,63,64,73,83,88,90,96,101,102,103,107,108,109,117,118,119,120,128,130,131,132,134,136,137,138,139,140,141,142,148,149,150,151,152,153,154,155,162,171,172,173,176,183,192,197,199,201,202,203,206,207,214,220,222,224,228,229,230,235,237,238,245,246,249,250,252,253,254,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,34,34,34,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,81,81,-23,-24,-27,34,81,81,96,81,-13,-78,113,-92,-28,-30,-100,-79,34,113,81,-71,-72,-14,81,-99,81,81,-91,-65,-111,81,34,34,34,34,34,-24,34,81,81,-40,-41,-42,-43,-44,-45,195,-29,-101,-123,-83,-67,34,81,81,-94,-95,-96,-98,34,34,-115,-93,34,34,34,34,81,-66,34,-63,-122,-69,-107,-67,-97,81,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,117,118,119,120,128,130,131,132,134,136,137,138,139,140,141,142,148,149,150,151,152,153,154,155,171,172,173,176,183,192,197,199,201,202,203,206,207,214,220,222,224,228,229,230,235,237,238,245,246,249,250,252,253,254,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,35,35,35,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,35,35,-23,-24,-27,35,35,35,35,-13,-78,114,-92,-28,-30,-100,-79,35,114,35,-71,-72,-14,35,-99,35,35,-91,-65,-111,35,35,35,35,35,35,-24,35,35,35,-40,-41,-42,-43,-44,-45,-29,-101,-123,-83,-67,35,35,35,-94,-95,-96,-98,35,35,-115,-93,35,35,35,35,35,-66,35,-63,-122,-69,-107,-67,-97,35,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,57,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,148,149,150,151,152,153,154,155,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,36,-23,-24,-27,36,-13,-78,-92,-28,-30,-100,-79,144,-71,-72,-14,-99,-91,-65,-111,144,144,144,144,144,-24,36,36,-40,-41,-42,-43,-44,-45,-29,-101,-123,-83,-67,144,-94,-95,-96,-98,144,144,-115,-93,36,144,144,36,-66,36,-63,-122,-69,-107,-67,-97,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,57,63,64,83,88,90,96,101,108,109,116,117,119,130,131,132,148,149,150,151,152,153,154,155,171,172,173,176,201,202,203,220,222,224,230,237,238,245,246,249,250,253,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,76,-23,-24,-27,37,-13,-78,-92,-28,-30,-100,-79,-71,-72,164,-14,-99,-91,-65,-111,37,37,-40,-41,-42,-43,-44,-45,-29,-101,-123,-83,-94,-95,-96,-115,-93,37,37,-66,37,-63,-122,-69,-107,-97,]),'SIGNO_DOLAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,55,57,58,63,64,68,69,73,83,88,90,96,101,102,103,104,107,108,109,117,119,128,130,131,132,136,137,138,139,140,141,142,146,148,149,150,151,152,153,154,155,156,171,172,173,176,183,192,196,201,202,203,206,207,210,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,255,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,38,38,38,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,38,-23,-24,-27,38,38,95,-13,-78,38,38,115,-92,-28,-30,-100,-79,38,115,147,157,-71,-72,-14,-99,95,-91,-65,-111,38,38,38,38,38,-24,38,186,38,38,-40,-41,-42,-43,-44,-45,38,-29,-101,-123,-83,-67,38,216,-94,-95,-96,-98,38,-70,38,-115,-93,38,38,38,38,-66,38,-63,-122,-69,-107,-67,-97,257,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[40,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,40,-71,-72,-14,-99,-91,-65,-111,40,40,40,40,40,-24,-29,-101,-123,-83,-67,40,-94,-95,-96,-98,40,40,-115,-93,40,40,40,40,-66,40,-63,-122,-69,-107,-67,-97,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[41,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,41,-71,-72,-14,-99,-91,-65,-111,41,41,41,41,41,-24,-29,-101,-123,-83,-67,41,-94,-95,-96,-98,41,41,-115,-93,41,41,41,41,-66,41,-63,-122,-69,-107,-67,-97,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,117,119,130,131,132,171,172,173,176,201,202,203,220,222,224,228,230,237,238,245,246,249,250,253,],[42,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,-71,-72,-14,-99,-91,-65,-111,-29,-101,-123,-83,-94,-95,-96,-115,-93,42,242,42,-66,42,-63,-122,-69,-107,-97,]),'MENOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,106,108,109,111,112,113,117,119,130,131,132,163,171,172,173,176,187,201,202,203,220,222,224,230,237,238,245,246,249,250,253,],[43,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,155,-71,-72,155,155,155,-14,-99,-91,-65,-111,155,-29,-101,-123,-83,43,-94,-95,-96,-115,-93,43,43,-66,43,-63,-122,-69,-107,-97,]),'MAYOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,106,108,109,111,112,113,117,119,130,131,132,163,171,172,173,176,187,201,202,203,220,222,224,230,237,238,245,246,249,250,253,],[44,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,153,-71,-72,153,153,153,-14,-99,-91,-65,-111,153,-29,-101,-123,-83,44,-94,-95,-96,-115,-93,44,44,-66,44,-63,-122,-69,-107,-97,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,224,228,229,230,237,238,245,246,249,250,252,253,],[46,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,46,-71,-72,-14,-99,-91,-65,-111,46,46,46,46,46,-24,-29,-101,-123,-83,-67,46,-94,-95,-96,-98,46,46,-115,-93,46,46,46,46,-66,46,-63,-122,-69,-107,-67,-97,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,117,119,130,131,132,171,172,173,176,201,202,203,220,222,237,238,245,246,249,250,253,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,-71,-72,-14,-99,-91,-65,-111,-29,-101,-123,-83,-94,-95,-96,-115,-93,-66,-68,-63,-122,-69,-107,-97,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,117,119,130,131,132,136,137,138,139,140,141,171,172,173,176,183,192,201,202,203,206,207,214,220,222,228,229,237,238,245,246,249,250,252,253,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-92,-28,-30,-100,-79,142,-71,-72,-14,-99,-91,-65,-111,142,142,142,142,142,-24,-29,-101,-123,-83,-67,142,-94,-95,-96,-98,142,142,-115,-93,142,142,-66,-68,-63,-122,-69,-107,-67,-97,]),'IGUAL':([18,63,74,105,141,],[48,-13,116,148,148,]),'ASIG_CONCA':([18,63,],[49,-13,]),'ASIG_OBJ':([18,63,],[50,-13,]),'PAREN_IZQ':([21,22,31,37,40,41,46,60,61,67,70,76,84,85,86,87,164,251,],[55,57,58,62,68,69,73,97,98,103,107,118,120,121,122,123,197,255,]),'PUNTO_COMA':([32,33,34,35,45,51,52,53,56,63,71,72,75,77,78,79,80,81,82,96,124,125,126,130,131,132,168,169,170,182,198,200,220,],[-19,-20,-21,-22,-25,88,-23,-24,90,-13,108,109,117,-15,-16,-17,-18,-21,119,-100,171,172,173,-91,-65,-111,201,202,203,206,220,222,-115,]),'PAREN_DER':([32,33,34,35,45,52,53,63,77,78,79,80,81,89,91,92,93,94,96,97,98,99,110,114,121,122,123,127,129,130,131,132,133,145,158,165,167,174,175,185,188,189,190,193,194,195,204,205,217,218,220,225,226,227,233,234,256,258,259,],[-19,-20,-21,-22,-25,-23,-24,-13,-15,-16,-17,-18,-21,124,125,126,-118,-116,-100,130,131,132,159,-87,168,169,170,-119,-117,-91,-65,-111,-108,184,191,198,200,-120,-109,208,211,212,213,-84,-85,-86,-121,-110,-89,-90,-115,-75,-76,-77,-88,-112,-113,-114,213,]),'COMA':([32,33,35,81,93,94,100,129,166,174,175,190,221,256,],[-19,-20,-22,-21,128,-116,134,-117,134,128,134,-117,235,134,]),'FLECHA':([32,33,35,81,166,219,247,],[-19,-20,-22,-21,199,199,254,]),'PUNTO':([34,],[59,]),'STACK':([36,],[60,]),'QUEUE':([36,144,],[61,61,]),'ELSE':([39,65,232,236,248,],[66,66,-80,-81,-82,]),'ELSEIF':([39,232,236,],[67,-80,67,]),'PUSH':([50,],[84,]),'POP':([50,],[85,]),'COUNT':([50,],[86,]),'CURRENT':([50,],[87,]),'IDENTICO':([63,106,111,112,113,163,],[-13,150,150,150,150,150,]),'DIFERENTE':([63,106,111,112,113,163,],[-13,151,151,151,151,151,]),'MAYOR_QUE':([63,106,111,112,113,163,],[-13,152,152,152,152,152,]),'MENOR_QUE':([63,106,111,112,113,163,],[-13,154,154,154,154,154,]),'LLAVE_IZQ':([66,159,184,191,208,211,212,213,],[102,192,207,214,224,228,229,230,]),'TRES_PUNTOS':([107,],[156,]),'INCREMENTO':([209,],[226,]),'DECREMENTO':([209,],[227,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,224,230,238,],[1,238,238,238,]),'valor':([0,48,57,148,149,224,230,238,],[2,75,91,75,188,2,2,2,]),'asignacion':([0,68,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[3,104,136,136,136,136,136,136,136,136,136,3,136,136,3,3,]),'concatenacion':([0,224,230,238,],[4,4,4,4,]),'salida':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[5,137,137,137,137,137,137,137,137,137,5,137,137,5,5,]),'estructuras_control':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[6,139,139,139,139,139,139,139,139,139,6,139,139,6,6,]),'estructuras_datos':([0,224,230,238,],[7,7,7,7,]),'funciones':([0,224,230,238,],[8,8,8,8,]),'op_pila':([0,224,230,238,],[9,9,9,9,]),'valorc':([0,187,224,230,238,],[10,210,10,10,10,]),'multiples':([0,20,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[11,54,140,140,140,140,140,140,140,140,140,11,140,140,11,11,]),'llamadaFuncion':([0,224,230,238,],[13,13,13,13,]),'datos':([0,19,20,21,48,49,55,57,58,62,102,107,118,120,128,134,136,137,138,139,140,142,148,149,192,197,199,207,214,224,228,229,230,235,238,254,],[14,52,52,52,77,82,52,77,94,100,52,94,166,167,94,175,52,52,52,52,52,52,77,77,52,219,221,52,52,14,52,52,14,247,14,256,]),'pila':([0,48,57,148,149,224,230,238,],[15,78,78,78,78,15,15,15,]),'cola':([0,48,57,102,136,137,138,139,140,148,149,192,207,214,224,228,229,230,238,],[16,79,79,143,143,143,143,143,143,79,79,143,143,143,16,243,143,16,16,]),'arreglo':([0,48,57,148,149,224,230,238,],[17,80,80,80,80,17,17,17,]),'decl_variable':([0,19,20,21,48,55,57,68,69,102,136,137,138,139,140,142,148,149,156,192,207,214,224,228,229,230,238,],[18,53,53,53,74,53,74,105,106,141,141,141,141,141,141,53,74,74,189,141,141,141,18,141,141,18,18,]),'salidas_pos':([0,19,20,21,55,102,136,137,138,139,140,142,192,207,214,224,228,229,230,238,],[20,51,20,56,89,20,20,20,20,20,20,182,20,20,20,20,20,20,20,20,]),'if_else':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'for':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'whileDeclaracion':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_variable':([0,224,230,238,],[26,26,26,26,]),'sinRetorno':([0,224,228,230,238,],[27,27,241,27,27,]),'functConPar':([0,224,230,238,],[28,28,28,28,]),'menor':([0,187,224,230,238,],[29,29,29,29,29,]),'mayor':([0,187,224,230,238,],[30,30,30,30,30,]),'if_else_inicio':([0,102,136,137,138,139,140,192,207,214,224,228,229,230,238,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'conca_string':([0,19,20,21,55,102,136,137,138,139,140,142,192,207,214,224,228,229,230,238,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'if_else_fin':([39,65,],[64,101,]),'if_else_cuerpo':([39,236,],[65,248,]),'operad_pila':([50,],[83,]),'parametrosR':([58,107,],[92,158,]),'parametros':([58,107,128,],[93,93,174,]),'valores':([62,118,],[99,99,]),'op_logica':([73,103,],[110,145,]),'repite_parametros':([93,174,],[127,204,]),'repite_valores':([100,166,175,256,],[133,133,205,258,]),'bloque':([102,136,137,138,139,140,192,207,214,228,229,],[135,177,178,179,180,181,215,223,231,240,244,]),'retorno':([102,136,137,138,139,140,192,207,214,228,229,],[138,138,138,138,138,138,138,138,138,138,138,]),'declaracionp':([104,],[146,]),'operad_log':([106,111,112,113,163,],[149,160,161,162,196,]),'valoresflecha':([118,197,],[165,165,]),'declaracion_s':([146,],[185,]),'crecimiento':([209,],[225,]),'repite_valores_f':([221,],[234,]),'sentenciasAnidadas':([224,230,238,],[237,245,249,]),'contenido':([228,],[239,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','sintactico.py',8),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','sintactico.py',9),
  ('instrucciones -> concatenacion','instrucciones',1,'p_instrucciones','sintactico.py',10),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','sintactico.py',11),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','sintactico.py',12),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','sintactico.py',13),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',14),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','sintactico.py',15),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','sintactico.py',16),
  ('instrucciones -> multiples','instrucciones',1,'p_instrucciones','sintactico.py',17),
  ('instrucciones -> LLAVE_DER','instrucciones',1,'p_instrucciones','sintactico.py',18),
  ('instrucciones -> llamadaFuncion','instrucciones',1,'p_instrucciones','sintactico.py',19),
  ('decl_variable -> SIGNO_DOLAR VARIABLE','decl_variable',2,'p_decl_variable','sintactico.py',24),
  ('asignacion -> decl_variable IGUAL valor PUNTO_COMA','asignacion',4,'p_asignacion','sintactico.py',28),
  ('valor -> datos','valor',1,'p_valor','sintactico.py',34),
  ('valor -> pila','valor',1,'p_valor','sintactico.py',35),
  ('valor -> cola','valor',1,'p_valor','sintactico.py',36),
  ('valor -> arreglo','valor',1,'p_valor','sintactico.py',37),
  ('datos -> ENTERO','datos',1,'p_datos','sintactico.py',42),
  ('datos -> FLOTANTE','datos',1,'p_datos','sintactico.py',43),
  ('datos -> STRING','datos',1,'p_datos','sintactico.py',44),
  ('datos -> BOOLEANO','datos',1,'p_datos','sintactico.py',45),
  ('salidas_pos -> datos','salidas_pos',1,'p_salidas_pos','sintactico.py',50),
  ('salidas_pos -> decl_variable','salidas_pos',1,'p_salidas_pos','sintactico.py',51),
  ('salidas_pos -> conca_string','salidas_pos',1,'p_salidas_pos','sintactico.py',52),
  ('multiples -> salidas_pos','multiples',1,'p_multiples','sintactico.py',55),
  ('multiples -> salidas_pos multiples','multiples',2,'p_multiples','sintactico.py',56),
  ('salida -> ECHO salidas_pos PUNTO_COMA','salida',3,'p_salida_forma1','sintactico.py',60),
  ('salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','sintactico.py',63),
  ('salida -> PRINT salidas_pos PUNTO_COMA','salida',3,'p_salida_forma3','sintactico.py',66),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','sintactico.py',73),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintactico.py',74),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','sintactico.py',75),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','sintactico.py',79),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','sintactico.py',80),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','sintactico.py',81),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','sintactico.py',85),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','sintactico.py',86),
  ('funciones -> functConPar','funciones',1,'p_funciones','sintactico.py',87),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','sintactico.py',92),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','sintactico.py',93),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','sintactico.py',94),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',95),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','sintactico.py',96),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',97),
  ('operad_arit -> SUMA','operad_arit',1,'p_operad_arit','sintactico.py',102),
  ('operad_arit -> RESTA','operad_arit',1,'p_operad_arit','sintactico.py',103),
  ('operad_arit -> MULTIPL','operad_arit',1,'p_operad_arit','sintactico.py',104),
  ('operad_arit -> DIVISION','operad_arit',1,'p_operad_arit','sintactico.py',105),
  ('operad_arit -> DIVISION_ENT','operad_arit',1,'p_operad_arit','sintactico.py',106),
  ('operad_arit -> POTENCIA','operad_arit',1,'p_operad_arit','sintactico.py',107),
  ('operad_arit -> MODULO','operad_arit',1,'p_operad_arit','sintactico.py',108),
  ('bloque -> asignacion','bloque',1,'p_bloque','sintactico.py',114),
  ('bloque -> salida','bloque',1,'p_bloque','sintactico.py',115),
  ('bloque -> retorno','bloque',1,'p_bloque','sintactico.py',116),
  ('bloque -> estructuras_control','bloque',1,'p_bloque','sintactico.py',117),
  ('bloque -> asignacion bloque','bloque',2,'p_bloque','sintactico.py',118),
  ('bloque -> salida bloque','bloque',2,'p_bloque','sintactico.py',119),
  ('bloque -> retorno bloque','bloque',2,'p_bloque','sintactico.py',120),
  ('bloque -> estructuras_control bloque','bloque',2,'p_bloque','sintactico.py',121),
  ('bloque -> multiples','bloque',1,'p_bloque','sintactico.py',122),
  ('bloque -> multiples bloque','bloque',2,'p_bloque','sintactico.py',123),
  ('sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas','sinRetorno',8,'p_sinretorno','sintactico.py',129),
  ('sinRetorno -> cola LLAVE_DER','sinRetorno',2,'p_sinretorno','sintactico.py',130),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','sintactico.py',134),
  ('for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas','for',8,'p_for','sintactico.py',139),
  ('for -> cola LLAVE_DER','for',2,'p_for','sintactico.py',140),
  ('sentenciasAnidadas -> instrucciones','sentenciasAnidadas',1,'p_sentenciasAnidadas','sintactico.py',142),
  ('sentenciasAnidadas -> instrucciones sentenciasAnidadas','sentenciasAnidadas',2,'p_sentenciasAnidadas','sintactico.py',143),
  ('declaracionp -> SIGNO_DOLAR VARIABLE valorc','declaracionp',3,'p_declaracionM','sintactico.py',147),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','sintactico.py',150),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','sintactico.py',153),
  ('valorc -> menor','valorc',1,'p_valorC','sintactico.py',156),
  ('valorc -> mayor','valorc',1,'p_valorC','sintactico.py',157),
  ('declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento','declaracion_s',3,'p_declaracionsimple','sintactico.py',160),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',163),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',164),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','sintactico.py',173),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','sintactico.py',177),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','sintactico.py',181),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','sintactico.py',185),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo','if_else_cuerpo',8,'p_if_else_cuerpo','sintactico.py',186),
  ('if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER','if_else_fin',4,'p_if_else_fin','sintactico.py',191),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','sintactico.py',195),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','sintactico.py',196),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','sintactico.py',197),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','sintactico.py',198),
  ('op_logica -> SIGNO_DOLAR VARIABLE operad_log SIGNO_DOLAR VARIABLE','op_logica',5,'p_op_logica','sintactico.py',199),
  ('op_logica -> SIGNO_DOLAR VARIABLE operad_log ENTERO','op_logica',4,'p_op_logica','sintactico.py',200),
  ('op_logica -> SIGNO_DOLAR VARIABLE operad_log FLOTANTE','op_logica',4,'p_op_logica','sintactico.py',201),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','sintactico.py',209),
  ('op_pila -> decl_variable ASIG_OBJ operad_pila','op_pila',3,'p_op_pila','sintactico.py',214),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','sintactico.py',218),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',219),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',220),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',221),
  ('funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',9,'p_funcion_variable','sintactico.py',229),
  ('retorno -> RETURN salidas_pos PUNTO_COMA','retorno',3,'p_retorno','sintactico.py',234),
  ('concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA','concatenacion',4,'p_concatenacion','sintactico.py',245),
  ('conca_string -> STRING PUNTO STRING','conca_string',3,'p_conca_string','sintactico.py',248),
  ('salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA','salida',5,'p_salida_obj','sintactico.py',253),
  ('salidas_pos_obj -> valor','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',256),
  ('salidas_pos_obj -> decl_variable','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',257),
  ('salidas_pos_obj -> conca_string','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',258),
  ('contenido -> bloque','contenido',1,'p_contenido','sintactico.py',265),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','sintactico.py',266),
  ('whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',9,'p_whileDeclaracion','sintactico.py',270),
  ('valores -> datos repite_valores','valores',2,'p_valoresSeparadosComa','sintactico.py',275),
  ('repite_valores -> COMA datos','repite_valores',2,'p_repite_valoresSeparadosComa','sintactico.py',278),
  ('repite_valores -> COMA datos repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','sintactico.py',279),
  ('arreglo -> ARRAY PAREN_IZQ valores PAREN_DER','arreglo',4,'p_arreglo_parentesis','sintactico.py',287),
  ('valoresflecha -> datos FLECHA datos repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','sintactico.py',292),
  ('repite_valores_f -> COMA datos FLECHA datos','repite_valores_f',4,'p_repite_valoresSeparados_flecha','sintactico.py',296),
  ('repite_valores_f -> COMA datos FLECHA datos repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','sintactico.py',297),
  ('arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',7,'p_arreglo_asociativo','sintactico.py',301),
  ('parametros -> datos','parametros',1,'p_parametros','sintactico.py',307),
  ('parametros -> SIGNO_DOLAR VARIABLE','parametros',2,'p_parametros','sintactico.py',308),
  ('parametrosR -> parametros','parametrosR',1,'p_parametrosR','sintactico.py',312),
  ('parametrosR -> parametros repite_parametros','parametrosR',2,'p_parametrosR','sintactico.py',313),
  ('repite_parametros -> COMA parametros','repite_parametros',2,'p_repite_parametros','sintactico.py',318),
  ('repite_parametros -> COMA parametros repite_parametros','repite_parametros',3,'p_repite_parametros','sintactico.py',319),
  ('functConPar -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER','functConPar',8,'p_functConPar','sintactico.py',323),
  ('llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA','llamadaFuncion',5,'p_llamadaFuncion','sintactico.py',326),
]
