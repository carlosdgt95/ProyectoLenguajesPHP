
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_OBJ ASIG_REFER BOOLEANO BREAK CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR VARIABLE WHILEinstrucciones : valor\n                    | asignacion\n                    | concatenacion\n                    | salida\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones\n                    | op_pila\n                    | valorc\n                    | multiples\n  decl_variable : SIGNO_DOLAR VARIABLEasignacion : decl_variable IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n          | arreglo\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salidas_pos : datos\n                | decl_variable\n                | conca_string\n  multiples : salidas_pos\n                | salidas_pos multiplessalida : ECHO salidas_pos PUNTO_COMAsalida : PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMAsalida : PRINT salidas_pos PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n  operad_arit : SUMA\n                | RESTA\n                | MULTIPL\n                | DIVISION\n                | DIVISION_ENT\n                | POTENCIA\n                | MODULO\n   bloque : asignacion\n              | salida\n              | retorno\n              | estructuras_control\n              | asignacion bloque\n              | salida bloque\n              | retorno bloque\n              | estructuras_control bloque\n              | multiples \n              | multiples bloque\n   cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas\n                                                                                  | cola LLAVE_DERsentenciasAnidadas : instrucciones \n\t\t\t\t\t\t| instrucciones sentenciasAnidadas\n\tdeclaracionp :  SIGNO_DOLAR VARIABLE valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayordeclaracion_s : SIGNO_DOLAR VARIABLE crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER\n                    |  ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo\n  if_else_fin : ELSE LLAVE_IZQ bloque LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : decl_variable ASIG_OBJ operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN salidas_pos PUNTO_COMAconcatenacion : decl_variable ASIG_CONCA datos PUNTO_COMAconca_string : STRING PUNTO STRINGsalida : PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA salidas_pos_obj : valor\n                | decl_variable\n                | conca_string\n  contenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : datos repite_valores repite_valores : COMA datos\n                        | COMA datos repite_valores\n    arreglo : ARRAY PAREN_IZQ valores PAREN_DER valoresflecha : datos FLECHA datos repite_valores_f repite_valores_f : COMA datos FLECHA datos\n                        | COMA datos FLECHA datos repite_valores\n  arreglo : decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMAsinRetorno : FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas\n                                                                                  | cola LLAVE_DER'
    
_lr_action_items = {'ECHO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[17,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,17,-66,-67,-12,-91,-83,-60,-103,17,17,17,17,17,-22,-27,-93,-78,-62,17,-86,-87,-88,-90,17,-107,-85,17,17,17,17,-61,17,-108,-64,-99,-62,-89,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[19,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,19,-66,-67,-12,-91,-83,-60,-103,19,19,19,19,19,-22,-27,-93,-78,-62,19,-86,-87,-88,-90,19,-107,-85,19,19,19,19,-61,19,-108,-64,-99,-62,-89,]),'PRINT_R':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,20,-66,-67,-12,-91,-83,-60,-103,20,20,20,20,20,-22,-27,-93,-78,-62,20,-86,-87,-88,-90,20,-107,-85,20,20,20,20,-61,20,-108,-64,-99,-62,-89,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,39,40,41,43,44,45,48,49,50,51,53,57,58,59,68,78,83,85,87,92,93,94,99,100,107,108,109,110,116,117,118,120,122,123,124,125,126,127,128,134,135,136,137,138,139,140,141,145,155,156,158,165,173,177,179,181,182,183,185,186,195,197,199,203,204,205,208,210,211,218,221,222,224,225,226,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,28,28,28,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,66,67,-23,-62,28,28,-21,-22,-25,28,28,28,-11,-73,102,-84,-26,-28,-92,-74,28,102,-66,-67,-12,28,-91,28,-83,-60,-103,28,28,28,28,28,28,-22,28,28,28,-37,-38,-39,-40,-41,-42,174,-27,-93,-78,-62,28,28,28,-86,-87,-88,-90,28,-107,-85,28,28,28,28,28,-61,28,-108,-64,-99,-62,-89,28,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,41,43,44,45,48,49,50,51,53,57,58,59,68,78,83,85,87,92,93,94,99,100,107,108,109,110,116,117,118,120,122,123,124,125,126,127,128,134,135,136,137,138,139,140,141,146,155,156,158,165,173,177,179,181,182,183,185,186,195,197,199,203,204,205,208,210,211,218,221,222,224,225,226,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,29,29,29,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,29,29,-21,-22,-25,29,29,29,-11,-73,103,-84,-26,-28,-92,-74,29,103,-66,-67,-12,29,-91,29,-83,-60,-103,29,29,29,29,29,29,-22,29,29,29,-37,-38,-39,-40,-41,-42,175,-27,-93,-78,-62,29,29,29,-86,-87,-88,-90,29,-107,-85,29,29,29,29,29,-61,29,-108,-64,-99,-62,-89,29,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,41,43,44,45,48,49,50,51,53,54,57,58,59,68,78,83,85,87,92,93,94,99,100,107,108,109,110,116,117,118,120,122,123,124,125,126,127,128,134,135,136,137,138,139,140,141,147,155,156,158,165,173,177,179,181,182,183,185,186,195,197,199,203,204,205,208,210,211,218,221,222,224,225,226,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,30,30,30,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,76,76,-21,-22,-25,30,76,87,76,-11,-73,104,-84,-26,-28,-92,-74,30,104,-66,-67,-12,76,-91,76,-83,-60,-103,76,30,30,30,30,30,-22,30,76,76,-37,-38,-39,-40,-41,-42,176,-27,-93,-78,-62,30,76,76,-86,-87,-88,-90,30,-107,-85,30,30,30,30,76,-61,30,-108,-64,-99,-62,-89,76,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,41,43,44,45,48,49,50,51,53,57,58,59,68,78,83,85,87,92,93,94,99,100,107,108,109,110,116,117,118,120,122,123,124,125,126,127,128,134,135,136,137,138,139,140,141,155,156,158,165,173,177,179,181,182,183,185,186,195,197,199,203,204,205,208,210,211,218,221,222,224,225,226,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,31,31,31,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,31,31,-21,-22,-25,31,31,31,-11,-73,105,-84,-26,-28,-92,-74,31,105,-66,-67,-12,31,-91,31,-83,-60,-103,31,31,31,31,31,31,-22,31,31,31,-37,-38,-39,-40,-41,-42,-27,-93,-78,-62,31,31,31,-86,-87,-88,-90,31,-107,-85,31,31,31,31,31,-61,31,-108,-64,-99,-62,-89,31,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,44,48,49,50,53,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,134,135,136,137,138,139,140,141,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,32,-21,-22,-25,32,-11,-73,-84,-26,-28,-92,-74,130,-66,-67,-12,-91,-83,-60,-103,130,130,130,130,130,-22,32,32,-37,-38,-39,-40,-41,-42,-27,-93,-78,-62,130,-86,-87,-88,-90,130,-107,-85,32,130,130,32,-61,32,-108,-64,-99,-62,-89,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,44,48,49,50,53,58,59,78,83,85,87,92,99,100,106,107,109,116,117,118,134,135,136,137,138,139,140,141,155,156,158,181,182,183,195,197,199,205,210,211,218,221,222,225,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,71,-21,-22,-25,33,-11,-73,-84,-26,-28,-92,-74,-66,-67,148,-12,-91,-83,-60,-103,33,33,-37,-38,-39,-40,-41,-42,-27,-93,-78,-86,-87,-88,-107,-85,33,33,-61,33,-108,-64,-99,-89,]),'SIGNO_DOLAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,41,43,44,48,49,50,51,53,58,59,63,64,78,83,85,87,92,93,95,98,99,100,107,109,116,117,118,122,123,124,125,126,127,128,132,134,135,136,137,138,139,140,141,142,155,156,158,165,173,181,182,183,185,186,189,195,197,199,203,204,205,210,211,218,221,222,224,225,227,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,34,34,34,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,34,-21,-22,-25,34,34,-11,-73,34,34,-84,-26,-28,-92,-74,34,133,143,-66,-67,-12,-91,-83,-60,-103,34,34,34,34,34,-22,34,168,34,34,-37,-38,-39,-40,-41,-42,34,-27,-93,-78,-62,34,-86,-87,-88,-90,34,-65,-107,-85,34,34,34,34,-61,34,-108,-64,-99,-62,-89,143,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,36,-66,-67,-12,-91,-83,-60,-103,36,36,36,36,36,-22,-27,-93,-78,-62,36,-86,-87,-88,-90,36,-107,-85,36,36,36,36,-61,36,-108,-64,-99,-62,-89,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,37,-66,-67,-12,-91,-83,-60,-103,37,37,37,37,37,-22,-27,-93,-78,-62,37,-86,-87,-88,-90,37,-107,-85,37,37,37,37,-61,37,-108,-64,-99,-62,-89,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,99,100,107,109,116,117,118,155,156,158,181,182,183,195,197,199,203,205,210,211,218,221,222,225,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,-66,-67,-12,-91,-83,-60,-103,-27,-93,-78,-86,-87,-88,-107,-85,38,215,38,-61,38,-108,-64,-99,-89,]),'MENOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,97,99,100,102,103,104,107,109,116,117,118,155,156,158,169,181,182,183,195,197,199,205,210,211,218,221,222,225,],[39,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,141,-66,-67,141,141,141,-12,-91,-83,-60,-103,-27,-93,-78,39,-86,-87,-88,-107,-85,39,39,-61,39,-108,-64,-99,-89,]),'MAYOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,97,99,100,102,103,104,107,109,116,117,118,155,156,158,169,181,182,183,195,197,199,205,210,211,218,221,222,225,],[40,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,139,-66,-67,139,139,139,-12,-91,-83,-60,-103,-27,-93,-78,40,-86,-87,-88,-107,-85,40,40,-61,40,-108,-64,-99,-89,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,199,203,204,205,210,211,218,221,222,224,225,],[42,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,42,-66,-67,-12,-91,-83,-60,-103,42,42,42,42,42,-22,-27,-93,-78,-62,42,-86,-87,-88,-90,42,-107,-85,42,42,42,42,-61,42,-108,-64,-99,-62,-89,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,99,100,107,109,116,117,118,155,156,158,181,182,183,195,197,210,211,218,221,222,225,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,-66,-67,-12,-91,-83,-60,-103,-27,-93,-78,-86,-87,-88,-107,-85,-61,-63,-108,-64,-99,-89,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,93,99,100,107,109,116,117,118,122,123,124,125,126,127,155,156,158,165,173,181,182,183,185,186,195,197,203,204,210,211,218,221,222,224,225,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,-15,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,128,-66,-67,-12,-91,-83,-60,-103,128,128,128,128,128,-22,-27,-93,-78,-62,128,-86,-87,-88,-90,128,-107,-85,128,128,-61,-63,-108,-64,-99,-62,-89,]),'LLAVE_DER':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,22,23,24,25,26,27,28,29,30,31,41,43,48,49,50,58,59,78,83,85,87,92,99,100,107,109,116,117,118,121,122,123,124,125,126,127,129,155,156,158,159,160,161,162,163,165,181,182,183,185,193,195,197,198,210,211,212,213,214,216,217,218,221,222,224,225,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-13,-14,43,-16,-22,-24,-29,-30,-31,-35,-36,-68,-69,-17,-18,-19,-20,-23,-62,-21,-22,-25,-11,-73,-84,-26,-28,-92,-74,-66,-67,-12,-91,-83,-60,-103,158,-50,-51,-52,-53,-58,-22,165,-27,-93,-78,-54,-55,-56,-57,-59,-62,-86,-87,-88,-90,206,-107,-85,209,-61,-63,222,-97,-98,224,225,-108,-64,-99,-62,-89,]),'IGUAL':([16,58,69,96,127,],[44,-11,106,134,134,]),'ASIG_CONCA':([16,58,],[45,-11,]),'ASIG_OBJ':([16,58,],[46,-11,]),'PAREN_IZQ':([19,20,33,36,37,42,55,56,62,65,71,79,80,81,82,148,223,],[51,53,57,63,64,68,88,89,94,98,108,110,111,112,113,177,227,]),'PUNTO_COMA':([28,29,30,31,41,47,48,49,52,58,66,67,70,72,73,74,75,76,77,87,114,115,116,117,118,152,153,154,164,178,180,195,],[-17,-18,-19,-20,-23,83,-21,-22,85,-11,99,100,107,-13,-14,-15,-16,-19,109,-92,155,156,-83,-60,-103,181,182,183,185,195,197,-107,]),'PAREN_DER':([28,29,30,31,41,48,49,58,72,73,74,75,76,84,86,87,88,89,90,101,105,111,112,113,116,117,118,119,131,149,151,157,167,170,171,172,174,175,176,184,195,200,201,202,207,228,229,],[-17,-18,-19,-20,-23,-21,-22,-11,-13,-14,-15,-16,-19,114,115,-92,116,117,118,144,-82,152,153,154,-83,-60,-103,-100,166,178,180,-101,187,190,191,192,-79,-80,-81,-102,-107,-70,-71,-72,-104,-105,-106,]),'COMA':([28,29,31,76,91,150,157,196,228,],[-17,-18,-20,-19,120,120,120,208,120,]),'FLECHA':([28,29,31,76,150,194,219,],[-17,-18,-20,-19,179,179,226,]),'PUNTO':([30,],[54,]),'STACK':([32,],[55,]),'QUEUE':([32,130,],[56,56,]),'VARIABLE':([34,38,133,143,168,215,],[58,65,169,172,188,223,]),'ELSE':([35,60,206,209,220,],[61,61,-75,-76,-77,]),'ELSEIF':([35,206,209,],[62,-75,62,]),'PUSH':([46,],[79,]),'POP':([46,],[80,]),'COUNT':([46,],[81,]),'CURRENT':([46,],[82,]),'IDENTICO':([58,97,102,103,104,],[-11,136,136,136,136,]),'DIFERENTE':([58,97,102,103,104,],[-11,137,137,137,137,]),'MAYOR_QUE':([58,97,102,103,104,],[-11,138,138,138,138,]),'MENOR_QUE':([58,97,102,103,104,],[-11,140,140,140,140,]),'LLAVE_IZQ':([61,144,166,187,190,191,192,],[93,173,186,199,203,204,205,]),'TRES_PUNTOS':([98,],[142,]),'INCREMENTO':([188,],[201,]),'DECREMENTO':([188,],[202,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,199,205,211,],[1,211,211,211,]),'valor':([0,44,53,134,135,199,205,211,],[2,70,86,70,170,2,2,2,]),'asignacion':([0,63,93,122,123,124,125,126,173,186,199,203,204,205,211,],[3,95,122,122,122,122,122,122,122,122,3,122,122,3,3,]),'concatenacion':([0,199,205,211,],[4,4,4,4,]),'salida':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[5,123,123,123,123,123,123,123,123,5,123,123,5,5,]),'estructuras_control':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[6,125,125,125,125,125,125,125,125,6,125,125,6,6,]),'estructuras_datos':([0,199,205,211,],[7,7,7,7,]),'funciones':([0,199,205,211,],[8,8,8,8,]),'op_pila':([0,199,205,211,],[9,9,9,9,]),'valorc':([0,169,199,205,211,],[10,189,10,10,10,]),'multiples':([0,18,93,122,123,124,125,126,173,186,199,203,204,205,211,],[11,50,126,126,126,126,126,126,126,126,11,126,126,11,11,]),'datos':([0,17,18,19,44,45,51,53,57,93,108,110,120,122,123,124,125,126,128,134,135,173,177,179,186,199,203,204,205,208,211,226,],[12,48,48,48,72,77,48,72,91,48,150,151,157,48,48,48,48,48,48,72,72,48,194,196,48,12,48,48,12,219,12,228,]),'pila':([0,44,53,134,135,199,205,211,],[13,73,73,73,73,13,13,13,]),'cola':([0,44,53,93,122,123,124,125,126,134,135,173,186,199,203,204,205,211,],[14,74,74,129,129,129,129,129,129,74,74,129,129,14,216,129,14,14,]),'arreglo':([0,44,53,134,135,199,205,211,],[15,75,75,75,75,15,15,15,]),'decl_variable':([0,17,18,19,44,51,53,63,64,93,122,123,124,125,126,128,134,135,142,173,186,199,203,204,205,211,],[16,49,49,49,69,49,69,96,97,127,127,127,127,127,127,49,69,69,171,127,127,16,127,127,16,16,]),'salidas_pos':([0,17,18,19,51,93,122,123,124,125,126,128,173,186,199,203,204,205,211,],[18,47,18,52,84,18,18,18,18,18,18,164,18,18,18,18,18,18,18,]),'if_else':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'for':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'whileDeclaracion':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'funcion_variable':([0,199,205,211,],[24,24,24,24,]),'sinRetorno':([0,199,203,205,211,],[25,25,214,25,25,]),'menor':([0,169,199,205,211,],[26,26,26,26,26,]),'mayor':([0,169,199,205,211,],[27,27,27,27,27,]),'if_else_inicio':([0,93,122,123,124,125,126,173,186,199,203,204,205,211,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'conca_string':([0,17,18,19,51,93,122,123,124,125,126,128,173,186,199,203,204,205,211,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'if_else_fin':([35,60,],[59,92,]),'if_else_cuerpo':([35,209,],[60,220,]),'operad_pila':([46,],[78,]),'valores':([57,108,],[90,90,]),'op_logica':([68,94,],[101,131,]),'repite_valores':([91,150,157,228,],[119,119,184,229,]),'bloque':([93,122,123,124,125,126,173,186,203,204,],[121,159,160,161,162,163,193,198,213,217,]),'retorno':([93,122,123,124,125,126,173,186,203,204,],[124,124,124,124,124,124,124,124,124,124,]),'declaracionp':([95,],[132,]),'operad_log':([97,102,103,104,],[135,145,146,147,]),'valoresflecha':([108,177,],[149,149,]),'declaracion_s':([132,],[167,]),'crecimiento':([188,],[200,]),'repite_valores_f':([196,],[207,]),'sentenciasAnidadas':([199,205,211,],[210,218,221,]),'contenido':([203,],[212,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','sintactico.py',8),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','sintactico.py',9),
  ('instrucciones -> concatenacion','instrucciones',1,'p_instrucciones','sintactico.py',10),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','sintactico.py',11),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','sintactico.py',12),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','sintactico.py',13),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',14),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','sintactico.py',15),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','sintactico.py',16),
  ('instrucciones -> multiples','instrucciones',1,'p_instrucciones','sintactico.py',17),
  ('decl_variable -> SIGNO_DOLAR VARIABLE','decl_variable',2,'p_decl_variable','sintactico.py',21),
  ('asignacion -> decl_variable IGUAL valor PUNTO_COMA','asignacion',4,'p_asignacion','sintactico.py',25),
  ('valor -> datos','valor',1,'p_valor','sintactico.py',31),
  ('valor -> pila','valor',1,'p_valor','sintactico.py',32),
  ('valor -> cola','valor',1,'p_valor','sintactico.py',33),
  ('valor -> arreglo','valor',1,'p_valor','sintactico.py',34),
  ('datos -> ENTERO','datos',1,'p_datos','sintactico.py',39),
  ('datos -> FLOTANTE','datos',1,'p_datos','sintactico.py',40),
  ('datos -> STRING','datos',1,'p_datos','sintactico.py',41),
  ('datos -> BOOLEANO','datos',1,'p_datos','sintactico.py',42),
  ('salidas_pos -> datos','salidas_pos',1,'p_salidas_pos','sintactico.py',47),
  ('salidas_pos -> decl_variable','salidas_pos',1,'p_salidas_pos','sintactico.py',48),
  ('salidas_pos -> conca_string','salidas_pos',1,'p_salidas_pos','sintactico.py',49),
  ('multiples -> salidas_pos','multiples',1,'p_multiples','sintactico.py',52),
  ('multiples -> salidas_pos multiples','multiples',2,'p_multiples','sintactico.py',53),
  ('salida -> ECHO salidas_pos PUNTO_COMA','salida',3,'p_salida_forma1','sintactico.py',57),
  ('salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','sintactico.py',60),
  ('salida -> PRINT salidas_pos PUNTO_COMA','salida',3,'p_salida_forma3','sintactico.py',63),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','sintactico.py',70),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintactico.py',71),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','sintactico.py',72),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','sintactico.py',76),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','sintactico.py',77),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','sintactico.py',78),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','sintactico.py',82),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','sintactico.py',83),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','sintactico.py',88),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','sintactico.py',89),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','sintactico.py',90),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',91),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','sintactico.py',92),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',93),
  ('operad_arit -> SUMA','operad_arit',1,'p_operad_arit','sintactico.py',98),
  ('operad_arit -> RESTA','operad_arit',1,'p_operad_arit','sintactico.py',99),
  ('operad_arit -> MULTIPL','operad_arit',1,'p_operad_arit','sintactico.py',100),
  ('operad_arit -> DIVISION','operad_arit',1,'p_operad_arit','sintactico.py',101),
  ('operad_arit -> DIVISION_ENT','operad_arit',1,'p_operad_arit','sintactico.py',102),
  ('operad_arit -> POTENCIA','operad_arit',1,'p_operad_arit','sintactico.py',103),
  ('operad_arit -> MODULO','operad_arit',1,'p_operad_arit','sintactico.py',104),
  ('bloque -> asignacion','bloque',1,'p_bloque','sintactico.py',110),
  ('bloque -> salida','bloque',1,'p_bloque','sintactico.py',111),
  ('bloque -> retorno','bloque',1,'p_bloque','sintactico.py',112),
  ('bloque -> estructuras_control','bloque',1,'p_bloque','sintactico.py',113),
  ('bloque -> asignacion bloque','bloque',2,'p_bloque','sintactico.py',114),
  ('bloque -> salida bloque','bloque',2,'p_bloque','sintactico.py',115),
  ('bloque -> retorno bloque','bloque',2,'p_bloque','sintactico.py',116),
  ('bloque -> estructuras_control bloque','bloque',2,'p_bloque','sintactico.py',117),
  ('bloque -> multiples','bloque',1,'p_bloque','sintactico.py',118),
  ('bloque -> multiples bloque','bloque',2,'p_bloque','sintactico.py',119),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','sintactico.py',128),
  ('for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas','for',8,'p_for','sintactico.py',133),
  ('for -> cola LLAVE_DER','for',2,'p_for','sintactico.py',134),
  ('sentenciasAnidadas -> instrucciones','sentenciasAnidadas',1,'p_sentenciasAnidadas','sintactico.py',136),
  ('sentenciasAnidadas -> instrucciones sentenciasAnidadas','sentenciasAnidadas',2,'p_sentenciasAnidadas','sintactico.py',137),
  ('declaracionp -> SIGNO_DOLAR VARIABLE valorc','declaracionp',3,'p_declaracionM','sintactico.py',141),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','sintactico.py',144),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','sintactico.py',147),
  ('valorc -> menor','valorc',1,'p_valorC','sintactico.py',150),
  ('valorc -> mayor','valorc',1,'p_valorC','sintactico.py',151),
  ('declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento','declaracion_s',3,'p_declaracionsimple','sintactico.py',154),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',157),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',158),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','sintactico.py',167),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','sintactico.py',171),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','sintactico.py',175),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','sintactico.py',179),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo','if_else_cuerpo',8,'p_if_else_cuerpo','sintactico.py',180),
  ('if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER','if_else_fin',4,'p_if_else_fin','sintactico.py',185),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','sintactico.py',189),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','sintactico.py',190),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','sintactico.py',191),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','sintactico.py',192),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','sintactico.py',200),
  ('op_pila -> decl_variable ASIG_OBJ operad_pila','op_pila',3,'p_op_pila','sintactico.py',205),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','sintactico.py',209),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',210),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',211),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',212),
  ('funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',9,'p_funcion_variable','sintactico.py',220),
  ('retorno -> RETURN salidas_pos PUNTO_COMA','retorno',3,'p_retorno','sintactico.py',225),
  ('concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA','concatenacion',4,'p_concatenacion','sintactico.py',236),
  ('conca_string -> STRING PUNTO STRING','conca_string',3,'p_conca_string','sintactico.py',239),
  ('salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA','salida',5,'p_salida_obj','sintactico.py',244),
  ('salidas_pos_obj -> valor','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',247),
  ('salidas_pos_obj -> decl_variable','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',248),
  ('salidas_pos_obj -> conca_string','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',249),
  ('contenido -> bloque','contenido',1,'p_contenido','sintactico.py',256),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','sintactico.py',257),
  ('whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',9,'p_whileDeclaracion','sintactico.py',261),
  ('valores -> datos repite_valores','valores',2,'p_valoresSeparadosComa','sintactico.py',266),
  ('repite_valores -> COMA datos','repite_valores',2,'p_repite_valoresSeparadosComa','sintactico.py',269),
  ('repite_valores -> COMA datos repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','sintactico.py',270),
  ('arreglo -> ARRAY PAREN_IZQ valores PAREN_DER','arreglo',4,'p_arreglo_parentesis','sintactico.py',278),
  ('valoresflecha -> datos FLECHA datos repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','sintactico.py',283),
  ('repite_valores_f -> COMA datos FLECHA datos','repite_valores_f',4,'p_repite_valoresSeparados_flecha','sintactico.py',287),
  ('repite_valores_f -> COMA datos FLECHA datos repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','sintactico.py',288),
  ('arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',7,'p_arreglo_asociativo','sintactico.py',292),
  ('sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas','sinRetorno',8,'p_sinretorno','sintactico.py',296),
  ('sinRetorno -> cola LLAVE_DER','sinRetorno',2,'p_sinretorno','sintactico.py',297),
]
