
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_OBJ ASIG_REFER BOOLEANO BREAK CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR VARIABLE WHILEinstrucciones : valor\n                    | asignacion\n                    | concatenacion\n                    | salida\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones\n                    | op_pila\n                    | valorc\n                    | multiples\n                    | LLAVE_DER\n                    | llamadaFuncion\n  decl_variable : SIGNO_DOLAR VARIABLEasignacion : decl_variable IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n          | arreglo\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salidas_pos : datos\n                | decl_variable\n                | conca_string\n  multiples : salidas_pos\n                | salidas_pos multiplessalida : ECHO salidas_pos PUNTO_COMAsalida : PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMAsalida : PRINT salidas_pos PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n                | functConRetorno\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n  operad_arit : SUMA\n                | RESTA\n                | MULTIPL\n                | DIVISION\n                | DIVISION_ENT\n                | POTENCIA\n                | MODULO\n   bloque : asignacion\n              | salida\n              | retorno\n              | estructuras_control\n              | asignacion bloque\n              | salida bloque\n              | retorno bloque\n              | estructuras_control bloque\n              | multiples \n              | multiples bloque\n  sinRetorno : FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DER cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas \n                                                                                  | cola LLAVE_DERsentenciasAnidadas : instrucciones \n\t\t\t\t\t\t| instrucciones sentenciasAnidadas\n\tdeclaracionp :  SIGNO_DOLAR VARIABLE valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayordeclaracion_s : SIGNO_DOLAR VARIABLE crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER\n                    |  ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo\n  if_else_fin : ELSE LLAVE_IZQ bloque LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : decl_variable ASIG_OBJ operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN salidas_pos PUNTO_COMAconcatenacion : decl_variable ASIG_CONCA datos PUNTO_COMAconca_string : STRING PUNTO STRINGsalida : PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA salidas_pos_obj : valor\n                | decl_variable\n                | conca_string\n  contenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : datos repite_valores repite_valores : COMA datos\n                        | COMA datos repite_valores\n    arreglo : ARRAY PAREN_IZQ valores PAREN_DER valoresflecha : datos FLECHA datos repite_valores_f repite_valores_f : COMA datos FLECHA datos\n                        | COMA datos FLECHA datos repite_valores\n  arreglo : decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMAparametros : datos\n          | SIGNO_DOLAR VARIABLE\n  parametrosR : parametros\n                    | parametros repite_parametros repite_parametros : COMA parametros\n                        | COMA parametros repite_parametros\n    functConRetorno : FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DERllamadaFuncion : VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA'
    
_lr_action_items = {'LLAVE_DER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,116,118,129,130,131,134,135,136,137,138,139,140,142,169,170,171,174,175,176,177,178,179,181,198,199,200,203,212,214,216,217,218,224,225,230,231,232,233,234,236,237,238,239,242,243,245,246,],[12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,47,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,-71,-72,-14,-96,-88,-65,-108,174,-53,-54,-55,-56,-61,-24,181,-29,-98,-120,-83,-57,-58,-59,-60,-62,-67,-91,-92,-93,-95,226,-112,-90,229,12,12,239,-66,12,243,-102,-103,245,246,-63,-119,-69,-104,-64,-94,]),'ECHO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[19,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,19,-71,-72,-14,-96,-88,-65,-108,19,19,19,19,19,-24,-29,-98,-120,-83,-67,19,-91,-92,-93,-95,19,19,-112,-90,19,19,19,19,-66,19,-63,-119,-69,-104,-67,-94,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[21,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,21,-71,-72,-14,-96,-88,-65,-108,21,21,21,21,21,-24,-29,-98,-120,-83,-67,21,-91,-92,-93,-95,21,21,-112,-90,21,21,21,21,-66,21,-63,-119,-69,-104,-67,-94,]),'PRINT_R':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[22,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,22,-71,-72,-14,-96,-88,-65,-108,22,22,22,22,22,-24,-29,-98,-120,-83,-67,22,-91,-92,-93,-95,22,22,-112,-90,22,22,22,22,-66,22,-63,-119,-69,-104,-67,-94,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,38,42,45,47,52,53,54,63,64,83,88,90,95,96,101,108,109,116,118,129,130,131,146,156,169,170,171,174,184,198,199,200,214,216,218,224,230,231,235,238,239,242,243,246,250,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,63,70,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,128,-97,-79,-71,-72,-14,-96,-88,-65,-108,185,188,-29,-98,-120,-83,206,-91,-92,-93,-112,-90,31,31,-66,31,244,-63,-119,-69,-104,-94,252,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,43,44,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,116,117,118,119,127,129,130,131,133,135,136,137,138,139,140,141,147,148,149,150,151,152,153,154,159,169,170,171,174,181,190,194,196,198,199,200,203,204,211,214,216,218,222,223,224,228,230,231,238,239,242,243,245,246,247,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,32,32,32,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,71,72,-25,-64,32,32,-23,-24,-27,32,32,32,32,-13,-78,111,-89,-28,-30,-97,-79,32,111,32,-71,-72,-14,32,-96,32,32,-88,-65,-108,32,32,32,32,32,32,-24,32,32,32,-40,-41,-42,-43,-44,-45,191,-29,-98,-120,-83,-67,32,32,32,-91,-92,-93,-95,32,32,-112,-90,32,32,32,32,32,-66,32,-63,-119,-69,-104,-67,-94,32,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,116,117,118,119,127,129,130,131,133,135,136,137,138,139,140,141,147,148,149,150,151,152,153,154,160,169,170,171,174,181,190,194,196,198,199,200,203,204,211,214,216,218,222,223,224,228,230,231,238,239,242,243,245,246,247,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,33,33,33,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,33,33,-23,-24,-27,33,33,33,33,-13,-78,112,-89,-28,-30,-97,-79,33,112,33,-71,-72,-14,33,-96,33,33,-88,-65,-108,33,33,33,33,33,33,-24,33,33,33,-40,-41,-42,-43,-44,-45,192,-29,-98,-120,-83,-67,33,33,33,-91,-92,-93,-95,33,33,-112,-90,33,33,33,33,33,-66,33,-63,-119,-69,-104,-67,-94,33,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,59,62,63,64,73,83,88,90,96,101,102,103,107,108,109,116,117,118,119,127,129,130,131,133,135,136,137,138,139,140,141,147,148,149,150,151,152,153,154,161,169,170,171,174,181,190,194,196,198,199,200,203,204,211,214,216,218,222,223,224,228,230,231,238,239,242,243,245,246,247,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,34,34,34,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,81,81,-23,-24,-27,34,81,81,96,81,-13,-78,113,-89,-28,-30,-97,-79,34,113,81,-71,-72,-14,81,-96,81,81,-88,-65,-108,81,34,34,34,34,34,-24,34,81,81,-40,-41,-42,-43,-44,-45,193,-29,-98,-120,-83,-67,34,81,81,-91,-92,-93,-95,34,34,-112,-90,34,34,34,34,81,-66,34,-63,-119,-69,-104,-67,-94,81,]),'BOOLEANO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,49,52,53,54,55,57,58,62,63,64,73,83,88,90,96,101,102,103,107,108,109,116,117,118,119,127,129,130,131,133,135,136,137,138,139,140,141,147,148,149,150,151,152,153,154,169,170,171,174,181,190,194,196,198,199,200,203,204,211,214,216,218,222,223,224,228,230,231,238,239,242,243,245,246,247,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,35,35,35,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,35,35,-23,-24,-27,35,35,35,35,-13,-78,114,-89,-28,-30,-97,-79,35,114,35,-71,-72,-14,35,-96,35,35,-88,-65,-108,35,35,35,35,35,35,-24,35,35,35,-40,-41,-42,-43,-44,-45,-29,-98,-120,-83,-67,35,35,35,-91,-92,-93,-95,35,35,-112,-90,35,35,35,35,35,-66,35,-63,-119,-69,-104,-67,-94,35,]),'NEW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,57,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,147,148,149,150,151,152,153,154,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,36,-23,-24,-27,36,-13,-78,-89,-28,-30,-97,-79,143,-71,-72,-14,-96,-88,-65,-108,143,143,143,143,143,-24,36,36,-40,-41,-42,-43,-44,-45,-29,-98,-120,-83,-67,143,-91,-92,-93,-95,143,143,-112,-90,36,143,143,36,-66,36,-63,-119,-69,-104,-67,-94,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,57,63,64,83,88,90,96,101,108,109,115,116,118,129,130,131,147,148,149,150,151,152,153,154,169,170,171,174,198,199,200,214,216,218,224,230,231,238,239,242,243,246,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,76,-23,-24,-27,37,-13,-78,-89,-28,-30,-97,-79,-71,-72,162,-14,-96,-88,-65,-108,37,37,-40,-41,-42,-43,-44,-45,-29,-98,-120,-83,-91,-92,-93,-112,-90,37,37,-66,37,-63,-119,-69,-104,-94,]),'SIGNO_DOLAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,45,47,48,52,53,54,55,57,58,63,64,68,69,83,88,90,96,101,102,104,107,108,109,116,118,127,129,130,131,135,136,137,138,139,140,141,145,147,148,149,150,151,152,153,154,155,169,170,171,174,181,190,198,199,200,203,204,207,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,248,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,38,38,38,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,38,-23,-24,-27,38,38,95,-13,-78,38,38,-89,-28,-30,-97,-79,38,146,156,-71,-72,-14,-96,95,-88,-65,-108,38,38,38,38,38,-24,38,184,38,38,-40,-41,-42,-43,-44,-45,38,-29,-98,-120,-83,-67,38,-91,-92,-93,-95,38,-70,38,-112,-90,38,38,38,38,-66,38,-63,-119,-69,-104,-67,-94,250,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[40,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,40,-71,-72,-14,-96,-88,-65,-108,40,40,40,40,40,-24,-29,-98,-120,-83,-67,40,-91,-92,-93,-95,40,40,-112,-90,40,40,40,40,-66,40,-63,-119,-69,-104,-67,-94,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[41,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,41,-71,-72,-14,-96,-88,-65,-108,41,41,41,41,41,-24,-29,-98,-120,-83,-67,41,-91,-92,-93,-95,41,41,-112,-90,41,41,41,41,-66,41,-63,-119,-69,-104,-67,-94,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,116,118,129,130,131,169,170,171,174,198,199,200,214,216,218,222,224,230,231,238,239,242,243,246,],[42,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,-71,-72,-14,-96,-88,-65,-108,-29,-98,-120,-83,-91,-92,-93,-112,-90,42,235,42,-66,42,-63,-119,-69,-104,-94,]),'MENOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,106,108,109,111,112,113,116,118,129,130,131,169,170,171,174,185,198,199,200,214,216,218,224,230,231,238,239,242,243,246,],[43,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,154,-71,-72,154,154,154,-14,-96,-88,-65,-108,-29,-98,-120,-83,43,-91,-92,-93,-112,-90,43,43,-66,43,-63,-119,-69,-104,-94,]),'MAYOR_IGUAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,106,108,109,111,112,113,116,118,129,130,131,169,170,171,174,185,198,199,200,214,216,218,224,230,231,238,239,242,243,246,],[44,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,152,-71,-72,152,152,152,-14,-96,-88,-65,-108,-29,-98,-120,-83,44,-91,-92,-93,-112,-90,44,44,-66,44,-63,-119,-69,-104,-94,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,218,222,223,224,230,231,238,239,242,243,245,246,],[46,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,46,-71,-72,-14,-96,-88,-65,-108,46,46,46,46,46,-24,-29,-98,-120,-83,-67,46,-91,-92,-93,-95,46,46,-112,-90,46,46,46,46,-66,46,-63,-119,-69,-104,-67,-94,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,108,109,116,118,129,130,131,169,170,171,174,198,199,200,214,216,230,231,238,239,242,243,246,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,-71,-72,-14,-96,-88,-65,-108,-29,-98,-120,-83,-91,-92,-93,-112,-90,-66,-68,-63,-119,-69,-104,-94,]),'RETURN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,32,33,34,35,45,47,52,53,54,63,64,83,88,90,96,101,102,108,109,116,118,129,130,131,135,136,137,138,139,140,169,170,171,174,181,190,198,199,200,203,204,211,214,216,222,223,230,231,238,239,242,243,245,246,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-17,-18,-24,-26,-31,-32,-33,-37,-38,-39,-73,-74,-19,-20,-21,-22,-25,-64,-23,-24,-27,-13,-78,-89,-28,-30,-97,-79,141,-71,-72,-14,-96,-88,-65,-108,141,141,141,141,141,-24,-29,-98,-120,-83,-67,141,-91,-92,-93,-95,141,141,-112,-90,141,141,-66,-68,-63,-119,-69,-104,-67,-94,]),'IGUAL':([18,63,74,105,140,],[48,-13,115,147,147,]),'ASIG_CONCA':([18,63,],[49,-13,]),'ASIG_OBJ':([18,63,],[50,-13,]),'PAREN_IZQ':([21,22,31,37,40,41,46,60,61,67,70,76,84,85,86,87,162,244,],[55,57,58,62,68,69,73,97,98,103,107,117,119,120,121,122,194,248,]),'PUNTO_COMA':([32,33,34,35,45,51,52,53,56,63,71,72,75,77,78,79,80,81,82,96,123,124,125,129,130,131,166,167,168,180,195,197,214,],[-19,-20,-21,-22,-25,88,-23,-24,90,-13,108,109,116,-15,-16,-17,-18,-21,118,-97,169,170,171,-88,-65,-108,198,199,200,203,214,216,-112,]),'PAREN_DER':([32,33,34,35,45,52,53,63,77,78,79,80,81,89,91,92,93,94,96,97,98,99,110,114,120,121,122,126,128,129,130,131,132,144,157,163,165,172,173,183,186,187,188,191,192,193,201,202,214,219,220,221,227,249,251,252,],[-19,-20,-21,-22,-25,-23,-24,-13,-15,-16,-17,-18,-21,123,124,125,-115,-113,-97,129,130,131,158,-87,166,167,168,-116,-114,-88,-65,-108,-105,182,189,195,197,-117,-106,205,208,209,210,-84,-85,-86,-118,-107,-112,-75,-76,-77,-109,-110,-111,210,]),'COMA':([32,33,35,81,93,94,100,128,164,172,173,188,215,249,],[-19,-20,-22,-21,127,-113,133,-114,133,127,133,-114,228,133,]),'FLECHA':([32,33,35,81,164,213,240,],[-19,-20,-22,-21,196,196,247,]),'PUNTO':([34,],[59,]),'STACK':([36,],[60,]),'QUEUE':([36,143,],[61,61,]),'ELSE':([39,65,226,229,241,],[66,66,-80,-81,-82,]),'ELSEIF':([39,226,229,],[67,-80,67,]),'PUSH':([50,],[84,]),'POP':([50,],[85,]),'COUNT':([50,],[86,]),'CURRENT':([50,],[87,]),'IDENTICO':([63,106,111,112,113,],[-13,149,149,149,149,]),'DIFERENTE':([63,106,111,112,113,],[-13,150,150,150,150,]),'MAYOR_QUE':([63,106,111,112,113,],[-13,151,151,151,151,]),'MENOR_QUE':([63,106,111,112,113,],[-13,153,153,153,153,]),'LLAVE_IZQ':([66,158,182,189,205,208,209,210,],[102,190,204,211,218,222,223,224,]),'TRES_PUNTOS':([107,],[155,]),'INCREMENTO':([206,],[220,]),'DECREMENTO':([206,],[221,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,218,224,231,],[1,231,231,231,]),'valor':([0,48,57,147,148,218,224,231,],[2,75,91,75,186,2,2,2,]),'asignacion':([0,68,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[3,104,135,135,135,135,135,135,135,135,135,3,135,135,3,3,]),'concatenacion':([0,218,224,231,],[4,4,4,4,]),'salida':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[5,136,136,136,136,136,136,136,136,136,5,136,136,5,5,]),'estructuras_control':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[6,138,138,138,138,138,138,138,138,138,6,138,138,6,6,]),'estructuras_datos':([0,218,224,231,],[7,7,7,7,]),'funciones':([0,218,224,231,],[8,8,8,8,]),'op_pila':([0,218,224,231,],[9,9,9,9,]),'valorc':([0,185,218,224,231,],[10,207,10,10,10,]),'multiples':([0,20,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[11,54,139,139,139,139,139,139,139,139,139,11,139,139,11,11,]),'llamadaFuncion':([0,218,224,231,],[13,13,13,13,]),'datos':([0,19,20,21,48,49,55,57,58,62,102,107,117,119,127,133,135,136,137,138,139,141,147,148,190,194,196,204,211,218,222,223,224,228,231,247,],[14,52,52,52,77,82,52,77,94,100,52,94,164,165,94,173,52,52,52,52,52,52,77,77,52,213,215,52,52,14,52,52,14,240,14,249,]),'pila':([0,48,57,147,148,218,224,231,],[15,78,78,78,78,15,15,15,]),'cola':([0,48,57,102,135,136,137,138,139,147,148,190,204,211,218,222,223,224,231,],[16,79,79,142,142,142,142,142,142,79,79,142,142,142,16,236,142,16,16,]),'arreglo':([0,48,57,147,148,218,224,231,],[17,80,80,80,80,17,17,17,]),'decl_variable':([0,19,20,21,48,55,57,68,69,102,135,136,137,138,139,141,147,148,155,190,204,211,218,222,223,224,231,],[18,53,53,53,74,53,74,105,106,140,140,140,140,140,140,53,74,74,187,140,140,140,18,140,140,18,18,]),'salidas_pos':([0,19,20,21,55,102,135,136,137,138,139,141,190,204,211,218,222,223,224,231,],[20,51,20,56,89,20,20,20,20,20,20,180,20,20,20,20,20,20,20,20,]),'if_else':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'for':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'whileDeclaracion':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_variable':([0,218,224,231,],[26,26,26,26,]),'sinRetorno':([0,218,222,224,231,],[27,27,234,27,27,]),'functConRetorno':([0,218,224,231,],[28,28,28,28,]),'menor':([0,185,218,224,231,],[29,29,29,29,29,]),'mayor':([0,185,218,224,231,],[30,30,30,30,30,]),'if_else_inicio':([0,102,135,136,137,138,139,190,204,211,218,222,223,224,231,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'conca_string':([0,19,20,21,55,102,135,136,137,138,139,141,190,204,211,218,222,223,224,231,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'if_else_fin':([39,65,],[64,101,]),'if_else_cuerpo':([39,229,],[65,241,]),'operad_pila':([50,],[83,]),'parametrosR':([58,107,],[92,157,]),'parametros':([58,107,127,],[93,93,172,]),'valores':([62,117,],[99,99,]),'op_logica':([73,103,],[110,144,]),'repite_parametros':([93,172,],[126,201,]),'repite_valores':([100,164,173,249,],[132,132,202,251,]),'bloque':([102,135,136,137,138,139,190,204,211,222,223,],[134,175,176,177,178,179,212,217,225,233,237,]),'retorno':([102,135,136,137,138,139,190,204,211,222,223,],[137,137,137,137,137,137,137,137,137,137,137,]),'declaracionp':([104,],[145,]),'operad_log':([106,111,112,113,],[148,159,160,161,]),'valoresflecha':([117,194,],[163,163,]),'declaracion_s':([145,],[183,]),'crecimiento':([206,],[219,]),'repite_valores_f':([215,],[227,]),'sentenciasAnidadas':([218,224,231,],[230,238,242,]),'contenido':([222,],[232,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','sintactico.py',8),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','sintactico.py',9),
  ('instrucciones -> concatenacion','instrucciones',1,'p_instrucciones','sintactico.py',10),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','sintactico.py',11),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','sintactico.py',12),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','sintactico.py',13),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',14),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','sintactico.py',15),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','sintactico.py',16),
  ('instrucciones -> multiples','instrucciones',1,'p_instrucciones','sintactico.py',17),
  ('instrucciones -> LLAVE_DER','instrucciones',1,'p_instrucciones','sintactico.py',18),
  ('instrucciones -> llamadaFuncion','instrucciones',1,'p_instrucciones','sintactico.py',19),
  ('decl_variable -> SIGNO_DOLAR VARIABLE','decl_variable',2,'p_decl_variable','sintactico.py',23),
  ('asignacion -> decl_variable IGUAL valor PUNTO_COMA','asignacion',4,'p_asignacion','sintactico.py',27),
  ('valor -> datos','valor',1,'p_valor','sintactico.py',33),
  ('valor -> pila','valor',1,'p_valor','sintactico.py',34),
  ('valor -> cola','valor',1,'p_valor','sintactico.py',35),
  ('valor -> arreglo','valor',1,'p_valor','sintactico.py',36),
  ('datos -> ENTERO','datos',1,'p_datos','sintactico.py',41),
  ('datos -> FLOTANTE','datos',1,'p_datos','sintactico.py',42),
  ('datos -> STRING','datos',1,'p_datos','sintactico.py',43),
  ('datos -> BOOLEANO','datos',1,'p_datos','sintactico.py',44),
  ('salidas_pos -> datos','salidas_pos',1,'p_salidas_pos','sintactico.py',49),
  ('salidas_pos -> decl_variable','salidas_pos',1,'p_salidas_pos','sintactico.py',50),
  ('salidas_pos -> conca_string','salidas_pos',1,'p_salidas_pos','sintactico.py',51),
  ('multiples -> salidas_pos','multiples',1,'p_multiples','sintactico.py',54),
  ('multiples -> salidas_pos multiples','multiples',2,'p_multiples','sintactico.py',55),
  ('salida -> ECHO salidas_pos PUNTO_COMA','salida',3,'p_salida_forma1','sintactico.py',59),
  ('salida -> PRINT PAREN_IZQ salidas_pos PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','sintactico.py',62),
  ('salida -> PRINT salidas_pos PUNTO_COMA','salida',3,'p_salida_forma3','sintactico.py',65),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','sintactico.py',72),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','sintactico.py',73),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','sintactico.py',74),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','sintactico.py',78),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','sintactico.py',79),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','sintactico.py',80),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','sintactico.py',84),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','sintactico.py',85),
  ('funciones -> functConRetorno','funciones',1,'p_funciones','sintactico.py',86),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','sintactico.py',91),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','sintactico.py',92),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','sintactico.py',93),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',94),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','sintactico.py',95),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','sintactico.py',96),
  ('operad_arit -> SUMA','operad_arit',1,'p_operad_arit','sintactico.py',101),
  ('operad_arit -> RESTA','operad_arit',1,'p_operad_arit','sintactico.py',102),
  ('operad_arit -> MULTIPL','operad_arit',1,'p_operad_arit','sintactico.py',103),
  ('operad_arit -> DIVISION','operad_arit',1,'p_operad_arit','sintactico.py',104),
  ('operad_arit -> DIVISION_ENT','operad_arit',1,'p_operad_arit','sintactico.py',105),
  ('operad_arit -> POTENCIA','operad_arit',1,'p_operad_arit','sintactico.py',106),
  ('operad_arit -> MODULO','operad_arit',1,'p_operad_arit','sintactico.py',107),
  ('bloque -> asignacion','bloque',1,'p_bloque','sintactico.py',113),
  ('bloque -> salida','bloque',1,'p_bloque','sintactico.py',114),
  ('bloque -> retorno','bloque',1,'p_bloque','sintactico.py',115),
  ('bloque -> estructuras_control','bloque',1,'p_bloque','sintactico.py',116),
  ('bloque -> asignacion bloque','bloque',2,'p_bloque','sintactico.py',117),
  ('bloque -> salida bloque','bloque',2,'p_bloque','sintactico.py',118),
  ('bloque -> retorno bloque','bloque',2,'p_bloque','sintactico.py',119),
  ('bloque -> estructuras_control bloque','bloque',2,'p_bloque','sintactico.py',120),
  ('bloque -> multiples','bloque',1,'p_bloque','sintactico.py',121),
  ('bloque -> multiples bloque','bloque',2,'p_bloque','sintactico.py',122),
  ('sinRetorno -> FUNCTION VARIABLE PAREN_IZQ SIGNO_DOLAR VARIABLE PAREN_DER LLAVE_IZQ sentenciasAnidadas','sinRetorno',8,'p_sinretorno','sintactico.py',128),
  ('sinRetorno -> cola LLAVE_DER','sinRetorno',2,'p_sinretorno','sintactico.py',129),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','sintactico.py',133),
  ('for -> FOR PAREN_IZQ asignacion declaracionp declaracion_s PAREN_DER LLAVE_IZQ sentenciasAnidadas','for',8,'p_for','sintactico.py',138),
  ('for -> cola LLAVE_DER','for',2,'p_for','sintactico.py',139),
  ('sentenciasAnidadas -> instrucciones','sentenciasAnidadas',1,'p_sentenciasAnidadas','sintactico.py',141),
  ('sentenciasAnidadas -> instrucciones sentenciasAnidadas','sentenciasAnidadas',2,'p_sentenciasAnidadas','sintactico.py',142),
  ('declaracionp -> SIGNO_DOLAR VARIABLE valorc','declaracionp',3,'p_declaracionM','sintactico.py',146),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','sintactico.py',149),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','sintactico.py',152),
  ('valorc -> menor','valorc',1,'p_valorC','sintactico.py',155),
  ('valorc -> mayor','valorc',1,'p_valorC','sintactico.py',156),
  ('declaracion_s -> SIGNO_DOLAR VARIABLE crecimiento','declaracion_s',3,'p_declaracionsimple','sintactico.py',159),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',162),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','sintactico.py',163),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','sintactico.py',172),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','sintactico.py',176),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','sintactico.py',180),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','sintactico.py',184),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ bloque LLAVE_DER if_else_cuerpo','if_else_cuerpo',8,'p_if_else_cuerpo','sintactico.py',185),
  ('if_else_fin -> ELSE LLAVE_IZQ bloque LLAVE_DER','if_else_fin',4,'p_if_else_fin','sintactico.py',190),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','sintactico.py',194),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','sintactico.py',195),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','sintactico.py',196),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','sintactico.py',197),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','sintactico.py',205),
  ('op_pila -> decl_variable ASIG_OBJ operad_pila','op_pila',3,'p_op_pila','sintactico.py',210),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','sintactico.py',214),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',215),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',216),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','sintactico.py',217),
  ('funcion_variable -> FUNCTION VARIABLE PAREN_IZQ TRES_PUNTOS decl_variable PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',9,'p_funcion_variable','sintactico.py',225),
  ('retorno -> RETURN salidas_pos PUNTO_COMA','retorno',3,'p_retorno','sintactico.py',230),
  ('concatenacion -> decl_variable ASIG_CONCA datos PUNTO_COMA','concatenacion',4,'p_concatenacion','sintactico.py',241),
  ('conca_string -> STRING PUNTO STRING','conca_string',3,'p_conca_string','sintactico.py',244),
  ('salida -> PRINT_R PAREN_IZQ valor PAREN_DER PUNTO_COMA','salida',5,'p_salida_obj','sintactico.py',249),
  ('salidas_pos_obj -> valor','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',252),
  ('salidas_pos_obj -> decl_variable','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',253),
  ('salidas_pos_obj -> conca_string','salidas_pos_obj',1,'p_salidas_pos_obj','sintactico.py',254),
  ('contenido -> bloque','contenido',1,'p_contenido','sintactico.py',261),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','sintactico.py',262),
  ('whileDeclaracion -> WHILE PAREN_IZQ decl_variable operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',9,'p_whileDeclaracion','sintactico.py',266),
  ('valores -> datos repite_valores','valores',2,'p_valoresSeparadosComa','sintactico.py',271),
  ('repite_valores -> COMA datos','repite_valores',2,'p_repite_valoresSeparadosComa','sintactico.py',274),
  ('repite_valores -> COMA datos repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','sintactico.py',275),
  ('arreglo -> ARRAY PAREN_IZQ valores PAREN_DER','arreglo',4,'p_arreglo_parentesis','sintactico.py',283),
  ('valoresflecha -> datos FLECHA datos repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','sintactico.py',288),
  ('repite_valores_f -> COMA datos FLECHA datos','repite_valores_f',4,'p_repite_valoresSeparados_flecha','sintactico.py',292),
  ('repite_valores_f -> COMA datos FLECHA datos repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','sintactico.py',293),
  ('arreglo -> decl_variable IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',7,'p_arreglo_asociativo','sintactico.py',297),
  ('parametros -> datos','parametros',1,'p_parametros','sintactico.py',303),
  ('parametros -> SIGNO_DOLAR VARIABLE','parametros',2,'p_parametros','sintactico.py',304),
  ('parametrosR -> parametros','parametrosR',1,'p_parametrosR','sintactico.py',308),
  ('parametrosR -> parametros repite_parametros','parametrosR',2,'p_parametrosR','sintactico.py',309),
  ('repite_parametros -> COMA parametros','repite_parametros',2,'p_repite_parametros','sintactico.py',314),
  ('repite_parametros -> COMA parametros repite_parametros','repite_parametros',3,'p_repite_parametros','sintactico.py',315),
  ('functConRetorno -> FUNCTION VARIABLE PAREN_IZQ parametrosR PAREN_DER LLAVE_IZQ bloque LLAVE_DER','functConRetorno',8,'p_functConRetorno','sintactico.py',319),
  ('llamadaFuncion -> VARIABLE PAREN_IZQ parametrosR PAREN_DER PUNTO_COMA','llamadaFuncion',5,'p_llamadaFuncion','sintactico.py',322),
]
