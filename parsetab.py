
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_SYMB ARRAY AS ASIG_CONCA ASIG_REFER BOOLEANO BREAK CADENA CALLABLE CASE CATH CLASS CLONE COMA COMENTARIO CONST CONTINUE CORCH_DER CORCH_IZQ COUNT CURRENT DECLARE DECREMENTO DEFAULT DIFERENTE DIVISION DIVISION_ENT DO ECHO ELSE ELSEIF ENDDECLARE ENDIF ENDSWITCH ENDWHILE ENTERO ESPACIO EXTENDS FINAL FINALLY FLECHA FLOTANTE FN FOR FOREACH FUNCTION GLOBAL IDENTICO IF IGUAL IMPLEMENTS INCLUDE INCREMENTO INTANCEOF INTEADOF INTERFACE INTERROG_CE LLAVE_DER LLAVE_IZQ MACHT MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MODULO MULTIPL NAMESPACE NEW OR OR_SYMB PAREN_DER PAREN_IZQ POP POTENCIA PRINT PRIVATE PROTECTED PUBLIC PUNTO PUNTODOBLE PUNTO_COMA PUSH QUEUE REQUIERE RESTA RETURN SALTO_LINEA SIGNO_DOLAR STACK STATIC STRING STRREV SUMA SWITCH TABULACION THROW TRAIT TRES_PUNTOS TRY USE VAR WHILEinstrucciones : valor\n                    | menor\n                    | mayor\n                    | asignacion\n                    | salida\n                    | prueba\n                    | estructuras_control\n                    | estructuras_datos\n                    | funciones  \n                    | op_logica\n                    | op_pila\n                    | declaracion\n                    | declaracionp\n                    | declaracion_s\n                    | crecimiento\n                    | valorc\n\n\n  asignacion : SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMAvalor : datos \n          | pila\n          | cola\n  datos : ENTERO\n          | FLOTANTE\n          | STRING \n          | BOOLEANO \n  salida : ECHO CADENA PUNTO_COMAprueba : ECHO SIGNO_DOLAR CADENA PUNTO_COMAsalida : PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMAsalida : PRINT STRING PUNTO_COMA estructuras_control : if_else \n                          | for\n                          | whileDeclaracion\n   estructuras_datos : pila \n                        | cola\n                        | arreglo\n  funciones : funcion_variable \n                | sinRetorno\n  operad_log : IDENTICO\n                | DIFERENTE\n                | MAYOR_QUE\n                | MAYOR_IGUAL\n                | MENOR_QUE\n                | MENOR_IGUAL\n   bloque : asignacion\n              | salida\n              | retorno\n   cola : NEW QUEUE PAREN_IZQ PAREN_DER for : FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ prueba LLAVE_DERdeclaracion :  SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMAdeclaracionp :  SIGNO_DOLAR CADENA valorcmenor : MENOR_IGUAL ENTERO PUNTO_COMAmayor : MAYOR_IGUAL ENTERO PUNTO_COMA valorc : menor\n              | mayordeclaracion_s : SIGNO_DOLAR CADENA crecimientocrecimiento : INCREMENTO \n                | DECREMENTO if_else : if_else_inicio if_else_fin if_else : if_else_inicio if_else_cuerpo if_else_finif_else_inicio : IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DERif_else_cuerpo : ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DERif_else_fin : ELSE LLAVE_IZQ salida LLAVE_DER op_logica : ENTERO operad_log ENTERO\n                | FLOTANTE operad_log FLOTANTE\n                | STRING operad_log STRING\n                | BOOLEANO\n   pila :  NEW STACK PAREN_IZQ PAREN_DER op_pila : SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila operad_pila : PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA \n                  | POP PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | COUNT PAREN_IZQ PAREN_DER PUNTO_COMA\n                  | CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA\n   funcion_variable : FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER retorno : RETURN SIGNO_DOLAR CADENAcontenido : bloque\n               | sinRetornowhileDeclaracion : WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DERvalores : valor repite_valores repite_valores : COMA valor\n                        | COMA valor repite_valores\n    arreglo : SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA valoresflecha : valor FLECHA valor repite_valores_f repite_valores_f : COMA valor FLECHA valor\n                        | COMA valor FLECHA valor repite_valores\n  arreglo : SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMAsinRetorno : FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER'
    
_lr_action_items = {'MENOR_IGUAL':([0,22,27,34,53,95,96,97,118,135,],[21,51,51,51,21,51,51,51,51,21,]),'MAYOR_IGUAL':([0,22,27,34,53,95,96,97,118,135,],[23,49,49,49,23,49,49,49,49,23,]),'SIGNO_DOLAR':([0,25,66,67,70,72,75,77,78,90,93,115,119,123,170,182,183,184,193,208,],[24,55,91,92,-50,-51,-49,-52,-53,116,120,134,138,-48,186,55,186,186,204,120,]),'ECHO':([0,88,140,149,167,170,183,184,],[25,113,113,113,182,113,113,113,]),'PRINT':([0,88,140,149,170,183,184,],[26,26,26,26,26,26,26,]),'ENTERO':([0,21,23,45,46,47,48,49,50,51,69,73,89,124,136,137,145,160,161,195,209,211,],[22,44,52,71,-37,-38,-39,-40,-41,-42,95,100,95,144,152,144,144,144,144,144,144,144,]),'FLOTANTE':([0,46,47,48,49,50,51,59,69,73,89,124,137,145,160,161,195,209,211,],[34,-37,-38,-39,-40,-41,-42,84,96,104,96,104,104,104,104,104,104,104,104,]),'STRING':([0,26,46,47,48,49,50,51,56,58,69,73,89,124,137,145,160,161,195,209,211,],[27,57,-37,-38,-39,-40,-41,-42,81,83,97,105,97,105,105,105,105,105,105,105,105,]),'BOOLEANO':([0,46,47,48,49,50,51,69,73,89,124,137,145,160,161,195,209,211,],[35,-37,-38,-39,-40,-41,-42,98,106,98,106,106,106,106,106,106,106,106,]),'INCREMENTO':([0,53,151,],[36,36,36,]),'DECREMENTO':([0,53,151,],[37,37,37,]),'NEW':([0,46,47,48,49,50,51,73,124,137,160,161,195,209,211,],[38,-37,-38,-39,-40,-41,-42,38,38,38,38,38,38,38,38,]),'FOR':([0,],[40,]),'WHILE':([0,],[41,]),'FUNCTION':([0,170,183,],[42,185,185,]),'IF':([0,],[43,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,27,28,29,30,31,32,33,34,35,36,37,62,70,71,72,75,76,77,78,79,82,83,84,87,108,110,111,122,123,125,130,131,172,173,177,178,179,197,198,203,206,207,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-20,-21,-23,-29,-30,-31,-34,-35,-36,-22,-24,-55,-56,-57,-50,-62,-51,-49,-54,-52,-53,-25,-28,-64,-63,-58,-26,-66,-46,-17,-48,-67,-27,-61,-80,-84,-69,-70,-71,-68,-47,-85,-76,-72,]),'PUNTO_COMA':([18,44,52,54,57,80,99,100,102,103,104,105,106,109,110,111,144,152,157,158,163,164,165,176,],[-18,70,72,79,82,108,122,123,-19,-20,-22,-23,-24,130,-66,-46,-21,123,172,173,177,178,179,197,]),'FLECHA':([18,102,103,104,105,106,110,111,143,144,205,],[-18,-19,-20,-22,-23,-24,-66,-46,160,-21,211,]),'COMA':([18,102,103,104,105,106,110,111,143,144,174,175,212,],[-18,-19,-20,-22,-23,-24,-66,-46,161,-21,195,161,161,]),'PAREN_DER':([18,36,37,71,76,81,83,84,85,86,94,98,102,103,104,105,106,110,111,114,133,139,141,142,144,146,147,148,153,154,159,162,175,194,196,212,213,],[-18,-55,-56,-62,-54,109,-64,-63,110,111,121,-65,-19,-20,-22,-23,-24,-66,-46,132,150,155,157,158,-21,163,164,165,168,169,-77,176,-78,-81,-79,-82,-83,]),'IDENTICO':([22,27,34,95,96,97,118,],[46,46,46,46,46,46,46,]),'DIFERENTE':([22,27,34,95,96,97,118,],[47,47,47,47,47,47,47,]),'MAYOR_QUE':([22,27,34,74,95,96,97,118,],[48,48,48,107,48,48,48,48,]),'MENOR_QUE':([22,27,34,95,96,97,118,],[50,50,50,50,50,50,50,]),'CADENA':([24,25,42,55,91,92,113,116,120,134,138,185,186,204,],[53,54,68,80,117,118,54,135,139,151,154,201,202,210,]),'PAREN_IZQ':([26,40,41,43,60,61,65,68,101,126,127,128,129,201,],[56,66,67,69,85,86,89,93,124,145,146,147,148,208,]),'STACK':([38,],[60,]),'QUEUE':([38,],[61,]),'ELSE':([39,63,171,180,],[64,64,-59,-60,]),'ELSEIF':([39,171,],[65,-59,]),'IGUAL':([53,117,202,],[73,136,209,]),'RESTA':([53,],[74,]),'LLAVE_IZQ':([64,121,132,150,155,168,169,],[88,140,149,167,170,183,184,]),'ARRAY':([73,],[101,]),'LLAVE_DER':([79,82,108,112,122,130,156,166,181,187,188,189,190,191,192,199,200,203,210,],[-25,-28,-26,131,-17,-27,171,180,198,203,-74,-75,-43,-44,-45,206,207,-85,-73,]),'TRES_PUNTOS':([93,],[119,]),'PUSH':([107,],[126,]),'POP':([107,],[127,]),'COUNT':([107,],[128,]),'CURRENT':([107,],[129,]),'RETURN':([170,183,184,],[193,193,193,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'valor':([0,73,124,137,160,161,195,209,211,],[2,99,143,153,174,175,205,99,212,]),'menor':([0,53,135,],[3,77,77,]),'mayor':([0,53,135,],[4,78,78,]),'asignacion':([0,170,183,184,],[5,190,190,190,]),'salida':([0,88,140,149,170,183,184,],[6,112,156,166,191,191,191,]),'prueba':([0,167,],[7,181,]),'estructuras_control':([0,],[8,]),'estructuras_datos':([0,],[9,]),'funciones':([0,],[10,]),'op_logica':([0,69,89,],[11,94,114,]),'op_pila':([0,],[12,]),'declaracion':([0,66,],[13,90,]),'declaracionp':([0,90,],[14,115,]),'declaracion_s':([0,115,],[15,133,]),'crecimiento':([0,53,151,],[16,76,76,]),'valorc':([0,53,135,],[17,75,75,]),'datos':([0,73,124,137,145,160,161,195,209,211,],[18,18,18,18,162,18,18,18,18,18,]),'pila':([0,73,124,137,160,161,195,209,211,],[19,102,102,102,102,102,102,102,102,]),'cola':([0,73,124,137,160,161,195,209,211,],[20,103,103,103,103,103,103,103,103,]),'if_else':([0,],[28,]),'for':([0,],[29,]),'whileDeclaracion':([0,],[30,]),'arreglo':([0,],[31,]),'funcion_variable':([0,],[32,]),'sinRetorno':([0,170,183,],[33,189,189,]),'if_else_inicio':([0,],[39,]),'operad_log':([22,27,34,95,96,97,118,],[45,58,59,45,59,58,137,]),'if_else_fin':([39,63,],[62,87,]),'if_else_cuerpo':([39,],[63,]),'operad_pila':([107,],[125,]),'valores':([124,],[141,]),'valoresflecha':([124,],[142,]),'repite_valores':([143,175,212,],[159,196,213,]),'contenido':([170,183,],[187,199,]),'bloque':([170,183,184,],[188,188,200,]),'retorno':([170,183,184,],[192,192,192,]),'repite_valores_f':([174,],[194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','main.py',11),
  ('instrucciones -> menor','instrucciones',1,'p_instrucciones','main.py',12),
  ('instrucciones -> mayor','instrucciones',1,'p_instrucciones','main.py',13),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','main.py',14),
  ('instrucciones -> salida','instrucciones',1,'p_instrucciones','main.py',15),
  ('instrucciones -> prueba','instrucciones',1,'p_instrucciones','main.py',16),
  ('instrucciones -> estructuras_control','instrucciones',1,'p_instrucciones','main.py',17),
  ('instrucciones -> estructuras_datos','instrucciones',1,'p_instrucciones','main.py',18),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','main.py',19),
  ('instrucciones -> op_logica','instrucciones',1,'p_instrucciones','main.py',20),
  ('instrucciones -> op_pila','instrucciones',1,'p_instrucciones','main.py',21),
  ('instrucciones -> declaracion','instrucciones',1,'p_instrucciones','main.py',22),
  ('instrucciones -> declaracionp','instrucciones',1,'p_instrucciones','main.py',23),
  ('instrucciones -> declaracion_s','instrucciones',1,'p_instrucciones','main.py',24),
  ('instrucciones -> crecimiento','instrucciones',1,'p_instrucciones','main.py',25),
  ('instrucciones -> valorc','instrucciones',1,'p_instrucciones','main.py',26),
  ('asignacion -> SIGNO_DOLAR CADENA IGUAL valor PUNTO_COMA','asignacion',5,'p_asignacion','main.py',32),
  ('valor -> datos','valor',1,'p_valor','main.py',37),
  ('valor -> pila','valor',1,'p_valor','main.py',38),
  ('valor -> cola','valor',1,'p_valor','main.py',39),
  ('datos -> ENTERO','datos',1,'p_datos','main.py',44),
  ('datos -> FLOTANTE','datos',1,'p_datos','main.py',45),
  ('datos -> STRING','datos',1,'p_datos','main.py',46),
  ('datos -> BOOLEANO','datos',1,'p_datos','main.py',47),
  ('salida -> ECHO CADENA PUNTO_COMA','salida',3,'p_salida_forma1','main.py',53),
  ('prueba -> ECHO SIGNO_DOLAR CADENA PUNTO_COMA','prueba',4,'p_prueba','main.py',55),
  ('salida -> PRINT PAREN_IZQ STRING PAREN_DER PUNTO_COMA','salida',5,'p_salida_forma2','main.py',58),
  ('salida -> PRINT STRING PUNTO_COMA','salida',3,'p_salida_forma3','main.py',61),
  ('estructuras_control -> if_else','estructuras_control',1,'p_estructuras_control','main.py',68),
  ('estructuras_control -> for','estructuras_control',1,'p_estructuras_control','main.py',69),
  ('estructuras_control -> whileDeclaracion','estructuras_control',1,'p_estructuras_control','main.py',70),
  ('estructuras_datos -> pila','estructuras_datos',1,'p_estructuras_datos','main.py',74),
  ('estructuras_datos -> cola','estructuras_datos',1,'p_estructuras_datos','main.py',75),
  ('estructuras_datos -> arreglo','estructuras_datos',1,'p_estructuras_datos','main.py',76),
  ('funciones -> funcion_variable','funciones',1,'p_funciones','main.py',80),
  ('funciones -> sinRetorno','funciones',1,'p_funciones','main.py',81),
  ('operad_log -> IDENTICO','operad_log',1,'p_operad_log','main.py',86),
  ('operad_log -> DIFERENTE','operad_log',1,'p_operad_log','main.py',87),
  ('operad_log -> MAYOR_QUE','operad_log',1,'p_operad_log','main.py',88),
  ('operad_log -> MAYOR_IGUAL','operad_log',1,'p_operad_log','main.py',89),
  ('operad_log -> MENOR_QUE','operad_log',1,'p_operad_log','main.py',90),
  ('operad_log -> MENOR_IGUAL','operad_log',1,'p_operad_log','main.py',91),
  ('bloque -> asignacion','bloque',1,'p_bloque','main.py',95),
  ('bloque -> salida','bloque',1,'p_bloque','main.py',96),
  ('bloque -> retorno','bloque',1,'p_bloque','main.py',97),
  ('cola -> NEW QUEUE PAREN_IZQ PAREN_DER','cola',4,'p_cola','main.py',109),
  ('for -> FOR PAREN_IZQ declaracion declaracionp declaracion_s PAREN_DER LLAVE_IZQ prueba LLAVE_DER','for',9,'p_for','main.py',113),
  ('declaracion -> SIGNO_DOLAR CADENA IGUAL ENTERO PUNTO_COMA','declaracion',5,'p_declaracion','main.py',116),
  ('declaracionp -> SIGNO_DOLAR CADENA valorc','declaracionp',3,'p_declaracionM','main.py',118),
  ('menor -> MENOR_IGUAL ENTERO PUNTO_COMA','menor',3,'p_menor','main.py',120),
  ('mayor -> MAYOR_IGUAL ENTERO PUNTO_COMA','mayor',3,'p_mayor','main.py',122),
  ('valorc -> menor','valorc',1,'p_valorC','main.py',124),
  ('valorc -> mayor','valorc',1,'p_valorC','main.py',125),
  ('declaracion_s -> SIGNO_DOLAR CADENA crecimiento','declaracion_s',3,'p_declaracionsimple','main.py',127),
  ('crecimiento -> INCREMENTO','crecimiento',1,'p_crecimiento','main.py',129),
  ('crecimiento -> DECREMENTO','crecimiento',1,'p_crecimiento','main.py',130),
  ('if_else -> if_else_inicio if_else_fin','if_else',2,'p_if_else_corto','main.py',140),
  ('if_else -> if_else_inicio if_else_cuerpo if_else_fin','if_else',3,'p_if_else_extendido','main.py',144),
  ('if_else_inicio -> IF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER','if_else_inicio',7,'p_if_else_inicio','main.py',148),
  ('if_else_cuerpo -> ELSEIF PAREN_IZQ op_logica PAREN_DER LLAVE_IZQ salida LLAVE_DER','if_else_cuerpo',7,'p_if_else_cuerpo','main.py',152),
  ('if_else_fin -> ELSE LLAVE_IZQ salida LLAVE_DER','if_else_fin',4,'p_if_else_fin','main.py',156),
  ('op_logica -> ENTERO operad_log ENTERO','op_logica',3,'p_op_logica','main.py',160),
  ('op_logica -> FLOTANTE operad_log FLOTANTE','op_logica',3,'p_op_logica','main.py',161),
  ('op_logica -> STRING operad_log STRING','op_logica',3,'p_op_logica','main.py',162),
  ('op_logica -> BOOLEANO','op_logica',1,'p_op_logica','main.py',163),
  ('pila -> NEW STACK PAREN_IZQ PAREN_DER','pila',4,'p_pila','main.py',171),
  ('op_pila -> SIGNO_DOLAR CADENA RESTA MAYOR_QUE operad_pila','op_pila',5,'p_op_pila','main.py',176),
  ('operad_pila -> PUSH PAREN_IZQ datos PAREN_DER PUNTO_COMA','operad_pila',5,'p_operad_pila','main.py',180),
  ('operad_pila -> POP PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','main.py',181),
  ('operad_pila -> COUNT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','main.py',182),
  ('operad_pila -> CURRENT PAREN_IZQ PAREN_DER PUNTO_COMA','operad_pila',4,'p_operad_pila','main.py',183),
  ('funcion_variable -> FUNCTION CADENA PAREN_IZQ TRES_PUNTOS SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ bloque LLAVE_DER','funcion_variable',10,'p_funcion_variable','main.py',191),
  ('retorno -> RETURN SIGNO_DOLAR CADENA','retorno',3,'p_retorno','main.py',197),
  ('contenido -> bloque','contenido',1,'p_contenido','main.py',204),
  ('contenido -> sinRetorno','contenido',1,'p_contenido','main.py',205),
  ('whileDeclaracion -> WHILE PAREN_IZQ SIGNO_DOLAR CADENA operad_log valor PAREN_DER LLAVE_IZQ contenido LLAVE_DER','whileDeclaracion',10,'p_whileDeclaracion','main.py',209),
  ('valores -> valor repite_valores','valores',2,'p_valoresSeparadosComa','main.py',214),
  ('repite_valores -> COMA valor','repite_valores',2,'p_repite_valoresSeparadosComa','main.py',217),
  ('repite_valores -> COMA valor repite_valores','repite_valores',3,'p_repite_valoresSeparadosComa','main.py',218),
  ('arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valores PAREN_DER PUNTO_COMA','arreglo',8,'p_arreglo_parentesis','main.py',226),
  ('valoresflecha -> valor FLECHA valor repite_valores_f','valoresflecha',4,'p_valoresArregloAsociativo','main.py',231),
  ('repite_valores_f -> COMA valor FLECHA valor','repite_valores_f',4,'p_repite_valoresSeparados_flecha','main.py',235),
  ('repite_valores_f -> COMA valor FLECHA valor repite_valores','repite_valores_f',5,'p_repite_valoresSeparados_flecha','main.py',236),
  ('arreglo -> SIGNO_DOLAR CADENA IGUAL ARRAY PAREN_IZQ valoresflecha PAREN_DER PUNTO_COMA','arreglo',8,'p_arreglo_asociativo','main.py',240),
  ('sinRetorno -> FUNCTION CADENA PAREN_IZQ SIGNO_DOLAR CADENA PAREN_DER LLAVE_IZQ contenido LLAVE_DER','sinRetorno',9,'p_sinretorno','main.py',244),
]
